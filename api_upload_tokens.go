/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type UploadTokensApiListRequest struct {
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r UploadTokensApiListRequest) SortBy(sortBy string) UploadTokensApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r UploadTokensApiListRequest) SortOrder(sortOrder string) UploadTokensApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r UploadTokensApiListRequest) CurrentPage(currentPage int32) UploadTokensApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r UploadTokensApiListRequest) PageSize(pageSize int32) UploadTokensApiListRequest {
	r.pageSize = &pageSize
	return r
}

type UploadTokensServiceI interface {
	/*
	 * DeleteToken Delete an upload token
	 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
	 * @return UploadTokensApiDeleteTokenRequest
	 */

	DeleteToken(uploadToken string) error

	/*
	 * DeleteToken Delete an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
	 * @return UploadTokensApiDeleteTokenRequest
	 */

	DeleteTokenWithContext(ctx context.Context, uploadToken string) error

	/*
	 * List List all active upload tokens.
	 * @return UploadTokensApiListRequest
	 */

	List(r UploadTokensApiListRequest) (*TokenListResponse, error)

	/*
	 * List List all active upload tokens.
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return UploadTokensApiListRequest
	 */

	ListWithContext(ctx context.Context, r UploadTokensApiListRequest) (*TokenListResponse, error)

	/*
	 * GetToken Show upload token
	 * @param uploadToken The unique identifier for the token you want information about.
	 * @return UploadTokensApiGetTokenRequest
	 */

	GetToken(uploadToken string) (*UploadToken, error)

	/*
	 * GetToken Show upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param uploadToken The unique identifier for the token you want information about.
	 * @return UploadTokensApiGetTokenRequest
	 */

	GetTokenWithContext(ctx context.Context, uploadToken string) (*UploadToken, error)

	/*
	 * CreateToken Generate an upload token
	 * @return UploadTokensApiCreateTokenRequest
	 */

	CreateToken(tokenCreationPayload TokenCreationPayload) (*UploadToken, error)

	/*
	 * CreateToken Generate an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return UploadTokensApiCreateTokenRequest
	 */

	CreateTokenWithContext(ctx context.Context, tokenCreationPayload TokenCreationPayload) (*UploadToken, error)
}

// UploadTokensService communicating with the UploadTokens
// endpoints of the api.video API
type UploadTokensService struct {
	client *Client
}

/*
 * DeleteToken Delete an upload token
 * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.

 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
 * @return UploadTokensApiDeleteTokenRequest
 */

func (s *UploadTokensService) DeleteToken(uploadToken string) error {

	return s.DeleteTokenWithContext(context.Background(), uploadToken)

}

/*
 * DeleteToken Delete an upload token
 * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
 * @return UploadTokensApiDeleteTokenRequest
 */

func (s *UploadTokensService) DeleteTokenWithContext(ctx context.Context, uploadToken string) error {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens/{uploadToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"uploadToken"+"}", url.PathEscape(parameterToString(uploadToken, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List all active upload tokens.
 * A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.

 * @return UploadTokensApiListRequest
 */

func (s *UploadTokensService) List(r UploadTokensApiListRequest) (*TokenListResponse, error) {

	return s.ListWithContext(context.Background(), r)

}

/*
 * List List all active upload tokens.
 * A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return UploadTokensApiListRequest
 */

func (s *UploadTokensService) ListWithContext(ctx context.Context, r UploadTokensApiListRequest) (*TokenListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(TokenListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetToken Show upload token
 * You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.

 * @param uploadToken The unique identifier for the token you want information about.
 * @return UploadTokensApiGetTokenRequest
 */

func (s *UploadTokensService) GetToken(uploadToken string) (*UploadToken, error) {

	return s.GetTokenWithContext(context.Background(), uploadToken)

}

/*
 * GetToken Show upload token
 * You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uploadToken The unique identifier for the token you want information about.
 * @return UploadTokensApiGetTokenRequest
 */

func (s *UploadTokensService) GetTokenWithContext(ctx context.Context, uploadToken string) (*UploadToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens/{uploadToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"uploadToken"+"}", url.PathEscape(parameterToString(uploadToken, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(UploadToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * CreateToken Generate an upload token
 * Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe.

 * @return UploadTokensApiCreateTokenRequest
 */

func (s *UploadTokensService) CreateToken(tokenCreationPayload TokenCreationPayload) (*UploadToken, error) {

	return s.CreateTokenWithContext(context.Background(), tokenCreationPayload)

}

/*
 * CreateToken Generate an upload token
 * Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return UploadTokensApiCreateTokenRequest
 */

func (s *UploadTokensService) CreateTokenWithContext(ctx context.Context, tokenCreationPayload TokenCreationPayload) (*UploadToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = tokenCreationPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(UploadToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
