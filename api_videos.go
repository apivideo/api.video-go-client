/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"reflect"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type VideosApiListRequest struct {
	title        *string
	tags         *[]string
	metadata     *map[string]string
	description  *string
	liveStreamId *string
	sortBy       *string
	sortOrder    *string
	currentPage  *int32
	pageSize     *int32
}

func (r VideosApiListRequest) Title(title string) VideosApiListRequest {
	r.title = &title
	return r
}
func (r VideosApiListRequest) Tags(tags []string) VideosApiListRequest {
	r.tags = &tags
	return r
}
func (r VideosApiListRequest) Metadata(metadata map[string]string) VideosApiListRequest {
	r.metadata = &metadata
	return r
}
func (r VideosApiListRequest) Description(description string) VideosApiListRequest {
	r.description = &description
	return r
}
func (r VideosApiListRequest) LiveStreamId(liveStreamId string) VideosApiListRequest {
	r.liveStreamId = &liveStreamId
	return r
}
func (r VideosApiListRequest) SortBy(sortBy string) VideosApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r VideosApiListRequest) SortOrder(sortOrder string) VideosApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r VideosApiListRequest) CurrentPage(currentPage int32) VideosApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r VideosApiListRequest) PageSize(pageSize int32) VideosApiListRequest {
	r.pageSize = &pageSize
	return r
}

type VideosServiceI interface {
	/*
	 * Delete Delete a video
	 * @param videoId The video ID for the video you want to delete.
	 * @return VideosApiDeleteRequest
	 */

	Delete(videoId string) error

	/*
	 * Delete Delete a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The video ID for the video you want to delete.
	 * @return VideosApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, videoId string) error

	/*
	 * Get Show a video
	 * @param videoId The unique identifier for the video you want details about.
	 * @return VideosApiGetRequest
	 */

	Get(videoId string) (*Video, error)

	/*
	 * Get Show a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want details about.
	 * @return VideosApiGetRequest
	 */

	GetWithContext(ctx context.Context, videoId string) (*Video, error)

	/*
	 * GetStatus Show video status
	 * @param videoId The unique identifier for the video you want the status for.
	 * @return VideosApiGetStatusRequest
	 */

	GetStatus(videoId string) (*VideoStatus, error)

	/*
	 * GetStatus Show video status
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want the status for.
	 * @return VideosApiGetStatusRequest
	 */

	GetStatusWithContext(ctx context.Context, videoId string) (*VideoStatus, error)

	/*
	 * List List all videos
	 * @return VideosApiListRequest
	 */

	List(r VideosApiListRequest) (*VideosListResponse, error)

	/*
	 * List List all videos
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosApiListRequest
	 */

	ListWithContext(ctx context.Context, r VideosApiListRequest) (*VideosListResponse, error)

	/*
	 * Update Update a video
	 * @param videoId The video ID for the video you want to delete.
	 * @return VideosApiUpdateRequest
	 */

	Update(videoId string, videoUpdatePayload VideoUpdatePayload) (*Video, error)

	/*
	 * Update Update a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The video ID for the video you want to delete.
	 * @return VideosApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, videoId string, videoUpdatePayload VideoUpdatePayload) (*Video, error)

	/*
	 * PickThumbnail Pick a thumbnail
	 * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
	 * @return VideosApiPickThumbnailRequest
	 */

	PickThumbnail(videoId string, videoThumbnailPickPayload VideoThumbnailPickPayload) (*Video, error)

	/*
	 * PickThumbnail Pick a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
	 * @return VideosApiPickThumbnailRequest
	 */

	PickThumbnailWithContext(ctx context.Context, videoId string, videoThumbnailPickPayload VideoThumbnailPickPayload) (*Video, error)

	/*
	 * UploadWithUploadToken Upload with an upload token
	 * @return VideosApiUploadWithUploadTokenRequest
	 */
	UploadWithUploadToken(token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
	/*
	 * UploadWithUploadToken Upload with an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosApiUploadWithUploadTokenRequest
	 */
	UploadWithUploadTokenWithContext(ctx context.Context, token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)

	/*
	 * UploadWithUploadToken Upload with an upload token
	 * @return VideosApiUploadWithUploadTokenRequest
	 */
	UploadWithUploadTokenFile(token string, file *os.File) (*Video, error)

	/*
	 * UploadWithUploadToken Upload with an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosApiUploadWithUploadTokenRequest
	 */
	UploadWithUploadTokenFileWithContext(ctx context.Context, token string, file *os.File) (*Video, error)
	/*
	 * Create Create a video
	 * @return VideosApiCreateRequest
	 */

	Create(videoCreationPayload VideoCreationPayload) (*Video, error)

	/*
	 * Create Create a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosApiCreateRequest
	 */

	CreateWithContext(ctx context.Context, videoCreationPayload VideoCreationPayload) (*Video, error)

	/*
	 * Upload Upload a video
	 * @param videoId Enter the videoId you want to use to upload your video.
	 * @return VideosApiUploadRequest
	 */
	Upload(videoId string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)
	/*
	 * Upload Upload a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId Enter the videoId you want to use to upload your video.
	 * @return VideosApiUploadRequest
	 */
	UploadWithContext(ctx context.Context, videoId string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)

	/*
	 * Upload Upload a video
	 * @param videoId Enter the videoId you want to use to upload your video.
	 * @return VideosApiUploadRequest
	 */
	UploadFile(videoId string, file *os.File) (*Video, error)

	/*
	 * Upload Upload a video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId Enter the videoId you want to use to upload your video.
	 * @return VideosApiUploadRequest
	 */
	UploadFileWithContext(ctx context.Context, videoId string, file *os.File) (*Video, error)
	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param videoId Unique identifier of the chosen video
	 * @return VideosApiUploadThumbnailRequest
	 */
	UploadThumbnail(videoId string, fileName string, fileReader io.Reader) (*Video, error)
	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId Unique identifier of the chosen video
	 * @return VideosApiUploadThumbnailRequest
	 */
	UploadThumbnailWithContext(ctx context.Context, videoId string, fileName string, fileReader io.Reader) (*Video, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param videoId Unique identifier of the chosen video
	 * @return VideosApiUploadThumbnailRequest
	 */
	UploadThumbnailFile(videoId string, file *os.File) (*Video, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId Unique identifier of the chosen video
	 * @return VideosApiUploadThumbnailRequest
	 */
	UploadThumbnailFileWithContext(ctx context.Context, videoId string, file *os.File) (*Video, error)
}

// VideosService communicating with the Videos
// endpoints of the api.video API
type VideosService struct {
	client *Client
}

/*
 * Delete Delete a video
 * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).

 * @param videoId The video ID for the video you want to delete.
 * @return VideosApiDeleteRequest
 */

func (s *VideosService) Delete(videoId string) error {

	return s.DeleteWithContext(context.Background(), videoId)

}

/*
 * Delete Delete a video
 * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The video ID for the video you want to delete.
 * @return VideosApiDeleteRequest
 */

func (s *VideosService) DeleteWithContext(ctx context.Context, videoId string) error {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * Get Show a video
 * This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).

 * @param videoId The unique identifier for the video you want details about.
 * @return VideosApiGetRequest
 */

func (s *VideosService) Get(videoId string) (*Video, error) {

	return s.GetWithContext(context.Background(), videoId)

}

/*
 * Get Show a video
 * This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want details about.
 * @return VideosApiGetRequest
 */

func (s *VideosService) GetWithContext(ctx context.Context, videoId string) (*Video, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Video)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetStatus Show video status
 * This API provides upload status & encoding status to determine when the video is uploaded or ready to playback.

Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).

 * @param videoId The unique identifier for the video you want the status for.
 * @return VideosApiGetStatusRequest
*/

func (s *VideosService) GetStatus(videoId string) (*VideoStatus, error) {

	return s.GetStatusWithContext(context.Background(), videoId)

}

/*
 * GetStatus Show video status
 * This API provides upload status & encoding status to determine when the video is uploaded or ready to playback.

Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want the status for.
 * @return VideosApiGetStatusRequest
*/

func (s *VideosService) GetStatusWithContext(ctx context.Context, videoId string) (*VideoStatus, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(VideoStatus)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * List List all videos
 * Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below. We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.

 * @return VideosApiListRequest
 */

func (s *VideosService) List(r VideosApiListRequest) (*VideosListResponse, error) {

	return s.ListWithContext(context.Background(), r)

}

/*
 * List List all videos
 * Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below. We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideosApiListRequest
 */

func (s *VideosService) ListWithContext(ctx context.Context, r VideosApiListRequest) (*VideosListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.title != nil {
		localVarQueryParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.metadata != nil {
		if r.metadata != nil && len(*r.metadata) > 0 {
			for k, v := range *r.metadata {
				localVarQueryParams.Add(fmt.Sprintf("metadata[%s]", k), v)
			}
		}
	}
	if r.description != nil {
		localVarQueryParams.Add("description", parameterToString(*r.description, ""))
	}
	if r.liveStreamId != nil {
		localVarQueryParams.Add("liveStreamId", parameterToString(*r.liveStreamId, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(VideosListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a video
 * Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).

 * @param videoId The video ID for the video you want to delete.
 * @return VideosApiUpdateRequest
 */

func (s *VideosService) Update(videoId string, videoUpdatePayload VideoUpdatePayload) (*Video, error) {

	return s.UpdateWithContext(context.Background(), videoId, videoUpdatePayload)

}

/*
 * Update Update a video
 * Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The video ID for the video you want to delete.
 * @return VideosApiUpdateRequest
 */

func (s *VideosService) UpdateWithContext(ctx context.Context, videoId string, videoUpdatePayload VideoUpdatePayload) (*Video, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = videoUpdatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Video)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * PickThumbnail Pick a thumbnail
 * Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).

 * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
 * @return VideosApiPickThumbnailRequest
*/

func (s *VideosService) PickThumbnail(videoId string, videoThumbnailPickPayload VideoThumbnailPickPayload) (*Video, error) {

	return s.PickThumbnailWithContext(context.Background(), videoId, videoThumbnailPickPayload)

}

/*
 * PickThumbnail Pick a thumbnail
 * Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
 * @return VideosApiPickThumbnailRequest
*/

func (s *VideosService) PickThumbnailWithContext(ctx context.Context, videoId string, videoThumbnailPickPayload VideoThumbnailPickPayload) (*Video, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = videoThumbnailPickPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Video)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadWithUploadToken Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.

 * @return VideosApiUploadWithUploadTokenRequest
*/

func (s *VideosService) UploadWithUploadTokenFile(token string, file *os.File) (*Video, error) {
	return s.UploadWithUploadTokenFileWithContext(context.Background(), token, file)
}

/*
 * UploadWithUploadToken Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideosApiUploadWithUploadTokenRequest
*/

func (s *VideosService) UploadWithUploadTokenFileWithContext(ctx context.Context, token string, file *os.File) (*Video, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadWithUploadTokenWithContext(ctx, token, file.Name(), io.Reader(file), fileSize)
}

/*
 * UploadWithUploadToken Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.

 * @return VideosApiUploadWithUploadTokenRequest
*/
func (s *VideosService) UploadWithUploadToken(token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadWithUploadTokenWithContext(context.Background(), token, fileName, fileReader, fileSize)
}

/*
 * UploadWithUploadToken Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideosApiUploadWithUploadTokenRequest
*/
func (s *VideosService) UploadWithUploadTokenWithContext(ctx context.Context, token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	localVarPath := "/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{"token": []string{token}}
	localVarFormParams := make(map[string]string)

	requests, err := s.client.prepareRangeRequests(ctx, localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Video)
	for _, req := range requests {
		_, err = s.client.do(req, res)

		if err != nil {
			return nil, err
		}
	}

	return res, nil

}

/*
 * Create Create a video
 * To create a video, you create its metadata first, before adding the video file (exception - when using an existing HTTP source).
* Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata

 ```shell
$ curl https://ws.api.video/videos \
-H 'Authorization: Bearer {access_token} \
-d '{"title":"My video",
     "description":"so many details",
     "mp4Support":true
}'
``` ### add an URL to upload on creation
You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter:
```shell
$ curl https://ws.api.video/videos \
-H 'Authorization: Bearer {access_token} \
-d '{"source":"http://uri/to/video.mp4", "title":"My video"}'
```
In this case, the service will respond `202 Accepted` and download the video asynchronously. ### Track users with Dynamic Metadata
Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: ``` "metadata":[{"dynamicKey": "__dynamicKey__"}] ```
The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: ``` <iframe type="text/html" src="https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug" width="960" height="320" frameborder="0" scrollling="no"></iframe> ```
This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos.

 We have tutorials on:
* [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)
* [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)
* [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)
* [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
* [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)
* Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.


 * @return VideosApiCreateRequest
*/

func (s *VideosService) Create(videoCreationPayload VideoCreationPayload) (*Video, error) {

	return s.CreateWithContext(context.Background(), videoCreationPayload)

}

/*
 * Create Create a video
 * To create a video, you create its metadata first, before adding the video file (exception - when using an existing HTTP source).
* Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata

 ```shell
$ curl https://ws.api.video/videos \
-H 'Authorization: Bearer {access_token} \
-d '{"title":"My video",
     "description":"so many details",
     "mp4Support":true
}'
``` ### add an URL to upload on creation
You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter:
```shell
$ curl https://ws.api.video/videos \
-H 'Authorization: Bearer {access_token} \
-d '{"source":"http://uri/to/video.mp4", "title":"My video"}'
```
In this case, the service will respond `202 Accepted` and download the video asynchronously. ### Track users with Dynamic Metadata
Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: ``` "metadata":[{"dynamicKey": "__dynamicKey__"}] ```
The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: ``` <iframe type="text/html" src="https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug" width="960" height="320" frameborder="0" scrollling="no"></iframe> ```
This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos.

 We have tutorials on:
* [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)
* [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)
* [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)
* [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
* [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)
* Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.

 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return VideosApiCreateRequest
*/

func (s *VideosService) CreateWithContext(ctx context.Context, videoCreationPayload VideoCreationPayload) (*Video, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = videoCreationPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Video)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Upload Upload a video
 * To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.
```bash curl https://ws.api.video/videos/{videoId}/source \
  -H 'Authorization: Bearer {access_token}' \
  -F file=@/path/to/video.mp4
  ```
Tutorials using [video upload](https://api.video/blog/endpoints/video-upload)

 * @param videoId Enter the videoId you want to use to upload your video.
 * @return VideosApiUploadRequest
*/

func (s *VideosService) UploadFile(videoId string, file *os.File) (*Video, error) {
	return s.UploadFileWithContext(context.Background(), videoId, file)
}

/*
 * Upload Upload a video
 * To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.
```bash curl https://ws.api.video/videos/{videoId}/source \
  -H 'Authorization: Bearer {access_token}' \
  -F file=@/path/to/video.mp4
  ```
Tutorials using [video upload](https://api.video/blog/endpoints/video-upload)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId Enter the videoId you want to use to upload your video.
 * @return VideosApiUploadRequest
*/

func (s *VideosService) UploadFileWithContext(ctx context.Context, videoId string, file *os.File) (*Video, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.UploadWithContext(ctx, videoId, file.Name(), io.Reader(file), fileSize)
}

/*
 * Upload Upload a video
 * To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.
```bash curl https://ws.api.video/videos/{videoId}/source \
  -H 'Authorization: Bearer {access_token}' \
  -F file=@/path/to/video.mp4
  ```
Tutorials using [video upload](https://api.video/blog/endpoints/video-upload)

 * @param videoId Enter the videoId you want to use to upload your video.
 * @return VideosApiUploadRequest
*/
func (s *VideosService) Upload(videoId string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	return s.UploadWithContext(context.Background(), videoId, fileName, fileReader, fileSize)
}

/*
 * Upload Upload a video
 * To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once.
```bash curl https://ws.api.video/videos/{videoId}/source \
  -H 'Authorization: Bearer {access_token}' \
  -F file=@/path/to/video.mp4
  ```
Tutorials using [video upload](https://api.video/blog/endpoints/video-upload)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId Enter the videoId you want to use to upload your video.
 * @return VideosApiUploadRequest
*/
func (s *VideosService) UploadWithContext(ctx context.Context, videoId string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	localVarPath := "/videos/{videoId}/source"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	requests, err := s.client.prepareRangeRequests(ctx, localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Video)
	for _, req := range requests {
		_, err = s.client.do(req, res)

		if err != nil {
			return nil, err
		}
	}

	return res, nil

}

/*
 * UploadThumbnail Upload a thumbnail
 * The thumbnail is the poster that appears in the player window before video playback begins.
This endpoint allows you to upload an image for the thumbnail.
To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.
Note: There may be a short delay before the new thumbnail is delivered to our CDN.
Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).

 * @param videoId Unique identifier of the chosen video
 * @return VideosApiUploadThumbnailRequest
*/

func (s *VideosService) UploadThumbnailFile(videoId string, file *os.File) (*Video, error) {
	return s.UploadThumbnailFileWithContext(context.Background(), videoId, file)
}

/*
 * UploadThumbnail Upload a thumbnail
 * The thumbnail is the poster that appears in the player window before video playback begins.
This endpoint allows you to upload an image for the thumbnail.
To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.
Note: There may be a short delay before the new thumbnail is delivered to our CDN.
Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId Unique identifier of the chosen video
 * @return VideosApiUploadThumbnailRequest
*/

func (s *VideosService) UploadThumbnailFileWithContext(ctx context.Context, videoId string, file *os.File) (*Video, error) {
	return s.UploadThumbnailWithContext(ctx, videoId, file.Name(), io.Reader(file))
}

/*
 * UploadThumbnail Upload a thumbnail
 * The thumbnail is the poster that appears in the player window before video playback begins.
This endpoint allows you to upload an image for the thumbnail.
To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.
Note: There may be a short delay before the new thumbnail is delivered to our CDN.
Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).

 * @param videoId Unique identifier of the chosen video
 * @return VideosApiUploadThumbnailRequest
*/
func (s *VideosService) UploadThumbnail(videoId string, fileName string, fileReader io.Reader) (*Video, error) {
	return s.UploadThumbnailWithContext(context.Background(), videoId, fileName, fileReader)
}

/*
 * UploadThumbnail Upload a thumbnail
 * The thumbnail is the poster that appears in the player window before video playback begins.
This endpoint allows you to upload an image for the thumbnail.
To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.
Note: There may be a short delay before the new thumbnail is delivered to our CDN.
Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId Unique identifier of the chosen video
 * @return VideosApiUploadThumbnailRequest
*/
func (s *VideosService) UploadThumbnailWithContext(ctx context.Context, videoId string, fileName string, fileReader io.Reader) (*Video, error) {
	localVarPath := "/videos/{videoId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Video)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
