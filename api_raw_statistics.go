/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type RawStatisticsApiListLiveStreamSessionsRequest struct {
	period      *string
	currentPage *int32
	pageSize    *int32
}

func (r RawStatisticsApiListLiveStreamSessionsRequest) Period(period string) RawStatisticsApiListLiveStreamSessionsRequest {
	r.period = &period
	return r
}
func (r RawStatisticsApiListLiveStreamSessionsRequest) CurrentPage(currentPage int32) RawStatisticsApiListLiveStreamSessionsRequest {
	r.currentPage = &currentPage
	return r
}
func (r RawStatisticsApiListLiveStreamSessionsRequest) PageSize(pageSize int32) RawStatisticsApiListLiveStreamSessionsRequest {
	r.pageSize = &pageSize
	return r
}

type RawStatisticsApiListSessionEventsRequest struct {
	currentPage *int32
	pageSize    *int32
}

func (r RawStatisticsApiListSessionEventsRequest) CurrentPage(currentPage int32) RawStatisticsApiListSessionEventsRequest {
	r.currentPage = &currentPage
	return r
}
func (r RawStatisticsApiListSessionEventsRequest) PageSize(pageSize int32) RawStatisticsApiListSessionEventsRequest {
	r.pageSize = &pageSize
	return r
}

type RawStatisticsApiListVideoSessionsRequest struct {
	period      *string
	metadata    *[]string
	currentPage *int32
	pageSize    *int32
}

func (r RawStatisticsApiListVideoSessionsRequest) Period(period string) RawStatisticsApiListVideoSessionsRequest {
	r.period = &period
	return r
}
func (r RawStatisticsApiListVideoSessionsRequest) Metadata(metadata []string) RawStatisticsApiListVideoSessionsRequest {
	r.metadata = &metadata
	return r
}
func (r RawStatisticsApiListVideoSessionsRequest) CurrentPage(currentPage int32) RawStatisticsApiListVideoSessionsRequest {
	r.currentPage = &currentPage
	return r
}
func (r RawStatisticsApiListVideoSessionsRequest) PageSize(pageSize int32) RawStatisticsApiListVideoSessionsRequest {
	r.pageSize = &pageSize
	return r
}

type RawStatisticsServiceI interface {
	/*
	 * ListLiveStreamSessions List live stream player sessions
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
	 * @return RawStatisticsApiListLiveStreamSessionsRequest
	 */

	ListLiveStreamSessions(liveStreamId string, r RawStatisticsApiListLiveStreamSessionsRequest) (*RawStatisticsListLiveStreamAnalyticsResponse, error)

	/*
	 * ListSessionEvents List player session events
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param sessionId A unique identifier you can use to reference and track a session with.
	 * @return RawStatisticsApiListSessionEventsRequest
	 */

	ListSessionEvents(sessionId string, r RawStatisticsApiListSessionEventsRequest) (*RawStatisticsListPlayerSessionEventsResponse, error)

	/*
	 * ListVideoSessions List video player sessions
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to retrieve session information for.
	 * @return RawStatisticsApiListVideoSessionsRequest
	 */

	ListVideoSessions(videoId string, r RawStatisticsApiListVideoSessionsRequest) (*RawStatisticsListSessionsResponse, error)
}

// RawStatisticsService communicating with the RawStatistics
// endpoints of the api.video API
type RawStatisticsService struct {
	client *Client
}

/*
 * ListLiveStreamSessions List live stream player sessions

 * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
 * @return RawStatisticsApiListLiveStreamSessionsRequest
 */

func (s *RawStatisticsService) ListLiveStreamSessions(liveStreamId string, r RawStatisticsApiListLiveStreamSessionsRequest) (*RawStatisticsListLiveStreamAnalyticsResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/analytics/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.period != nil {
		localVarQueryParams.Add("period", parameterToString(*r.period, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(RawStatisticsListLiveStreamAnalyticsResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * ListSessionEvents List player session events
 * Useful to track and measure video's engagement.

 * @param sessionId A unique identifier you can use to reference and track a session with.
 * @return RawStatisticsApiListSessionEventsRequest
 */

func (s *RawStatisticsService) ListSessionEvents(sessionId string, r RawStatisticsApiListSessionEventsRequest) (*RawStatisticsListPlayerSessionEventsResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/analytics/sessions/{sessionId}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionId"+"}", url.PathEscape(parameterToString(sessionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(RawStatisticsListPlayerSessionEventsResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * ListVideoSessions List video player sessions
 * Retrieve all available user sessions for a specific video.

 * @param videoId The unique identifier for the video you want to retrieve session information for.
 * @return RawStatisticsApiListVideoSessionsRequest
 */

func (s *RawStatisticsService) ListVideoSessions(videoId string, r RawStatisticsApiListVideoSessionsRequest) (*RawStatisticsListSessionsResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/analytics/videos/{videoId}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.period != nil {
		localVarQueryParams.Add("period", parameterToString(*r.period, ""))
	}
	if r.metadata != nil {
		t := *r.metadata
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("metadata", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("metadata", parameterToString(t, "multi"))
		}
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(RawStatisticsListSessionsResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
