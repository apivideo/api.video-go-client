/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
//"encoding/json"
)

// FilterBy1 struct for FilterBy1
type FilterBy1 struct {
	// Returns analytics based on the unique identifiers of a video or a live stream.
	MediaId   *[]string `json:"mediaId,omitempty"`
	MediaType *string   `json:"mediaType,omitempty"`
	// Returns analytics based on the viewers' continent. The list of supported continents names are based on the [GeoNames public database](https://www.geonames.org/countries/). You must use the ISO-3166 alpha2 format, for example `EU`.
	Continent *[]string `json:"continent,omitempty"`
	// Returns analytics based on the viewers' country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/). You must use the ISO-3166 alpha2 format, for example `FR`.
	Country *[]string `json:"country,omitempty"`
	// Returns analytics based on the type of device used by the viewers. Response values can include: `computer`, `phone`, `tablet`, `tv`, `console`, `wearable`, `unknown`.
	DeviceType *[]string `json:"deviceType,omitempty"`
	// Returns analytics based on the operating system used by the viewers. Response values can include `windows`, `mac osx`, `android`, `ios`, `linux`.
	OperatingSystem *[]string `json:"operatingSystem,omitempty"`
	// Returns analytics based on the browser used by the viewers. Response values can include `chrome`, `firefox`, `edge`, `opera`.
	Browser *[]string `json:"browser,omitempty"`
	// Returns analytics for videos using this tag. This filter only accepts a single value and is case sensitive. Read more about tagging your videos [here](https://docs.api.video/vod/tags-metadata).
	Tag *string `json:"tag,omitempty"`
}

// NewFilterBy1 instantiates a new FilterBy1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterBy1() *FilterBy1 {
	this := FilterBy1{}
	return &this
}

// NewFilterBy1WithDefaults instantiates a new FilterBy1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterBy1WithDefaults() *FilterBy1 {
	this := FilterBy1{}
	return &this
}

// GetMediaId returns the MediaId field value if set, zero value otherwise.
func (o *FilterBy1) GetMediaId() []string {
	if o == nil || o.MediaId == nil {
		var ret []string
		return ret
	}
	return *o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetMediaIdOk() (*[]string, bool) {
	if o == nil || o.MediaId == nil {
		return nil, false
	}
	return o.MediaId, true
}

// HasMediaId returns a boolean if a field has been set.
func (o *FilterBy1) HasMediaId() bool {
	if o != nil && o.MediaId != nil {
		return true
	}

	return false
}

// SetMediaId gets a reference to the given []string and assigns it to the MediaId field.
func (o *FilterBy1) SetMediaId(v []string) {
	o.MediaId = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *FilterBy1) GetMediaType() string {
	if o == nil || o.MediaType == nil {
		var ret string
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetMediaTypeOk() (*string, bool) {
	if o == nil || o.MediaType == nil {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *FilterBy1) HasMediaType() bool {
	if o != nil && o.MediaType != nil {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given string and assigns it to the MediaType field.
func (o *FilterBy1) SetMediaType(v string) {
	o.MediaType = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *FilterBy1) GetContinent() []string {
	if o == nil || o.Continent == nil {
		var ret []string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetContinentOk() (*[]string, bool) {
	if o == nil || o.Continent == nil {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *FilterBy1) HasContinent() bool {
	if o != nil && o.Continent != nil {
		return true
	}

	return false
}

// SetContinent gets a reference to the given []string and assigns it to the Continent field.
func (o *FilterBy1) SetContinent(v []string) {
	o.Continent = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FilterBy1) GetCountry() []string {
	if o == nil || o.Country == nil {
		var ret []string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetCountryOk() (*[]string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FilterBy1) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *FilterBy1) SetCountry(v []string) {
	o.Country = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *FilterBy1) GetDeviceType() []string {
	if o == nil || o.DeviceType == nil {
		var ret []string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetDeviceTypeOk() (*[]string, bool) {
	if o == nil || o.DeviceType == nil {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *FilterBy1) HasDeviceType() bool {
	if o != nil && o.DeviceType != nil {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given []string and assigns it to the DeviceType field.
func (o *FilterBy1) SetDeviceType(v []string) {
	o.DeviceType = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *FilterBy1) GetOperatingSystem() []string {
	if o == nil || o.OperatingSystem == nil {
		var ret []string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetOperatingSystemOk() (*[]string, bool) {
	if o == nil || o.OperatingSystem == nil {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *FilterBy1) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem != nil {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given []string and assigns it to the OperatingSystem field.
func (o *FilterBy1) SetOperatingSystem(v []string) {
	o.OperatingSystem = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *FilterBy1) GetBrowser() []string {
	if o == nil || o.Browser == nil {
		var ret []string
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetBrowserOk() (*[]string, bool) {
	if o == nil || o.Browser == nil {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *FilterBy1) HasBrowser() bool {
	if o != nil && o.Browser != nil {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given []string and assigns it to the Browser field.
func (o *FilterBy1) SetBrowser(v []string) {
	o.Browser = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *FilterBy1) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBy1) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *FilterBy1) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *FilterBy1) SetTag(v string) {
	o.Tag = &v
}

type NullableFilterBy1 struct {
	value *FilterBy1
	isSet bool
}

func (v NullableFilterBy1) Get() *FilterBy1 {
	return v.value
}

func (v *NullableFilterBy1) Set(val *FilterBy1) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterBy1) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterBy1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterBy1(val *FilterBy1) *NullableFilterBy1 {
	return &NullableFilterBy1{value: val, isSet: true}
}
