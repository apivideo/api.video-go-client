/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type VideosDelegatedUploadApiListTokensRequest struct {
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r VideosDelegatedUploadApiListTokensRequest) SortBy(sortBy string) VideosDelegatedUploadApiListTokensRequest {
	r.sortBy = &sortBy
	return r
}
func (r VideosDelegatedUploadApiListTokensRequest) SortOrder(sortOrder string) VideosDelegatedUploadApiListTokensRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r VideosDelegatedUploadApiListTokensRequest) CurrentPage(currentPage int32) VideosDelegatedUploadApiListTokensRequest {
	r.currentPage = &currentPage
	return r
}
func (r VideosDelegatedUploadApiListTokensRequest) PageSize(pageSize int32) VideosDelegatedUploadApiListTokensRequest {
	r.pageSize = &pageSize
	return r
}

type VideosDelegatedUploadServiceI interface {
	/*
	 * DeleteToken Delete an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
	 * @return VideosDelegatedUploadApiDeleteTokenRequest
	 */

	DeleteToken(uploadToken string) error
	/*
	 * ListTokens List all active upload tokens.
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosDelegatedUploadApiListTokensRequest
	 */

	ListTokens(r VideosDelegatedUploadApiListTokensRequest) (*TokenListResponse, error)

	/*
	 * GetToken Show upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param uploadToken The unique identifier for the token you want information about.
	 * @return VideosDelegatedUploadApiGetTokenRequest
	 */

	GetToken(uploadToken string) (*UploadToken, error)
	/*
	 * Upload Upload with an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosDelegatedUploadApiUploadRequest
	 */
	Upload(token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error)

	/*
	 * Upload Upload with an upload token

	 * @return VideosDelegatedUploadApiUploadRequest
	 */
	UploadFile(token string, file *os.File) (*Video, error)
	/*
	 * CreateToken Generate an upload token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return VideosDelegatedUploadApiCreateTokenRequest
	 */

	CreateToken(tokenCreatePayload TokenCreatePayload) (*UploadToken, error)
}

// VideosDelegatedUploadService communicating with the VideosDelegatedUpload
// endpoints of the api.video API
type VideosDelegatedUploadService struct {
	client *Client
}

/*
 * DeleteToken Delete an upload token
 * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.

 * @param uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
 * @return VideosDelegatedUploadApiDeleteTokenRequest
 */

func (s *VideosDelegatedUploadService) DeleteToken(uploadToken string) error {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens/{uploadToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"uploadToken"+"}", url.PathEscape(parameterToString(uploadToken, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * ListTokens List all active upload tokens.
 * A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.

 * @return VideosDelegatedUploadApiListTokensRequest
 */

func (s *VideosDelegatedUploadService) ListTokens(r VideosDelegatedUploadApiListTokensRequest) (*TokenListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(TokenListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetToken Show upload token
 * You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.

 * @param uploadToken The unique identifier for the token you want information about.
 * @return VideosDelegatedUploadApiGetTokenRequest
 */

func (s *VideosDelegatedUploadService) GetToken(uploadToken string) (*UploadToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens/{uploadToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"uploadToken"+"}", url.PathEscape(parameterToString(uploadToken, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(UploadToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Upload Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.

 * @return VideosDelegatedUploadApiUploadRequest
*/

func (s *VideosDelegatedUploadService) UploadFile(token string, file *os.File) (*Video, error) {
	fileInfo, _ := file.Stat()
	fileSize := fileInfo.Size()

	return s.Upload(token, file.Name(), io.Reader(file), fileSize)
}

/*
 * Upload Upload with an upload token
 * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.

Example with cURL:

```curl
$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'
 --header 'content-type: multipart/form-data'
 -F file=@video.mp4
```

Or in an HTML form, with a little JavaScript to convert the form into JSON:
```html
<!--form for user interaction-->
<form name="videoUploadForm" >
  <label for=video>Video:</label>
  <input type=file name=source/><br/>
  <input value="Submit" type="submit">
</form>
<div></div>
<!--JS takes the form data
    uses FormData to turn the response into JSON.
    then uses POST to upload the video file.
    Update the token parameter in the url to your upload token.
    -->
<script>
   var form = document.forms.namedItem("videoUploadForm");
   form.addEventListener('submit', function(ev) {
	 ev.preventDefault();
     var oOutput = document.querySelector("div"),
         oData = new FormData(form);
     var oReq = new XMLHttpRequest();

     oReq.open("POST", "https://ws.api.video/upload?token=toXXX", true);
     oReq.send(oData);
	 oReq.onload = function(oEvent) {
       if (oReq.status ==201) {
         oOutput.innerHTML = "Your video is uploaded!<br/>"  + oReq.response;
       } else {
         oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
       }
     };
   }, false);
</script>
```


### Dealing with large files

We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.

 * @return VideosDelegatedUploadApiUploadRequest
*/
func (s *VideosDelegatedUploadService) Upload(token string, fileName string, fileReader io.Reader, fileSize int64) (*Video, error) {
	localVarPath := "/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	requests, err := s.client.prepareRangeRequests(localVarPath, fileName, fileReader, fileSize, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Video)
	for _, req := range requests {
		_, err = s.client.do(req, res)

		if err != nil {
			return nil, err
		}
	}

	return res, nil

}

/*
 * CreateToken Generate an upload token
 * Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe.

 * @return VideosDelegatedUploadApiCreateTokenRequest
 */

func (s *VideosDelegatedUploadService) CreateToken(tokenCreatePayload TokenCreatePayload) (*UploadToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/upload-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = tokenCreatePayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(UploadToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
