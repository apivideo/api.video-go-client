/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
//"encoding/json"
)

// LiveStreamUpdatePayload struct for LiveStreamUpdatePayload
type LiveStreamUpdatePayload struct {
	// The name you want to use for your live stream.
	Name *string `json:"name,omitempty"`
	// BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
	Public *bool `json:"public,omitempty"`
	// Use this to indicate whether you want the recording on or off. On is true, off is false.
	Record *bool `json:"record,omitempty"`
	// The unique ID for the player associated with a live stream that you want to update.
	PlayerId *string `json:"playerId,omitempty"`
}

// NewLiveStreamUpdatePayload instantiates a new LiveStreamUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveStreamUpdatePayload() *LiveStreamUpdatePayload {
	this := LiveStreamUpdatePayload{}
	return &this
}

// NewLiveStreamUpdatePayloadWithDefaults instantiates a new LiveStreamUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveStreamUpdatePayloadWithDefaults() *LiveStreamUpdatePayload {
	this := LiveStreamUpdatePayload{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LiveStreamUpdatePayload) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamUpdatePayload) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LiveStreamUpdatePayload) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LiveStreamUpdatePayload) SetName(v string) {
	o.Name = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *LiveStreamUpdatePayload) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamUpdatePayload) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *LiveStreamUpdatePayload) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *LiveStreamUpdatePayload) SetPublic(v bool) {
	o.Public = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *LiveStreamUpdatePayload) GetRecord() bool {
	if o == nil || o.Record == nil {
		var ret bool
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamUpdatePayload) GetRecordOk() (*bool, bool) {
	if o == nil || o.Record == nil {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *LiveStreamUpdatePayload) HasRecord() bool {
	if o != nil && o.Record != nil {
		return true
	}

	return false
}

// SetRecord gets a reference to the given bool and assigns it to the Record field.
func (o *LiveStreamUpdatePayload) SetRecord(v bool) {
	o.Record = &v
}

// GetPlayerId returns the PlayerId field value if set, zero value otherwise.
func (o *LiveStreamUpdatePayload) GetPlayerId() string {
	if o == nil || o.PlayerId == nil {
		var ret string
		return ret
	}
	return *o.PlayerId
}

// GetPlayerIdOk returns a tuple with the PlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamUpdatePayload) GetPlayerIdOk() (*string, bool) {
	if o == nil || o.PlayerId == nil {
		return nil, false
	}
	return o.PlayerId, true
}

// HasPlayerId returns a boolean if a field has been set.
func (o *LiveStreamUpdatePayload) HasPlayerId() bool {
	if o != nil && o.PlayerId != nil {
		return true
	}

	return false
}

// SetPlayerId gets a reference to the given string and assigns it to the PlayerId field.
func (o *LiveStreamUpdatePayload) SetPlayerId(v string) {
	o.PlayerId = &v
}

type NullableLiveStreamUpdatePayload struct {
	value *LiveStreamUpdatePayload
	isSet bool
}

func (v NullableLiveStreamUpdatePayload) Get() *LiveStreamUpdatePayload {
	return v.value
}

func (v *NullableLiveStreamUpdatePayload) Set(val *LiveStreamUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveStreamUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveStreamUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveStreamUpdatePayload(val *LiveStreamUpdatePayload) *NullableLiveStreamUpdatePayload {
	return &NullableLiveStreamUpdatePayload{value: val, isSet: true}
}
