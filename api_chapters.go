/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ChaptersApiListRequest struct {
	currentPage *int32
	pageSize    *int32
}

func (r ChaptersApiListRequest) CurrentPage(currentPage int32) ChaptersApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r ChaptersApiListRequest) PageSize(pageSize int32) ChaptersApiListRequest {
	r.pageSize = &pageSize
	return r
}

type ChaptersServiceI interface {
	/*
	 * Upload Upload a chapter
	 * @param videoId The unique identifier for the video you want to upload a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiUploadRequest
	 */
	Upload(videoId string, language string, fileName string, fileReader io.Reader) (*Chapter, error)
	/*
	 * Upload Upload a chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to upload a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiUploadRequest
	 */
	UploadWithContext(ctx context.Context, videoId string, language string, fileName string, fileReader io.Reader) (*Chapter, error)

	/*
	 * Upload Upload a chapter
	 * @param videoId The unique identifier for the video you want to upload a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiUploadRequest
	 */
	UploadFile(videoId string, language string, file *os.File) (*Chapter, error)

	/*
	 * Upload Upload a chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to upload a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiUploadRequest
	 */
	UploadFileWithContext(ctx context.Context, videoId string, language string, file *os.File) (*Chapter, error)

	/*
	 * Get Retrieve a chapter
	 * @param videoId The unique identifier for the video you want to show a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiGetRequest
	 */

	Get(videoId string, language string) (*Chapter, error)

	/*
	 * Get Retrieve a chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to show a chapter for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiGetRequest
	 */

	GetWithContext(ctx context.Context, videoId string, language string) (*Chapter, error)

	/*
	 * Delete Delete a chapter
	 * @param videoId The unique identifier for the video you want to delete a chapter from.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiDeleteRequest
	 */

	Delete(videoId string, language string) error

	/*
	 * Delete Delete a chapter
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to delete a chapter from.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return ChaptersApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, videoId string, language string) error

	/*
	 * List List video chapters
	 * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
	 * @return ChaptersApiListRequest
	 */

	List(videoId string, r ChaptersApiListRequest) (*ChaptersListResponse, error)

	/*
	 * List List video chapters
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
	 * @return ChaptersApiListRequest
	 */

	ListWithContext(ctx context.Context, videoId string, r ChaptersApiListRequest) (*ChaptersListResponse, error)
}

// ChaptersService communicating with the Chapters
// endpoints of the api.video API
type ChaptersService struct {
	client *Client
}

/*
 * Upload Upload a chapter
 * Upload a VTT file to add chapters to your video.

Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.

 * @param videoId The unique identifier for the video you want to upload a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiUploadRequest
*/

func (s *ChaptersService) UploadFile(videoId string, language string, file *os.File) (*Chapter, error) {
	return s.UploadFileWithContext(context.Background(), videoId, language, file)
}

/*
 * Upload Upload a chapter
 * Upload a VTT file to add chapters to your video.

Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to upload a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiUploadRequest
*/

func (s *ChaptersService) UploadFileWithContext(ctx context.Context, videoId string, language string, file *os.File) (*Chapter, error) {
	return s.UploadWithContext(ctx, videoId, language, file.Name(), io.Reader(file))
}

/*
 * Upload Upload a chapter
 * Upload a VTT file to add chapters to your video.

Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.

 * @param videoId The unique identifier for the video you want to upload a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiUploadRequest
*/
func (s *ChaptersService) Upload(videoId string, language string, fileName string, fileReader io.Reader) (*Chapter, error) {
	return s.UploadWithContext(context.Background(), videoId, language, fileName, fileReader)
}

/*
 * Upload Upload a chapter
 * Upload a VTT file to add chapters to your video.

Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to upload a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiUploadRequest
*/
func (s *ChaptersService) UploadWithContext(ctx context.Context, videoId string, language string, fileName string, fileReader io.Reader) (*Chapter, error) {
	localVarPath := "/videos/{videoId}/chapters/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Chapter)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Retrieve a chapter
 * Retrieve a chapter for a video in a specific language.

Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).

 * @param videoId The unique identifier for the video you want to show a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiGetRequest
*/

func (s *ChaptersService) Get(videoId string, language string) (*Chapter, error) {

	return s.GetWithContext(context.Background(), videoId, language)

}

/*
 * Get Retrieve a chapter
 * Retrieve a chapter for a video in a specific language.

Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to show a chapter for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiGetRequest
*/

func (s *ChaptersService) GetWithContext(ctx context.Context, videoId string, language string) (*Chapter, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/chapters/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Chapter)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete a chapter
 * Delete a chapter in a specific language by providing the video ID for the video you want to delete the chapter from and the language the chapter is in.

 * @param videoId The unique identifier for the video you want to delete a chapter from.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiDeleteRequest
 */

func (s *ChaptersService) Delete(videoId string, language string) error {

	return s.DeleteWithContext(context.Background(), videoId, language)

}

/*
 * Delete Delete a chapter
 * Delete a chapter in a specific language by providing the video ID for the video you want to delete the chapter from and the language the chapter is in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to delete a chapter from.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return ChaptersApiDeleteRequest
 */

func (s *ChaptersService) DeleteWithContext(ctx context.Context, videoId string, language string) error {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/chapters/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List video chapters
 * Retrieve a list of all chapters for a specified video.

 * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
 * @return ChaptersApiListRequest
 */

func (s *ChaptersService) List(videoId string, r ChaptersApiListRequest) (*ChaptersListResponse, error) {

	return s.ListWithContext(context.Background(), videoId, r)

}

/*
 * List List video chapters
 * Retrieve a list of all chapters for a specified video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
 * @return ChaptersApiListRequest
 */

func (s *ChaptersService) ListWithContext(ctx context.Context, videoId string, r ChaptersApiListRequest) (*ChaptersListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/chapters"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(ChaptersListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
