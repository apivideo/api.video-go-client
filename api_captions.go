/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type CaptionsApiListRequest struct {
	currentPage *int32
	pageSize    *int32
}

func (r CaptionsApiListRequest) CurrentPage(currentPage int32) CaptionsApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r CaptionsApiListRequest) PageSize(pageSize int32) CaptionsApiListRequest {
	r.pageSize = &pageSize
	return r
}

type CaptionsServiceI interface {
	/*
	 * Upload Upload a caption
	 * @param videoId The unique identifier for the video you want to add a caption to.
	 * @param language A valid BCP 47 language representation.
	 * @return CaptionsApiUploadRequest
	 */
	Upload(videoId string, language string, fileName string, fileReader io.Reader) (*Caption, error)
	/*
	 * Upload Upload a caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to add a caption to.
	 * @param language A valid BCP 47 language representation.
	 * @return CaptionsApiUploadRequest
	 */
	UploadWithContext(ctx context.Context, videoId string, language string, fileName string, fileReader io.Reader) (*Caption, error)

	/*
	 * Upload Upload a caption
	 * @param videoId The unique identifier for the video you want to add a caption to.
	 * @param language A valid BCP 47 language representation.
	 * @return CaptionsApiUploadRequest
	 */
	UploadFile(videoId string, language string, file *os.File) (*Caption, error)

	/*
	 * Upload Upload a caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to add a caption to.
	 * @param language A valid BCP 47 language representation.
	 * @return CaptionsApiUploadRequest
	 */
	UploadFileWithContext(ctx context.Context, videoId string, language string, file *os.File) (*Caption, error)

	/*
	 * Get Retrieve a caption
	 * @param videoId The unique identifier for the video you want captions for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
	 * @return CaptionsApiGetRequest
	 */

	Get(videoId string, language string) (*Caption, error)

	/*
	 * Get Retrieve a caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want captions for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
	 * @return CaptionsApiGetRequest
	 */

	GetWithContext(ctx context.Context, videoId string, language string) (*Caption, error)

	/*
	 * Update Update a caption
	 * @param videoId The unique identifier for the video you want to have automatic captions for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return CaptionsApiUpdateRequest
	 */

	Update(videoId string, language string, captionsUpdatePayload CaptionsUpdatePayload) (*Caption, error)

	/*
	 * Update Update a caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to have automatic captions for.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return CaptionsApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, videoId string, language string, captionsUpdatePayload CaptionsUpdatePayload) (*Caption, error)

	/*
	 * Delete Delete a caption
	 * @param videoId The unique identifier for the video you want to delete a caption from.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return CaptionsApiDeleteRequest
	 */

	Delete(videoId string, language string) error

	/*
	 * Delete Delete a caption
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to delete a caption from.
	 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
	 * @return CaptionsApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, videoId string, language string) error

	/*
	 * List List video captions
	 * @param videoId The unique identifier for the video you want to retrieve a list of captions for.
	 * @return CaptionsApiListRequest
	 */

	List(videoId string, r CaptionsApiListRequest) (*CaptionsListResponse, error)

	/*
	 * List List video captions
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param videoId The unique identifier for the video you want to retrieve a list of captions for.
	 * @return CaptionsApiListRequest
	 */

	ListWithContext(ctx context.Context, videoId string, r CaptionsApiListRequest) (*CaptionsListResponse, error)
}

// CaptionsService communicating with the Captions
// endpoints of the api.video API
type CaptionsService struct {
	client *Client
}

/*
 * Upload Upload a caption
 * Upload a VTT file to add captions to your video.

 Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.

 * @param videoId The unique identifier for the video you want to add a caption to.
 * @param language A valid BCP 47 language representation.
 * @return CaptionsApiUploadRequest
*/

func (s *CaptionsService) UploadFile(videoId string, language string, file *os.File) (*Caption, error) {
	return s.UploadFileWithContext(context.Background(), videoId, language, file)
}

/*
 * Upload Upload a caption
 * Upload a VTT file to add captions to your video.

 Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to add a caption to.
 * @param language A valid BCP 47 language representation.
 * @return CaptionsApiUploadRequest
*/

func (s *CaptionsService) UploadFileWithContext(ctx context.Context, videoId string, language string, file *os.File) (*Caption, error) {
	return s.UploadWithContext(ctx, videoId, language, file.Name(), io.Reader(file))
}

/*
* Upload Upload a caption
* Upload a VTT file to add captions to your video.

Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.

* @param videoId The unique identifier for the video you want to add a caption to.
* @param language A valid BCP 47 language representation.
* @return CaptionsApiUploadRequest
*/
func (s *CaptionsService) Upload(videoId string, language string, fileName string, fileReader io.Reader) (*Caption, error) {
	return s.UploadWithContext(context.Background(), videoId, language, fileName, fileReader)
}

/*
* Upload Upload a caption
* Upload a VTT file to add captions to your video.

Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.
* @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
* @param videoId The unique identifier for the video you want to add a caption to.
* @param language A valid BCP 47 language representation.
* @return CaptionsApiUploadRequest
*/
func (s *CaptionsService) UploadWithContext(ctx context.Context, videoId string, language string, fileName string, fileReader io.Reader) (*Caption, error) {
	localVarPath := "/videos/{videoId}/captions/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Caption)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Retrieve a caption
 * Retrieve a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a error indicating the caption was not found.

Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).

 * @param videoId The unique identifier for the video you want captions for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
 * @return CaptionsApiGetRequest
*/

func (s *CaptionsService) Get(videoId string, language string) (*Caption, error) {

	return s.GetWithContext(context.Background(), videoId, language)

}

/*
 * Get Retrieve a caption
 * Retrieve a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a error indicating the caption was not found.

Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want captions for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
 * @return CaptionsApiGetRequest
*/

func (s *CaptionsService) GetWithContext(ctx context.Context, videoId string, language string) (*Caption, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/captions/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Caption)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a caption
 * To have the captions on automatically, use this method to set default: true.

 * @param videoId The unique identifier for the video you want to have automatic captions for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return CaptionsApiUpdateRequest
 */

func (s *CaptionsService) Update(videoId string, language string, captionsUpdatePayload CaptionsUpdatePayload) (*Caption, error) {

	return s.UpdateWithContext(context.Background(), videoId, language, captionsUpdatePayload)

}

/*
 * Update Update a caption
 * To have the captions on automatically, use this method to set default: true.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to have automatic captions for.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return CaptionsApiUpdateRequest
 */

func (s *CaptionsService) UpdateWithContext(ctx context.Context, videoId string, language string, captionsUpdatePayload CaptionsUpdatePayload) (*Caption, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/captions/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = captionsUpdatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Caption)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete a caption
 * Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.

 * @param videoId The unique identifier for the video you want to delete a caption from.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return CaptionsApiDeleteRequest
 */

func (s *CaptionsService) Delete(videoId string, language string) error {

	return s.DeleteWithContext(context.Background(), videoId, language)

}

/*
 * Delete Delete a caption
 * Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to delete a caption from.
 * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
 * @return CaptionsApiDeleteRequest
 */

func (s *CaptionsService) DeleteWithContext(ctx context.Context, videoId string, language string) error {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/captions/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterToString(language, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List video captions
 * Retrieve a list of available captions for the videoId you provide.

 * @param videoId The unique identifier for the video you want to retrieve a list of captions for.
 * @return CaptionsApiListRequest
 */

func (s *CaptionsService) List(videoId string, r CaptionsApiListRequest) (*CaptionsListResponse, error) {

	return s.ListWithContext(context.Background(), videoId, r)

}

/*
 * List List video captions
 * Retrieve a list of available captions for the videoId you provide.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId The unique identifier for the video you want to retrieve a list of captions for.
 * @return CaptionsApiListRequest
 */

func (s *CaptionsService) ListWithContext(ctx context.Context, videoId string, r CaptionsApiListRequest) (*CaptionsListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/videos/{videoId}/captions"
	localVarPath = strings.Replace(localVarPath, "{"+"videoId"+"}", url.PathEscape(parameterToString(videoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(CaptionsListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
