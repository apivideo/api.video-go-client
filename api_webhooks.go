/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type WebhooksApiListRequest struct {
	events      *string
	currentPage *int32
	pageSize    *int32
}

func (r WebhooksApiListRequest) Events(events string) WebhooksApiListRequest {
	r.events = &events
	return r
}
func (r WebhooksApiListRequest) CurrentPage(currentPage int32) WebhooksApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r WebhooksApiListRequest) PageSize(pageSize int32) WebhooksApiListRequest {
	r.pageSize = &pageSize
	return r
}

type WebhooksServiceI interface {
	/*
	 * Delete Delete a Webhook
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param webhookId The webhook you wish to delete.
	 * @return WebhooksApiDeleteRequest
	 */

	Delete(webhookId string) error
	/*
	 * Get Show Webhook details
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param webhookId The unique webhook you wish to retreive details on.
	 * @return WebhooksApiGetRequest
	 */

	Get(webhookId string) (*Webhook, error)
	/*
	 * List List all webhooks
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return WebhooksApiListRequest
	 */

	List(r WebhooksApiListRequest) (*WebhooksListResponse, error)

	/*
	 * Create Create Webhook
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return WebhooksApiCreateRequest
	 */

	Create(webhooksCreatePayload WebhooksCreatePayload) (*Webhook, error)
}

// WebhooksService communicating with the Webhooks
// endpoints of the api.video API
type WebhooksService struct {
	client *Client
}

/*
 * Delete Delete a Webhook
 * This endpoint will delete the indicated webhook.

 * @param webhookId The webhook you wish to delete.
 * @return WebhooksApiDeleteRequest
 */

func (s *WebhooksService) Delete(webhookId string) error {
	var localVarPostBody interface{}

	localVarPath := "/webhooks/{webhookId}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookId"+"}", url.PathEscape(parameterToString(webhookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * Get Show Webhook details
 * This call provides the same JSON information provided on Webjhook creation.

 * @param webhookId The unique webhook you wish to retreive details on.
 * @return WebhooksApiGetRequest
 */

func (s *WebhooksService) Get(webhookId string) (*Webhook, error) {
	var localVarPostBody interface{}

	localVarPath := "/webhooks/{webhookId}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookId"+"}", url.PathEscape(parameterToString(webhookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Webhook)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * List List all webhooks
 * Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.

 * @return WebhooksApiListRequest
 */

func (s *WebhooksService) List(r WebhooksApiListRequest) (*WebhooksListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/webhooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.events != nil {
		localVarQueryParams.Add("events", parameterToString(*r.events, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(WebhooksListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Create Create Webhook
 * Webhooks can push notifications to your server, rather than polling api.video for changes

 * @return WebhooksApiCreateRequest
 */

func (s *WebhooksService) Create(webhooksCreatePayload WebhooksCreatePayload) (*Webhook, error) {
	var localVarPostBody interface{}

	localVarPath := "/webhooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = webhooksCreatePayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Webhook)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
