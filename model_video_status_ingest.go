/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
//"encoding/json"
)

// VideoStatusIngest Details about the capturing, transferring, and storing of your video for use immediately or in the future.
type VideoStatusIngest struct {
	// There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.
	Status *string `json:"status,omitempty"`
	// The size of your file in bytes.
	Filesize *int32 `json:"filesize,omitempty"`
	// The total number of bytes received, listed for each chunk of the upload.
	ReceivedBytes *[]BytesRange `json:"receivedBytes,omitempty"`
}

// NewVideoStatusIngest instantiates a new VideoStatusIngest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoStatusIngest() *VideoStatusIngest {
	this := VideoStatusIngest{}
	return &this
}

// NewVideoStatusIngestWithDefaults instantiates a new VideoStatusIngest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoStatusIngestWithDefaults() *VideoStatusIngest {
	this := VideoStatusIngest{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VideoStatusIngest) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoStatusIngest) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VideoStatusIngest) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VideoStatusIngest) SetStatus(v string) {
	o.Status = &v
}

// GetFilesize returns the Filesize field value if set, zero value otherwise.
func (o *VideoStatusIngest) GetFilesize() int32 {
	if o == nil || o.Filesize == nil {
		var ret int32
		return ret
	}
	return *o.Filesize
}

// GetFilesizeOk returns a tuple with the Filesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoStatusIngest) GetFilesizeOk() (*int32, bool) {
	if o == nil || o.Filesize == nil {
		return nil, false
	}
	return o.Filesize, true
}

// HasFilesize returns a boolean if a field has been set.
func (o *VideoStatusIngest) HasFilesize() bool {
	if o != nil && o.Filesize != nil {
		return true
	}

	return false
}

// SetFilesize gets a reference to the given int32 and assigns it to the Filesize field.
func (o *VideoStatusIngest) SetFilesize(v int32) {
	o.Filesize = &v
}

// GetReceivedBytes returns the ReceivedBytes field value if set, zero value otherwise.
func (o *VideoStatusIngest) GetReceivedBytes() []BytesRange {
	if o == nil || o.ReceivedBytes == nil {
		var ret []BytesRange
		return ret
	}
	return *o.ReceivedBytes
}

// GetReceivedBytesOk returns a tuple with the ReceivedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoStatusIngest) GetReceivedBytesOk() (*[]BytesRange, bool) {
	if o == nil || o.ReceivedBytes == nil {
		return nil, false
	}
	return o.ReceivedBytes, true
}

// HasReceivedBytes returns a boolean if a field has been set.
func (o *VideoStatusIngest) HasReceivedBytes() bool {
	if o != nil && o.ReceivedBytes != nil {
		return true
	}

	return false
}

// SetReceivedBytes gets a reference to the given []BytesRange and assigns it to the ReceivedBytes field.
func (o *VideoStatusIngest) SetReceivedBytes(v []BytesRange) {
	o.ReceivedBytes = &v
}

type NullableVideoStatusIngest struct {
	value *VideoStatusIngest
	isSet bool
}

func (v NullableVideoStatusIngest) Get() *VideoStatusIngest {
	return v.value
}

func (v *NullableVideoStatusIngest) Set(val *VideoStatusIngest) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoStatusIngest) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoStatusIngest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoStatusIngest(val *VideoStatusIngest) *NullableVideoStatusIngest {
	return &NullableVideoStatusIngest{value: val, isSet: true}
}
