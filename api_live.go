/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type LiveApiListRequest struct {
	streamKey   *string
	name        *string
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r LiveApiListRequest) StreamKey(streamKey string) LiveApiListRequest {
	r.streamKey = &streamKey
	return r
}
func (r LiveApiListRequest) Name(name string) LiveApiListRequest {
	r.name = &name
	return r
}
func (r LiveApiListRequest) SortBy(sortBy string) LiveApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r LiveApiListRequest) SortOrder(sortOrder string) LiveApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r LiveApiListRequest) CurrentPage(currentPage int32) LiveApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r LiveApiListRequest) PageSize(pageSize int32) LiveApiListRequest {
	r.pageSize = &pageSize
	return r
}

type LiveServiceI interface {
	/*
	 * Delete Delete a live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream that you want to remove.
	 * @return LiveApiDeleteRequest
	 */

	Delete(liveStreamId string) error
	/*
	 * DeleteThumbnail Delete a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique identifier for the live stream you want to delete.
	 * @return LiveApiDeleteThumbnailRequest
	 */

	DeleteThumbnail(liveStreamId string) (*LiveStream, error)
	/*
	 * List List all live streams
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveApiListRequest
	 */

	List(r LiveApiListRequest) (*LiveStreamListResponse, error)

	/*
	 * Get Show live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream you want to watch.
	 * @return LiveApiGetRequest
	 */

	Get(liveStreamId string) (*LiveStream, error)
	/*
	 * Update Update a live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
	 * @return LiveApiUpdateRequest
	 */

	Update(liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error)
	/*
	 * Create Create live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveApiCreateRequest
	 */

	Create(liveStreamCreatePayload LiveStreamCreatePayload) (*LiveStream, error)
	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveApiUploadThumbnailRequest
	 */
	UploadThumbnail(liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveApiUploadThumbnailRequest
	 */
	UploadThumbnailFile(liveStreamId string, file *os.File) (*LiveStream, error)
}

// LiveService communicating with the Live
// endpoints of the api.video API
type LiveService struct {
	client *Client
}

/*
 * Delete Delete a live stream

 * @param liveStreamId The unique ID for the live stream that you want to remove.
 * @return LiveApiDeleteRequest
 */

func (s *LiveService) Delete(liveStreamId string) error {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * DeleteThumbnail Delete a thumbnail
 * Send the unique identifier for a live stream to delete it from the system.

 * @param liveStreamId The unique identifier for the live stream you want to delete.
 * @return LiveApiDeleteThumbnailRequest
 */

func (s *LiveService) DeleteThumbnail(liveStreamId string) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * List List all live streams
 * With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.

 * @return LiveApiListRequest
 */

func (s *LiveService) List(r LiveApiListRequest) (*LiveStreamListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.streamKey != nil {
		localVarQueryParams.Add("streamKey", parameterToString(*r.streamKey, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStreamListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Show live stream
 * Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream.

 * @param liveStreamId The unique ID for the live stream you want to watch.
 * @return LiveApiGetRequest
 */

func (s *LiveService) Get(liveStreamId string) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a live stream
 * Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.

 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
 * @return LiveApiUpdateRequest
 */

func (s *LiveService) Update(liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = liveStreamUpdatePayload

	req, err := s.client.prepareRequest(http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Create Create live stream
 * A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.
The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.

See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS.
Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}

 * @return LiveApiCreateRequest
*/

func (s *LiveService) Create(liveStreamCreatePayload LiveStreamCreatePayload) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = liveStreamCreatePayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadThumbnail Upload a thumbnail
 * Upload an image to use as a backdrop for your livestream.

 * @param liveStreamId The unique ID for the live stream you want to upload.
 * @return LiveApiUploadThumbnailRequest
 */

func (s *LiveService) UploadThumbnailFile(liveStreamId string, file *os.File) (*LiveStream, error) {
	return s.UploadThumbnail(liveStreamId, file.Name(), io.Reader(file))
}

/*
 * UploadThumbnail Upload a thumbnail
 * Upload an image to use as a backdrop for your livestream.

 * @param liveStreamId The unique ID for the live stream you want to upload.
 * @return LiveApiUploadThumbnailRequest
 */
func (s *LiveService) UploadThumbnail(liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error) {
	localVarPath := "/live-streams/{liveStreamId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
