/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type AnalyticsApiGetLiveStreamsPlaysRequest struct {
	from        *string
	dimension   *string
	to          *string
	filter      *string
	currentPage *int32
	pageSize    *int32
}

func (r AnalyticsApiGetLiveStreamsPlaysRequest) From(from string) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.from = &from
	return r
}
func (r AnalyticsApiGetLiveStreamsPlaysRequest) Dimension(dimension string) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.dimension = &dimension
	return r
}
func (r AnalyticsApiGetLiveStreamsPlaysRequest) To(to string) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.to = &to
	return r
}
func (r AnalyticsApiGetLiveStreamsPlaysRequest) Filter(filter string) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.filter = &filter
	return r
}
func (r AnalyticsApiGetLiveStreamsPlaysRequest) CurrentPage(currentPage int32) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.currentPage = &currentPage
	return r
}
func (r AnalyticsApiGetLiveStreamsPlaysRequest) PageSize(pageSize int32) AnalyticsApiGetLiveStreamsPlaysRequest {
	r.pageSize = &pageSize
	return r
}

type AnalyticsApiGetVideosPlaysRequest struct {
	from        *string
	dimension   *string
	to          *string
	filter      *string
	currentPage *int32
	pageSize    *int32
}

func (r AnalyticsApiGetVideosPlaysRequest) From(from string) AnalyticsApiGetVideosPlaysRequest {
	r.from = &from
	return r
}
func (r AnalyticsApiGetVideosPlaysRequest) Dimension(dimension string) AnalyticsApiGetVideosPlaysRequest {
	r.dimension = &dimension
	return r
}
func (r AnalyticsApiGetVideosPlaysRequest) To(to string) AnalyticsApiGetVideosPlaysRequest {
	r.to = &to
	return r
}
func (r AnalyticsApiGetVideosPlaysRequest) Filter(filter string) AnalyticsApiGetVideosPlaysRequest {
	r.filter = &filter
	return r
}
func (r AnalyticsApiGetVideosPlaysRequest) CurrentPage(currentPage int32) AnalyticsApiGetVideosPlaysRequest {
	r.currentPage = &currentPage
	return r
}
func (r AnalyticsApiGetVideosPlaysRequest) PageSize(pageSize int32) AnalyticsApiGetVideosPlaysRequest {
	r.pageSize = &pageSize
	return r
}

type AnalyticsServiceI interface {
	/*
	 * GetLiveStreamsPlays Get play events for live stream
	 * @return AnalyticsApiGetLiveStreamsPlaysRequest
	 */

	GetLiveStreamsPlays(r AnalyticsApiGetLiveStreamsPlaysRequest) (*AnalyticsPlaysResponse, error)

	/*
	 * GetLiveStreamsPlays Get play events for live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AnalyticsApiGetLiveStreamsPlaysRequest
	 */

	GetLiveStreamsPlaysWithContext(ctx context.Context, r AnalyticsApiGetLiveStreamsPlaysRequest) (*AnalyticsPlaysResponse, error)

	/*
	 * GetVideosPlays Get play events for video
	 * @return AnalyticsApiGetVideosPlaysRequest
	 */

	GetVideosPlays(r AnalyticsApiGetVideosPlaysRequest) (*AnalyticsPlaysResponse, error)

	/*
	 * GetVideosPlays Get play events for video
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AnalyticsApiGetVideosPlaysRequest
	 */

	GetVideosPlaysWithContext(ctx context.Context, r AnalyticsApiGetVideosPlaysRequest) (*AnalyticsPlaysResponse, error)
}

// AnalyticsService communicating with the Analytics
// endpoints of the api.video API
type AnalyticsService struct {
	client *Client
}

/*
 * GetLiveStreamsPlays Get play events for live stream
 * Retrieve filtered analytics about the number of plays for your live streams in a project.

 * @return AnalyticsApiGetLiveStreamsPlaysRequest
 */

func (s *AnalyticsService) GetLiveStreamsPlays(r AnalyticsApiGetLiveStreamsPlaysRequest) (*AnalyticsPlaysResponse, error) {

	return s.GetLiveStreamsPlaysWithContext(context.Background(), r)

}

/*
 * GetLiveStreamsPlays Get play events for live stream
 * Retrieve filtered analytics about the number of plays for your live streams in a project.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AnalyticsApiGetLiveStreamsPlaysRequest
 */

func (s *AnalyticsService) GetLiveStreamsPlaysWithContext(ctx context.Context, r AnalyticsApiGetLiveStreamsPlaysRequest) (*AnalyticsPlaysResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/analytics/live-streams/plays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	localVarQueryParams.Add("dimension", parameterToString(*r.dimension, ""))
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AnalyticsPlaysResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetVideosPlays Get play events for video
 * Retrieve filtered analytics about the number of plays for your videos in a project.

 * @return AnalyticsApiGetVideosPlaysRequest
 */

func (s *AnalyticsService) GetVideosPlays(r AnalyticsApiGetVideosPlaysRequest) (*AnalyticsPlaysResponse, error) {

	return s.GetVideosPlaysWithContext(context.Background(), r)

}

/*
 * GetVideosPlays Get play events for video
 * Retrieve filtered analytics about the number of plays for your videos in a project.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AnalyticsApiGetVideosPlaysRequest
 */

func (s *AnalyticsService) GetVideosPlaysWithContext(ctx context.Context, r AnalyticsApiGetVideosPlaysRequest) (*AnalyticsPlaysResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/analytics/videos/plays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	localVarQueryParams.Add("dimension", parameterToString(*r.dimension, ""))
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AnalyticsPlaysResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
