/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
//"encoding/json"
)

// PlayerSessionEvent struct for PlayerSessionEvent
type PlayerSessionEvent struct {
	// Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end
	Type *string `json:"type,omitempty"`
	// When an event occurred, presented in ATOM UTC format.
	EmittedAt *string `json:"emittedAt,omitempty"`
	At        *int32  `json:"at,omitempty"`
	From      *int32  `json:"from,omitempty"`
	To        *int32  `json:"to,omitempty"`
}

// NewPlayerSessionEvent instantiates a new PlayerSessionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerSessionEvent() *PlayerSessionEvent {
	this := PlayerSessionEvent{}
	return &this
}

// NewPlayerSessionEventWithDefaults instantiates a new PlayerSessionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerSessionEventWithDefaults() *PlayerSessionEvent {
	this := PlayerSessionEvent{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlayerSessionEvent) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSessionEvent) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlayerSessionEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlayerSessionEvent) SetType(v string) {
	o.Type = &v
}

// GetEmittedAt returns the EmittedAt field value if set, zero value otherwise.
func (o *PlayerSessionEvent) GetEmittedAt() string {
	if o == nil || o.EmittedAt == nil {
		var ret string
		return ret
	}
	return *o.EmittedAt
}

// GetEmittedAtOk returns a tuple with the EmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSessionEvent) GetEmittedAtOk() (*string, bool) {
	if o == nil || o.EmittedAt == nil {
		return nil, false
	}
	return o.EmittedAt, true
}

// HasEmittedAt returns a boolean if a field has been set.
func (o *PlayerSessionEvent) HasEmittedAt() bool {
	if o != nil && o.EmittedAt != nil {
		return true
	}

	return false
}

// SetEmittedAt gets a reference to the given string and assigns it to the EmittedAt field.
func (o *PlayerSessionEvent) SetEmittedAt(v string) {
	o.EmittedAt = &v
}

// GetAt returns the At field value if set, zero value otherwise.
func (o *PlayerSessionEvent) GetAt() int32 {
	if o == nil || o.At == nil {
		var ret int32
		return ret
	}
	return *o.At
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSessionEvent) GetAtOk() (*int32, bool) {
	if o == nil || o.At == nil {
		return nil, false
	}
	return o.At, true
}

// HasAt returns a boolean if a field has been set.
func (o *PlayerSessionEvent) HasAt() bool {
	if o != nil && o.At != nil {
		return true
	}

	return false
}

// SetAt gets a reference to the given int32 and assigns it to the At field.
func (o *PlayerSessionEvent) SetAt(v int32) {
	o.At = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *PlayerSessionEvent) GetFrom() int32 {
	if o == nil || o.From == nil {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSessionEvent) GetFromOk() (*int32, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *PlayerSessionEvent) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *PlayerSessionEvent) SetFrom(v int32) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *PlayerSessionEvent) GetTo() int32 {
	if o == nil || o.To == nil {
		var ret int32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSessionEvent) GetToOk() (*int32, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *PlayerSessionEvent) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given int32 and assigns it to the To field.
func (o *PlayerSessionEvent) SetTo(v int32) {
	o.To = &v
}

type NullablePlayerSessionEvent struct {
	value *PlayerSessionEvent
	isSet bool
}

func (v NullablePlayerSessionEvent) Get() *PlayerSessionEvent {
	return v.value
}

func (v *NullablePlayerSessionEvent) Set(val *PlayerSessionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerSessionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerSessionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerSessionEvent(val *PlayerSessionEvent) *NullablePlayerSessionEvent {
	return &NullablePlayerSessionEvent{value: val, isSet: true}
}
