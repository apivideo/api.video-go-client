/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type PlayerThemesApiListRequest struct {
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r PlayerThemesApiListRequest) SortBy(sortBy string) PlayerThemesApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r PlayerThemesApiListRequest) SortOrder(sortOrder string) PlayerThemesApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r PlayerThemesApiListRequest) CurrentPage(currentPage int32) PlayerThemesApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r PlayerThemesApiListRequest) PageSize(pageSize int32) PlayerThemesApiListRequest {
	r.pageSize = &pageSize
	return r
}

type PlayerThemesServiceI interface {
	/*
	 * Create Create a player
	 * @return PlayerThemesApiCreateRequest
	 */

	Create(playerThemeCreationPayload PlayerThemeCreationPayload) (*PlayerTheme, error)

	/*
	 * Create Create a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlayerThemesApiCreateRequest
	 */

	CreateWithContext(ctx context.Context, playerThemeCreationPayload PlayerThemeCreationPayload) (*PlayerTheme, error)

	/*
	 * Get Retrieve a player
	 * @param playerId The unique identifier for the player you want to retrieve.
	 * @return PlayerThemesApiGetRequest
	 */

	Get(playerId string) (*PlayerTheme, error)

	/*
	 * Get Retrieve a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player you want to retrieve.
	 * @return PlayerThemesApiGetRequest
	 */

	GetWithContext(ctx context.Context, playerId string) (*PlayerTheme, error)

	/*
	 * Update Update a player
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUpdateRequest
	 */

	Update(playerId string, playerThemeUpdatePayload PlayerThemeUpdatePayload) (*PlayerTheme, error)

	/*
	 * Update Update a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, playerId string, playerThemeUpdatePayload PlayerThemeUpdatePayload) (*PlayerTheme, error)

	/*
	 * Delete Delete a player
	 * @param playerId The unique identifier for the player you want to delete.
	 * @return PlayerThemesApiDeleteRequest
	 */

	Delete(playerId string) error

	/*
	 * Delete Delete a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player you want to delete.
	 * @return PlayerThemesApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, playerId string) error

	/*
	 * List List all player themes
	 * @return PlayerThemesApiListRequest
	 */

	List(r PlayerThemesApiListRequest) (*PlayerThemesListResponse, error)

	/*
	 * List List all player themes
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlayerThemesApiListRequest
	 */

	ListWithContext(ctx context.Context, r PlayerThemesApiListRequest) (*PlayerThemesListResponse, error)

	/*
	 * UploadLogo Upload a logo
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUploadLogoRequest
	 */
	UploadLogo(playerId string, link *string, fileName string, fileReader io.Reader) (*PlayerTheme, error)
	/*
	 * UploadLogo Upload a logo
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUploadLogoRequest
	 */
	UploadLogoWithContext(ctx context.Context, playerId string, link *string, fileName string, fileReader io.Reader) (*PlayerTheme, error)

	/*
	 * UploadLogo Upload a logo
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUploadLogoRequest
	 */
	UploadLogoFile(playerId string, file *os.File, link *string) (*PlayerTheme, error)

	/*
	 * UploadLogo Upload a logo
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiUploadLogoRequest
	 */
	UploadLogoFileWithContext(ctx context.Context, playerId string, file *os.File, link *string) (*PlayerTheme, error)

	/*
	 * DeleteLogo Delete logo
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiDeleteLogoRequest
	 */

	DeleteLogo(playerId string) error

	/*
	 * DeleteLogo Delete logo
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayerThemesApiDeleteLogoRequest
	 */

	DeleteLogoWithContext(ctx context.Context, playerId string) error
}

// PlayerThemesService communicating with the PlayerThemes
// endpoints of the api.video API
type PlayerThemesService struct {
	client *Client
}

/*
 * Create Create a player
 * Create a player for your video, and customise it.

 * @return PlayerThemesApiCreateRequest
 */

func (s *PlayerThemesService) Create(playerThemeCreationPayload PlayerThemeCreationPayload) (*PlayerTheme, error) {

	return s.CreateWithContext(context.Background(), playerThemeCreationPayload)

}

/*
 * Create Create a player
 * Create a player for your video, and customise it.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlayerThemesApiCreateRequest
 */

func (s *PlayerThemesService) CreateWithContext(ctx context.Context, playerThemeCreationPayload PlayerThemeCreationPayload) (*PlayerTheme, error) {
	var localVarPostBody interface{}

	localVarPath := "/players"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = playerThemeCreationPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PlayerTheme)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Retrieve a player
 * Use a player ID to retrieve details about the player and display it for viewers.

 * @param playerId The unique identifier for the player you want to retrieve.
 * @return PlayerThemesApiGetRequest
 */

func (s *PlayerThemesService) Get(playerId string) (*PlayerTheme, error) {

	return s.GetWithContext(context.Background(), playerId)

}

/*
 * Get Retrieve a player
 * Use a player ID to retrieve details about the player and display it for viewers.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player you want to retrieve.
 * @return PlayerThemesApiGetRequest
 */

func (s *PlayerThemesService) GetWithContext(ctx context.Context, playerId string) (*PlayerTheme, error) {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PlayerTheme)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a player
 * Use a player ID to update specific details for a player.

NOTE: It may take up to 10 min before the new player configuration is available from our CDN.

 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUpdateRequest
*/

func (s *PlayerThemesService) Update(playerId string, playerThemeUpdatePayload PlayerThemeUpdatePayload) (*PlayerTheme, error) {

	return s.UpdateWithContext(context.Background(), playerId, playerThemeUpdatePayload)

}

/*
 * Update Update a player
 * Use a player ID to update specific details for a player.

NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUpdateRequest
*/

func (s *PlayerThemesService) UpdateWithContext(ctx context.Context, playerId string, playerThemeUpdatePayload PlayerThemeUpdatePayload) (*PlayerTheme, error) {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = playerThemeUpdatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PlayerTheme)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete a player
 * Delete a player if you no longer need it. You can delete any player that you have the player ID for.

 * @param playerId The unique identifier for the player you want to delete.
 * @return PlayerThemesApiDeleteRequest
 */

func (s *PlayerThemesService) Delete(playerId string) error {

	return s.DeleteWithContext(context.Background(), playerId)

}

/*
 * Delete Delete a player
 * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player you want to delete.
 * @return PlayerThemesApiDeleteRequest
 */

func (s *PlayerThemesService) DeleteWithContext(ctx context.Context, playerId string) error {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List all player themes
 * Retrieve a list of all the player themes you created, as well as details about each one.

Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).

 * @return PlayerThemesApiListRequest
*/

func (s *PlayerThemesService) List(r PlayerThemesApiListRequest) (*PlayerThemesListResponse, error) {

	return s.ListWithContext(context.Background(), r)

}

/*
 * List List all player themes
 * Retrieve a list of all the player themes you created, as well as details about each one.

Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return PlayerThemesApiListRequest
*/

func (s *PlayerThemesService) ListWithContext(ctx context.Context, r PlayerThemesApiListRequest) (*PlayerThemesListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/players"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PlayerThemesListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 100KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.

 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUploadLogoRequest
 */

func (s *PlayerThemesService) UploadLogoFile(playerId string, file *os.File, link *string) (*PlayerTheme, error) {
	return s.UploadLogoFileWithContext(context.Background(), playerId, file, link)
}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 100KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUploadLogoRequest
 */

func (s *PlayerThemesService) UploadLogoFileWithContext(ctx context.Context, playerId string, file *os.File, link *string) (*PlayerTheme, error) {
	return s.UploadLogoWithContext(ctx, playerId, link, file.Name(), io.Reader(file))
}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 100KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.

 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUploadLogoRequest
 */
func (s *PlayerThemesService) UploadLogo(playerId string, link *string, fileName string, fileReader io.Reader) (*PlayerTheme, error) {
	return s.UploadLogoWithContext(context.Background(), playerId, link, fileName, fileReader)
}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 100KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiUploadLogoRequest
 */
func (s *PlayerThemesService) UploadLogoWithContext(ctx context.Context, playerId string, link *string, fileName string, fileReader io.Reader) (*PlayerTheme, error) {
	localVarPath := "/players/{playerId}/logo"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	if link != nil {
		localVarFormParams["link"] = parameterToString(*link, "")
	}

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(PlayerTheme)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteLogo Delete logo
 * Delete the logo associated to a player.

 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiDeleteLogoRequest
 */

func (s *PlayerThemesService) DeleteLogo(playerId string) error {

	return s.DeleteLogoWithContext(context.Background(), playerId)

}

/*
 * DeleteLogo Delete logo
 * Delete the logo associated to a player.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param playerId The unique identifier for the player.
 * @return PlayerThemesApiDeleteLogoRequest
 */

func (s *PlayerThemesService) DeleteLogoWithContext(ctx context.Context, playerId string) error {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}/logo"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}
