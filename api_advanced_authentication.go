/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type AdvancedAuthenticationServiceI interface {
	/*
	 * Authenticate Get Bearer Token
	 * @return AdvancedAuthenticationApiAuthenticateRequest
	 */

	Authenticate(authenticatePayload AuthenticatePayload) (*AccessToken, error)

	/*
	 * Authenticate Get Bearer Token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AdvancedAuthenticationApiAuthenticateRequest
	 */

	AuthenticateWithContext(ctx context.Context, authenticatePayload AuthenticatePayload) (*AccessToken, error)

	/*
	 * Refresh Refresh Bearer Token
	 * @return AdvancedAuthenticationApiRefreshRequest
	 */

	Refresh(refreshTokenPayload RefreshTokenPayload) (*AccessToken, error)

	/*
	 * Refresh Refresh Bearer Token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AdvancedAuthenticationApiRefreshRequest
	 */

	RefreshWithContext(ctx context.Context, refreshTokenPayload RefreshTokenPayload) (*AccessToken, error)
}

// AdvancedAuthenticationService communicating with the AdvancedAuthentication
// endpoints of the api.video API
type AdvancedAuthenticationService struct {
	client *Client
}

/*
 * Authenticate Get Bearer Token
 * Returns a bearer token that can be used to authenticate other endpoint.



You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).

 * @return AdvancedAuthenticationApiAuthenticateRequest
*/

func (s *AdvancedAuthenticationService) Authenticate(authenticatePayload AuthenticatePayload) (*AccessToken, error) {

	return s.AuthenticateWithContext(context.Background(), authenticatePayload)

}

/*
 * Authenticate Get Bearer Token
 * Returns a bearer token that can be used to authenticate other endpoint.



You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AdvancedAuthenticationApiAuthenticateRequest
*/

func (s *AdvancedAuthenticationService) AuthenticateWithContext(ctx context.Context, authenticatePayload AuthenticatePayload) (*AccessToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/auth/api-key"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = authenticatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AccessToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Refresh Refresh Bearer Token
 * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.



You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).

 * @return AdvancedAuthenticationApiRefreshRequest
*/

func (s *AdvancedAuthenticationService) Refresh(refreshTokenPayload RefreshTokenPayload) (*AccessToken, error) {

	return s.RefreshWithContext(context.Background(), refreshTokenPayload)

}

/*
 * Refresh Refresh Bearer Token
 * Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.



You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return AdvancedAuthenticationApiRefreshRequest
*/

func (s *AdvancedAuthenticationService) RefreshWithContext(ctx context.Context, refreshTokenPayload RefreshTokenPayload) (*AccessToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/auth/refresh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = refreshTokenPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AccessToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
