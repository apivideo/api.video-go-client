openapi: 3.0.0
info:
  description: api.video is an API that encodes on the go to facilitate immediate
    playback, enhancing viewer streaming experiences across multiple devices and platforms.
    You can stream live or on-demand online videos within minutes.
  title: api.video
  version: "1"
servers:
- description: Production server
  url: https://ws.api.video
- description: Test server `all videos are watermarked, and deleted after 24 hours.
  url: https://sandbox.api.video
paths:
  /auth/api-key:
    post:
      description: |-
        Returns a bearer token that can be used to authenticate other endpoint.

        You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
      operationId: POST_auth-api-key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticate-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    token_type: Bearer
                    expires_in: 3600
                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA
                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962
              schema:
                $ref: '#/components/schemas/access-token'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/authenticationinvalid_credentials
                    title: The user credentials were incorrect.
                    name: ""
                    status: 400
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Get Bearer Token
      tags:
      - Advanced authentication
      x-client-action: authenticate
      x-client-hidden: true
      x-readme:
        code-samples:
        - language: go
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: node
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: php
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: python
          code: |
            #With the api.video API clients, authentication is taken care of with each client created.
            # You get to skip this step!
        - language: java
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: csharp
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: swift
          code: |
            // With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
  /auth/refresh:
    post:
      description: |-
        Accepts the old bearer token and returns a new bearer token that can be used to authenticate other endpoint.

        You can find the tutorial on using the disposable bearer token [here](https://docs.api.video/reference/disposable-bearer-token-authentication).
      operationId: POST_auth-refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh-token-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    token_type: Bearer
                    expires_in: 3600
                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA
                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962
              schema:
                $ref: '#/components/schemas/access-token'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    status: 400
                    type: https://docs.api.video/docs/authenticationinvalid_credentials
                    title: The user credentials were incorrect.
                    name: ""
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Refresh Bearer Token
      tags:
      - Advanced authentication
      x-client-action: refresh
      x-client-hidden: true
      x-readme:
        code-samples:
        - language: go
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: node
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: php
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: python
          code: |
            #With the api.video API clients, authentication is taken care of with each client created.
            # You get to skip this step!
        - language: java
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: csharp
          code: |
            //With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
        - language: swift
          code: |
            // With the api.video API clients, authentication is taken care of with each client created.
            // You get to skip this step!
  /videos:
    get:
      description: List all the video objects that are associated with the current
        workspace.
      operationId: LIST-videos
      parameters:
      - description: The title of a specific video you want to find. The search will
          match exactly to what term you provide and return any videos that contain
          the same term as part of their titles.
        example: My Video.mp4
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: A tag is a category you create and apply to videos. You can search
          for videos with particular tags by listing one or more here. Only videos
          that have all the tags you list will be returned.
        example: '["captions", "dialogue"]'
        explode: true
        in: query
        name: tags[]
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Videos can be tagged with metadata tags in key:value pairs. You
          can search for videos with specific key value pairs using this parameter.
          [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows
          you to define a key that allows any value pair.
        example: metadata[Author]=John Doe&metadata[Format]=Tutorial
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: deepObject
        x-is-deep-object: true
      - description: If you described a video with a term or sentence, you can add
          it here to return videos containing this string.
        example: New Zealand
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: If you know the ID for a live stream, you can retrieve the stream
          by adding the ID for it here.
        example: li400mYKSgQ6xs7taUeSaEKr
        explode: true
        in: query
        name: liveStreamId
        required: false
        schema:
          type: string
        style: form
      - description: 'Allowed: publishedAt, title. You can search by the time videos
          were published at, or by title.'
        example: publishedAt
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: 'Allowed: asc, desc. asc is ascending and sorts from A to Z.
          desc is descending and sorts from Z to A.'
        example: asc
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - videoId: vi4blUQJFrYWbaG44NChkH27
                      playerId: pl45KFKdlddgk654dspkze
                      title: Maths video
                      description: An amazing video explaining the string theory
                      public: false
                      panoramic: false
                      mp4Support: true
                      tags:
                      - maths
                      - string theory
                      - video
                      metadata:
                      - key: Author
                        value: John Doe
                      - key: Format
                        value: Tutorial
                      publishedAt: 2019-12-16T08:25:51.000Z
                      updatedAt: 2019-12-16T08:48:49.000Z
                      source:
                        uri: /videos/c188ed58-3403-46a2-b91b-44603d10b2c9/source
                      assets:
                        iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                          width="100%" height="100%" frameborder="0" scrolling="no"
                          allowfullscreen=""></iframe>
                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
                    - videoId: vi4blUQJFrYWbaG44NChkH27
                      title: Video Title
                      description: A description for your video.
                      public: false
                      panoramic: false
                      mp4Support: true
                      tags:
                      - books
                      - short stories
                      metadata:
                      - key: Author
                        value: John Doe
                      - key: Science Fiction
                        value: Cyberpunk
                      - key: Technology
                        value: Computers
                      publishedAt: 2019-12-16T08:25:51.000Z
                      updatedAt: 2019-12-16T08:48:49.000Z
                      source:
                        uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                      assets:
                        iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                          width="100%" height="100%" frameborder="0" scrolling="no"
                          allowfullscreen=""></iframe>
                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
                    - videoId: vi4blUQJFrYWbaG44NChkH27
                      playerId: pl45KFKdlddgk654dspkze
                      title: My Video Title
                      description: A brief description of the video.
                      public: false
                      panoramic: false
                      mp4Support: true
                      tags:
                      - General
                      - Videos
                      metadata:
                      - key: Length
                        value: Short
                      publishedAt: 2019-12-16T08:25:51.000Z
                      updatedAt: 2019-12-16T08:48:49.000Z
                      source:
                        uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                      assets:
                        iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                          width="100%" height="100%" frameborder="0" scrolling="no"
                          allowfullscreen=""></iframe>
                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
                    pagination:
                      currentPage: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 11
                      currentPageItems: 11
                      links:
                      - rel: self
                        uri: https://ws.api.video/videos?currentPage=1
                      - rel: first
                        uri: https://ws.api.video/videos?currentPage=1
                      - rel: last
                        uri: https://ws.api.video/videos?currentPage=1
              schema:
                $ref: '#/components/schemas/videos-list-response'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    title: This parameter is out of the allowed range of values.
                    name: page
                    status: 400
                    range:
                      min: 1
                    problems:
                    - title: This parameter is out of the allowed range of values.
                      name: page
                      range:
                        min: 1
                    - title: This parameter is out of the allowed range of values.
                      name: pageSize
                      range:
                        min: 10
                        max: 100
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: List all video objects
      tags:
      - Videos
      x-client-description:
        default: This method returns a list of your videos (with all their details).
          With no parameters added, the API returns the first page of all videos.
          You can filter videos using the parameters described below.
      x-readme:
        code-samples:
        - language: php
          code: |
            <?php
            // First install the api client: "composer require api-video/php-api-client"
            // Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#list

            require __DIR__ . '/vendor/autoload.php';


            $client = new \ApiVideo\Client\Client(
                'https://ws.api.video',
                'YOUR_API_KEY',
                new \Symfony\Component\HttpClient\Psr18Client()
            );

            // list all videos (all pages)
            $allVideos = [];
            do {
                $currentPage = $client->videos()->list([]);
                $allVideos = array_merge($allVideos, $currentPage->getData());
            } while($currentPage->getPagination()->getCurrentPage() < $currentPage->getPagination()->getPagesTotal());

            // list videos that have all the given tags (only first results page)
            $videosWithTag = $client->videos()->list(['tags' => ['TAG2','TAG1']]);

            // list videos that have all the given metadata values (only first results page)
            $videosWithMetadata = $client->videos()->list(['metadata' => ['key1' => 'key1value1', 'key2' => 'key2value1']]);
        - language: java
          code: |-
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#list

            ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
            VideosApi videosApi = client.videos();

            // list all videos (all pages)
            Page<Video> videosPages = videosApi.list().execute();
            videosPages.forEach(videosPage -> videosPage.getItems().forEach(video ->
                System.out.println(video.getVideoId())
            ));

            // list videos that have all the given tags (only first results page)
            List<Video> videosWithTags = videosApi.list()
                .tags(Arrays.asList("tag1", "tag2"))
                .execute()
                .getItems();

            // list videos that have all the given metadata values (only first results page)
            List<Video> videosWithMetadata = videosApi.list()
                .metadata(Map.of("key1", "value1", "key2", "value2"))
                .execute()
                .getItems();
        - language: node
          code: |-
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#list

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            // list all videos (all pages)
            let allVideos = [];
            for(let currentPage=1 ; ; currentPage++) {
              const res = await client.videos.list({ currentPage });
              allVideos = [...allVideos, ...res.data];
              if(currentPage >= res.pagination.pagesTotal) {
                break;
              }
            }

            // list videos that have all the given tags (only first results page)
            const videosWithTags = await client.videos.list({ tags: ["tag1", "tag2"] });

            // list videos that have all the given metadata values (only first results page)
            const videosWithMetadata = await client.videos.list({ metadata: { "key1": "value1", "key2": "value2" } })
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#list
        - language: go
          code: |
            // First install the go client with "go get github.com/apivideo/api.video-go-client"
            // Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#list
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#list
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#list
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-optional-object: true
    post:
      description: |
        Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/videos-1).
      operationId: POST-video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/video-creation-payload'
        description: video to create
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    title: Maths video
                    description: An amazing video explaining the string theory
                    public: false
                    panoramic: false
                    mp4Support: true
                    playerId: pl4k0jvEUuaTdRAEjQ4Jfrgz
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 4665-07-14T23:36:18.598Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Created
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/video'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/attributerequired
                    title: This attribute is required.
                    name: title
                    status: 400
                    problems:
                    - type: https://docs.api.video/docs/attributerequired
                      title: This attribute is required.
                      name: title
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be a ISO8601 date.
                      name: scheduledAt
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be an array.
                      name: tags
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be an array.
                      name: metadata
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Create a video object
      tags:
      - Videos
      x-client-action: create
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#create\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoCreationPayload := *apivideosdk.NewVideoCreationPayload(\"\
            Maths video\") // VideoCreationPayload | video to create\n\n    \n   \
            \ res, err := client.Videos.Create(videoCreationPayload)\n\n    if err\
            \ != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `Videos.Create``:\
            \ %v\\\n\", err)\n    }\n    // response from `Create`: Video\n    fmt.Fprintf(os.Stdout,\
            \ \"Response from `Videos.Create`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#create\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            // create a simple video\nconst video = await client.videos.create({ title:\
            \ \"Maths video\" });\n\n// create a video using an existing source\n\
            const existingSourceVideo = await client.videos.create({\n  title: \"\
            Video using an existing source\", \n  source: \"https://www.myvideo.url.com/video.mp4\"\
            , \n});\n\n// create a private video\nconst privateVideo = await client.videos.create({\n\
            \  title: \"Video using an existing source\", \n  _public: false,\n});\n\
            \n// create a video using all available attributes\nconst video = await\
            \ client.videos.create({\n  title: \"Maths video\", // The title of your\
            \ new video.\n  description: \"A video about string theory.\", // A brief\
            \ description of your video.\n  source: \"https://www.myvideo.url.com/video.mp4\"\
            , // If you add a video already on the web, this is where you enter the\
            \ url for the video.\n  _public: true, // Whether your video can be viewed\
            \ by everyone, or requires authentication to see it. A setting of false\
            \ will require a unique token for each view.\n  panoramic: false, // Indicates\
            \ if your video is a 360/immersive video.\n  mp4Support: true, // Enables\
            \ mp4 version in addition to streamed version.\n  playerId: \"pl45KFKdlddgk654dspkze\"\
            , // The unique identification number for your video player.\n  tags:\
            \ [\"maths\", \"string theory\", \"video\"], // A list of tags you want\
            \ to use to describe your video.\n  metadata: [{\"key\": \"Author\", \"\
            value\": \"John Doe\"}], // A list of key value pairs that you use to\
            \ provide metadata for your video. These pairs can be made dynamic, allowing\
            \ you to segment your audience. You can also just use the pairs as another\
            \ way to tag and categorize your videos.\n});\n"
        - language: php
          code: |
            <?php
            // First install the api client: "composer require api-video/php-api-client"
            // Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#create

            require __DIR__ . '/vendor/autoload.php';

            $client = new \ApiVideo\Client\Client(
                'https://ws.api.video',
                'YOUR_API_KEY',
                new \Symfony\Component\HttpClient\Psr18Client()
            );

            // create a simple video
            $video = $client->videos()->create((new \ApiVideo\Client\Model\VideoCreationPayload())->setTitle("Maths video"));

            // create a video using an existing source
            $existingSourceVideo = $client->videos()->create((new \ApiVideo\Client\Model\VideoCreationPayload())
                ->setTitle("Maths video")
                ->setSource("https://www.myvideo.url.com/video.mp4"));

            // create a private video
            $privateVideo = $client->videos()->create((new \ApiVideo\Client\Model\VideoCreationPayload())
                ->setTitle("Maths video")
                ->setPublic(false));

            // create a video using all available attributes
            $anotherVideo = $client->videos()->create((new \ApiVideo\Client\Model\VideoCreationPayload())
                ->setTitle("Maths video") // The title of your new video.
                ->setDescription("A video about string theory.") // A brief description of your video.
                ->setSource("https://www.myvideo.url.com/video.mp4") // If you add a video already on the web, this is where you enter the url for the video.
                ->setPublic(true) // Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
                ->setPanoramic(false) // Indicates if your video is a 360/immersive video.
                ->setMp4Support(true) // Enables mp4 version in addition to streamed version.
                ->setPlayerId("pl45KFKdlddgk654dspkze") // The unique identification number for your video player.
                ->setTags(array("TAG1", "TAG2")) // A list of tags you want to use to describe your video.
                ->setMetadata(array( // A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. You can also just use the pairs as another way to tag and categorize your videos.
                    new \ApiVideo\Client\Model\Metadata(['key' => 'key1', 'value' => 'key1value1']),
                    new \ApiVideo\Client\Model\Metadata(['key' => 'key2', 'value' => 'key2value1']))));
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#create

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.video_creation_payload import VideoCreationPayload
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.video import Video
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.VideosApi(api_client)
                video_creation_payload = VideoCreationPayload(
                    title="Maths video",
                    description="A video about string theory.",
                    source="https://www.myvideo.url.com/video.mp4",
                    public=True,
                    panoramic=False,
                    mp4_support=True,
                    player_id="pl45KFKdlddgk654dspkze",
                    tags=["maths", "string theory", "video"],
                    metadata=[
                        Metadata(
                            key="Color",
                            value="Green",
                        ),
                    ],
                ) # VideoCreationPayload | video to create

                # example passing only required values which don't have defaults set
                try:
                    # Create a video
                    api_response = api_instance.create(video_creation_payload)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling VideosApi->create: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#create\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    VideosApi apiInstance =\
            \ client.videos();\n    \n    VideoCreationPayload videoCreationPayload\
            \ = new VideoCreationPayload(); // video to create\n    videoCreationPayload.setTitle(\"\
            Maths video\"); // The title of your new video.\n    videoCreationPayload.setDescription(\"\
            A video about string theory.\"); // A brief description of your video.\n\
            \    videoCreationPayload.setSource(\"https://www.myvideo.url.com/video.mp4\"\
            ); // If you add a video already on the web, this is where you enter the\
            \ url for the video.\n    videoCreationPayload.setPublic(true); // Whether\
            \ your video can be viewed by everyone, or requires authentication to\
            \ see it. A setting of false will require a unique token for each view.\n\
            \    videoCreationPayload.setPanoramic(false); // Indicates if your video\
            \ is a 360/immersive video.\n    videoCreationPayload.setMp4Support(true);\
            \ // Enables mp4 version in addition to streamed version.\n    videoCreationPayload.setPlayerId(\"\
            pl45KFKdlddgk654dspkze\"); // The unique identification number for your\
            \ video player.\n    videoCreationPayload.setTags(Arrays.asList(\"maths\"\
            , \"string theory\", \"video\")); // A list of tags you want to use to\
            \ describe your video.\n    videoCreationPayload.setMetadata(Collections.<Metadata>emptyList());\
            \ // A list of key value pairs that you use to provide metadata for your\
            \ video. These pairs can be made dynamic, allowing you to segment your\
            \ audience. You can also just use the pairs as another way to tag and\
            \ categorize your videos.\n\n\n    try {\n      Video result = apiInstance.create(videoCreationPayload);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling VideosApi#create\");\n\
            \      System.err.println(\"Status code: \" + e.getCode());\n      System.err.println(\"\
            Reason: \" + e.getMessage());\n      System.err.println(\"Response headers:\
            \ \" + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n \
            \ }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#create

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class createExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoCreationPayload = new VideoCreationPayload(); // VideoCreationPayload | video to create
                        var apiVideosInstance = apiInstance.Videos();
                        try
                        {
                            // Create a video
                            Video result = apiVideosInstance.create(videoCreationPayload);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling VideosApi.create: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#create
  /videos/{videoId}/source:
    post:
      description: Ingest a video from a source or file.
      operationId: POST_videos-videoId-source
      parameters:
      - description: Enter the videoId you want to use to upload your video.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: '`part <part>/<total_parts>` ; `bytes <from_byte>-<to_byte>/<total_bytes>`'
        example: bytes 209715200-419430399/524288000 OR part 2/3
        explode: false
        in: header
        name: Content-Range
        required: false
        schema:
          pattern: /(?:bytes (?<from>\d+)-(?<to>\d+)|part (?<part>\d+))\/(?<total>\d+|\*)/
          type: string
        style: simple
        x-client-ignore: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/video-upload-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    title: Maths video
                    description: An amazing video explaining the string theory.
                    public: false
                    panoramic: false
                    mp4Support: true
                    playerId: pl45KFKdlddgk654dspkze
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 4665-07-14T23:36:18.598Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Created
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/filealreadyuploaded
                    title: The source of the video is already uploaded.
                    name: file
                    status: 400
                    problems:
                    - type: https://docs.api.video/docs/filealreadyuploaded
                      title: The source of the video is already uploaded.
                      name: file
                    - type: https://docs.api.video/docs/filealreadyuploaded
                      title: The video xxxx has already been uploaded.
                      name: video
                    - type: https://docs.api.video/docs/filemissing
                      title: There is no uploaded file in the request.
                      name: file
                    - type: https://docs.api.video/docs/multiplefilesuploaded
                      title: There is more than one uploaded file in the request.
                      name: file
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a video
      tags:
      - Videos
      x-client-description:
        default: "To upload a video to the videoId you created. You can only upload\
          \ your video to the videoId once.\n\nWe offer 2 types of upload: \n* Regular\
          \ upload \n* Progressive upload\nThe latter allows you to split a video\
          \ source into X chunks and send those chunks independently (concurrently\
          \ or sequentially). The 2 main goals for our users are to\n  * allow the\
          \ upload of video sources > 200 MiB (200 MiB = the max. allowed file size\
          \ for regular upload)\n  * allow to send a video source \"progressively\"\
          , i.e., before before knowing the total size of the video.\n  Once all chunks\
          \ have been sent, they are reaggregated to one source file. The video source\
          \ is considered as \"completely sent\" when the \"last\" chunk is sent (i.e.,\
          \ the chunk that \"completes\" the upload).\n"
      x-client-action: upload
      x-client-chunk-upload: true
      x-readme:
        explorer-enabled: false
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#upload\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \n      videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" \n    // string | Enter\
            \ the videoId you want to use to upload your video.\n      file := os.NewFile(1234,\
            \ \"some_file\") \n    // *os.File | The path to the video you would like\
            \ to upload. The path must be local. If you want to use a video from an\
            \ online source, you must use the \"/videos\" endpoint and add the \"\
            source\" parameter when you create a new video.\n    \n    \n      res,\
            \ err := client.Videos.UploadFile(videoId, file)\n    \n      // you can\
            \ also use a Reader instead of a File:\n      // client.Videos.Upload(videoId,\
            \ fileName, fileReader, fileSize)\n    \n      if err != nil {\n     \
            \     fmt.Fprintf(os.Stderr, \"Error when calling `Videos.Upload``: %v\\\
            \n\", err)\n      }\n      // response from `Upload`: Video\n      fmt.Fprintf(os.Stdout,\
            \ \"Response from `Videos.Upload`: %v\\\n\", res)\n    }\n      }\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#upload\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Enter the videoId you want\
            \ to use to upload your video.\nconst file = './my-video.mp4'; // The\
            \ path to the video you would like to upload. The path must be local.\
            \ If you want to use a video from an online source, you must use the \"\
            /videos\" endpoint and add the \"source\" parameter when you create a\
            \ new video.\n      \nconst video = await client.videos.upload(videoId,\
            \ file);\n\n// if needed you can define an upload progress listener:\n\
            const video2 = await client.videos.upload(videoId, file, (event) => {\n\
            \  console.log(\"uploadedBytes: \" + event.uploadedBytes);\n  console.log(\"\
            totalBytes: \" + event.totalBytes);\n  console.log(\"chunksCount: \" +\
            \ event.chunksCount);\n  console.log(\"currentChunk: \" + event.currentChunk);\n\
            \  console.log(\"currentChunkTotalBytes: \" + event.currentChunkTotalBytes);\n\
            \  console.log(\"currentChunkUploadedBytes: \" + event.currentChunkUploadedBytes);\n\
            });"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#upload\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n// create\
            \ a new video & upload a video file\n$myVideo = $client->videos()->create((new\
            \ \\ApiVideo\\Client\\Model\\VideoCreationPayload())->setTitle('Uploaded\
            \ video'));\n$client->videos()->upload($myVideo->getVideoId(), new SplFileObject(__DIR__\
            \ . '/558k.mp4'));\n\n// create a new video & upload a video file using\
            \ progressive upload (the file is uploaded by parts)\n$myVideo2 = $client->videos()->create((new\
            \ \\ApiVideo\\Client\\Model\\VideoCreationPayload())->setTitle('Uploaded\
            \ video (progressive upload)'));\n\n$progressiveSession = $client->videos()->createUploadProgressiveSession($myVideo2->getVideoId());\n\
            \n$progressiveSession->uploadPart(new SplFileObject(__DIR__ . '/10m.mp4.part.a'));\n\
            $progressiveSession->uploadPart(new SplFileObject(__DIR__ . '/10m.mp4.part.b'));\n\
            \n$progressiveSession->uploadLastPart(new SplFileObject(__DIR__ . '/10m.mp4.part.c')); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#upload

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from apivideo.model.video import Video
            from apivideo.configuration import Configuration
            from pprint import pprint

            # Enter a context with an instance of the API client
            # When uploading a file you can change the chunk size (in octet)
            configuration = Configuration(chunk_size=10 * 1024 * 1024)
            with apivideo.AuthenticatedApiClient(__API_KEY__, configuration=configuration) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.VideosApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | Enter the videoId you want to use to upload your video.
                file = open('/path/to/file', 'rb') # file_type | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the "/videos" endpoint and add the "source" parameter when you create a new video.

                # example passing only required values which don't have defaults set
                try:
                    # Upload a video
                    api_response = api_instance.upload(video_id, file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling VideosApi->upload: %s\n" % e)
        - language: java
          code: |
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#upload

            import video.api.client.ApiVideoClient;
            import video.api.client.api.ApiException;
            import video.api.client.api.models.*;
            import video.api.client.api.clients.VideosApi;
            import java.util.*;

            public class Example {
              public static void main(String[] args) {
                ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
                // if you rather like to use the sandbox environment:
                // ApiVideoClient client = new ApiVideoClient("YOUR_SANDBOX_API_KEY", ApiVideoClient.Environment.SANDBOX);

                VideosApi apiInstance = client.videos();

                String videoId = "vi4k0jvEUuaTdRAEjQ4Jfrgz"; // Enter the videoId you want to use to upload your video.
                File file = new File("/path/to/file"); // The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the "/videos" endpoint and add the "source" parameter when you create a new video.

                try {
                  Video result = apiInstance.upload(videoId, file);
                  System.out.println(result);
                } catch (ApiException e) {
                  System.err.println("Exception when calling VideosApi#upload");
                  System.err.println("Status code: " + e.getCode());
                  System.err.println("Reason: " + e.getMessage());
                  System.err.println("Response headers: " + e.getResponseHeaders());
                  e.printStackTrace();
                }
              }
            }
        - language: android
          code: |
            // First add the "video.api:android-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-android-client/blob/main/docs/VideosApi.md#upload

            VideosApiStore.initialize("YOUR_API_KEY")
            // if you rather like to use the sandbox environment:
            // VideosApiStore.initialize("YOUR_SANDBOX_API_KEY", Environment.SANDBOX)

            val workManager = WorkManager.getInstance(context) // WorkManager comes from package "androidx.work:work-runtime"

            val videoId = "vi4k0jvEUuaTdRAEjQ4Jfrgz" // The videoId you want to use to upload your video.
            val file = File("/path/to/file") // The path to the video you want to upload.

            workManager.upload(videoId, file) // Dispatch the upload with the WorkManager
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#upload

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class uploadExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | Enter the videoId you want to use to upload your video.
                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the "/videos" endpoint and add the "source" parameter when you create a new video.
                        var apiVideosInstance = apiInstance.Videos();
                        try
                        {
                            // Upload a video
                            Video result = apiVideosInstance.upload(videoId, file);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling VideosApi.upload: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#upload
  /watermarks:
    get:
      description: List all watermarks associated with your workspace.
      operationId: LIST-watermarks
      parameters:
      - description: 'Allowed: createdAt. You can search by the time watermark were
          created at.'
        example: createdAt
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: 'Allowed: asc, desc. asc is ascending and sorts from A to Z.
          desc is descending and sorts from Z to A.'
        example: asc
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i
                      createdAt: 2019-12-16T08:25:51.000Z
                    - watermarkId: watermark_3BWC2L5MTQwxGkuxKjzh7g
                      createdAt: 2019-12-16T08:25:51.000Z
                    pagination:
                      currentPage: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 11
                      currentPageItems: 11
                      links:
                      - rel: self
                        uri: https://ws.api.video/watermarks?currentPage=1
                      - rel: first
                        uri: https://ws.api.video/watermarks?currentPage=1
                      - rel: last
                        uri: https://ws.api.video/watermarks?currentPage=1
              schema:
                $ref: '#/components/schemas/watermarks-list-response'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    title: This parameter is out of the allowed range of values.
                    name: page
                    status: 400
                    range:
                      min: 1
                    problems:
                    - title: This parameter is out of the allowed range of values.
                      name: page
                      range:
                        min: 1
                    - title: This parameter is out of the allowed range of values.
                      name: pageSize
                      range:
                        min: 10
                        max: 100
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: List all watermarks
      tags:
      - Watermarks
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WatermarksApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\n\
            // retrieve the first page of all watermarks\nconst watermarks = await\
            \ client.watermarks.list({});\n\n// retrieve the 5 first watermarks, ordered\
            \ by creation date\nconst watermarks2 = await client.watermarks.list({});\n\
            createdAt\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WatermarksApi.md#list
        - language: go
          code: |
            // First install the go client with "go get github.com/apivideo/api.video-go-client"
            // Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WatermarksApi.md#list
        - language: java
          code: |
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WatermarksApi.md#list
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WatermarksApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n// retrieve\
            \ the first page of all watermarks\n$watermarks =  client->watermarks()->list();\n\
            \n// retrieve the 5 first watermarks, ordered by creation date\n$watermarks2\
            \ = $client->watermarks()->list(array(\n    'pageSize' => 5,\n    'sortBy'\
            \ => 'createdAt',\n    'sortOrder' => 'asc'\n)); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WatermarksApi.md#list
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WatermarksAPI.md#list
    post:
      description: Create a new watermark by uploading a `JPG` or a `PNG` image.
      operationId: POST_watermark
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/watermark-upload-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i
                    createdAt: 2020-03-03T12:52:03.085Z
              schema:
                $ref: '#/components/schemas/watermark'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    status: 400
                    type: https://docs.api.video/docs/fileextension
                    title: Only [jpeg, jpg, JPG, JPEG, png, PNG] extensions are supported.
                    name: file
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Upload a watermark
      tags:
      - Watermarks
      x-client-action: upload
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WatermarksApi.md#upload\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \n    file, _ := os.Open(\"./watermark.jpg\")\n    \n    res, err := client.Watermarks.UploadFile(file)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Watermarks.UploadFile``: %v\", err)\n    }\n    // response from `UploadFile`:\
            \ Watermark\n    fmt.Fprintf(os.Stdout, \"Response from `Watermarks.UploadFile`:\
            \ %v\", res)\n}\n"
        - language: node
          code: |
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WatermarksApi.md#upload

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            // Upload a watermark
            const watermark = await client.watermarks.upload('test/data/test.jpg');

            // create a video with watermark
            const watermarkVideo = await client.videos.create({
              title: 'Nodejs - watermark',
              watermark: {
                id: watermark.watermarkId,
                top: '0px',
                left: '0px',
                width: '100px',
                height: '100px',
              },
            });
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WatermarksApi.md#upload\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n// upload\
            \ the watermark\n$watermark = $client->watermarks()->upload(new SplFileObject(__DIR__\
            \ . '/watermark.png'));\n\n// create a new video with the watermark\n\
            $video = $client->videos()->create((new VideoCreationPayload())\n    \
            \    ->setWatermark((new VideoWatermark())\n                ->setId($watermark->getWatermarkId())\n\
            \                ->setTop(\"0px\")\n                ->setLeft(\"0px\"\
            )\n                ->setWidth(\"100px\")\n                ->setHeight(\"\
            100px\"))\n        ->setTitle(\"Test PHP watermark\")\n);\n\n// upload\
            \ the video\n$client->videos()->upload($video->getVideoId(), new SplFileObject(__DIR__\
            \ . '/558k.mp4')); \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WatermarksApi.md#upload

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.WatermarksApi(api_client)
                file = open('/path/to/file', 'rb') # file_type | The watermark image.

                # example passing only required values which don't have defaults set
                try:
                    # Upload a watermark
                    api_response = api_instance.upload(file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling WatermarksApi->upload: %s\
            " % e)
        - language: java
          code: |
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WatermarksApi.md#upload

            import video.api.client.ApiVideoClient;
            import video.api.client.api.ApiException;
            import video.api.client.api.models.*;
            import video.api.client.api.clients.WatermarksApi;
            import java.util.*;

            public class Example {
             public static void main(String[] args) {
               ApiVideoClient client = new ApiVideoClient("YOUR_API_KEY");
               // if you rather like to use the sandbox environment:
               // ApiVideoClient client = new ApiVideoClient("YOUR_SANDBOX_API_KEY", ApiVideoClient.Environment.SANDBOX);

               WatermarksApi watermarkApi = apiClient.watermarks();

               File file = new File("/path/to/file"); // The watermark image.

               try {
                 Watermark result = watermarkApi.upload(file);
                 System.out.println(result);
               } catch (ApiException e) {
                 System.err.println("Exception when calling WatermarksApi#upload");
                 System.err.println("Status code: " + e.getCode());
                 System.err.println("Reason: " + e.getMessage());
                 System.err.println("Response headers: " + e.getResponseHeaders());
                 e.printStackTrace();
               }
             }
            }
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WatermarksApi.md#upload

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class uploadWatermarkExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var file = File.OpenRead("watermark.jpg");  // The watermark image.
                        var apiWatermarksInstance = apiInstance.Watermarks();

                        try
                        {
                            // Upload a watermark
                            Video result = apiWatermarksInstance.upload(videoId, file);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling WatermarksApi.upload: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WatermarksAPI.md#upload
  /watermarks/{watermarkId}:
    delete:
      description: Delete a watermark.
      operationId: DELETE_watermark
      parameters:
      - description: The watermark ID for the watermark you want to delete.
        example: watermark_1BWr2L5MTQwxGkuxKjzh6i
        explode: false
        in: path
        name: watermarkId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: watermarkId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a watermark
      tags:
      - Watermarks
      x-client-action: delete
      x-readme:
        code-samples:
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WatermarksApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\n\
            const watermarkId = 'watermark_1Bji68oeAAwR44dAb5ZhML'; // The watermark\
            \ ID for the watermark you want to delete.\n\nclient.watermarks.delete(watermarkId);"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WatermarksApi.md#delete
        - language: go
          code: |
            // First install the go client with "go get github.com/apivideo/api.video-go-client"
            // Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WatermarksApi.md#delete
        - language: java
          code: |
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WatermarksApi.md#delete
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WatermarksApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$watermarkId\
            \ = 'watermark_1Bji68oeAAwR44dAb5ZhML'; // The watermark ID for the watermark\
            \ you want to delete.\n\n$client->watermarks->delete(watermarkId);"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WatermarksApi.md#delete
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WatermarksAPI.md#delete
  /videos/{videoId}/thumbnail:
    patch:
      description: Set a thumbnail from a specific time interval within a video.
      operationId: PATCH_videos-videoId-thumbnail
      parameters:
      - description: Unique identifier of the video you want to add a thumbnail to,
          where you use a section of your video as the thumbnail.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/video-thumbnail-pick-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    playerId: pl45KFKdlddgk654dspkze
                    title: Maths video
                    description: An amazing video explaining string theory
                    public: false
                    panoramic: false
                    mp4Support: true
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 4665-07-14T23:36:18.598Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Set a thumbnail
      tags:
      - Videos
      x-client-description:
        default: "Pick a thumbnail from the given time code. \n\nIf you'd like to\
          \ upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail).\
          \ \n\nThere may be a short delay for the thumbnail to update.\n"
      x-client-action: pickThumbnail
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#pickThumbnail\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | Unique\
            \ identifier of the video you want to add a thumbnail to, where you use\
            \ a section of your video as the thumbnail.\n    videoThumbnailPickPayload\
            \ := *apivideosdk.NewVideoThumbnailPickPayload(\"Timecode_example\") //\
            \ VideoThumbnailPickPayload | \n\n    \n    res, err := client.Videos.PickThumbnail(videoId,\
            \ videoThumbnailPickPayload)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `Videos.PickThumbnail``: %v\\\n\", err)\n    }\n\
            \    // response from `PickThumbnail`: Video\n    fmt.Fprintf(os.Stdout,\
            \ \"Response from `Videos.PickThumbnail`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#pickThumbnail\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier of the\
            \ video you want to add a thumbnail to, where you use a section of your\
            \ video as the thumbnail.\nconst videoThumbnailPickPayload = {\n  timecode:\
            \ \"00:01:00.000\",  // Frame in video to be used as a placeholder before\
            \ the video plays. \n}; \n\nconst video = await client.videos.pickThumbnail(videoId,\
            \ videoThumbnailPickPayload);\n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#pickThumbnail\n\
            \nimport apivideo\nfrom apivideo.api import videos_api\nfrom apivideo.model.video_thumbnail_pick_payload\
            \ import VideoThumbnailPickPayload\nfrom apivideo.model.not_found import\
            \ NotFound\nfrom apivideo.model.video import Video\nfrom pprint import\
            \ pprint\n\n# Enter a context with an instance of the API client\nwith\
            \ apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n    # Create\
            \ an instance of the API class\n    api_instance = videos_api.VideosApi(api_client)\n\
            \    video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | Unique identifier\
            \ of the video you want to add a thumbnail to, where you use a section\
            \ of your video as the thumbnail.\n    video_thumbnail_pick_payload =\
            \ VideoThumbnailPickPayload(\n        timecode=\"04:80:72\",\n    ) #\
            \ VideoThumbnailPickPayload | \n\n    # example passing only required\
            \ values which don't have defaults set\n    try:\n        # Pick a thumbnail\n\
            \        api_response = api_instance.pick_thumbnail(video_id, video_thumbnail_pick_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling VideosApi->pick_thumbnail: %s\\\
            \n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#pickThumbnail\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    VideosApi apiInstance =\
            \ client.videos();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // Unique identifier of the video you want to add a thumbnail to, where\
            \ you use a section of your video as the thumbnail.\n    VideoThumbnailPickPayload\
            \ videoThumbnailPickPayload = new VideoThumbnailPickPayload(); // \n \
            \   videoThumbnailPickPayload.setTimecode(\"null\"); // Frame in video\
            \ to be used as a placeholder before the video plays.\nExample: &#39;&quot;00:01:00.000&quot;\
            \ for 1 minute into the video.&#39;\nValid Patterns:\n&quot;hh:mm:ss.ms&quot;\n\
            &quot;hh:mm:ss:frameNumber&quot;\n&quot;124&quot; (integer value is reported\
            \ as seconds)\nIf selection is out of range, &quot;00:00:00.00&quot; will\
            \ be chosen.\n\n\n    try {\n      Video result = apiInstance.pickThumbnail(videoId,\
            \ videoThumbnailPickPayload);\n      System.out.println(result);\n   \
            \ } catch (ApiException e) {\n      System.err.println(\"Exception when\
            \ calling VideosApi#pickThumbnail\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}        \n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#pickThumbnail\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class pickThumbnailExample\n    {\n        public static\
            \ void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | Unique identifier of the video\
            \ you want to add a thumbnail to, where you use a section of your video\
            \ as the thumbnail.\n            var videoThumbnailPickPayload = new VideoThumbnailPickPayload();\
            \ // VideoThumbnailPickPayload | \n            var apiVideosInstance =\
            \ apiInstance.Videos();\n            try\n            {\n            \
            \    // Pick a thumbnail\n                Video result = apiVideosInstance.pickThumbnail(videoId,\
            \ videoThumbnailPickPayload);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling VideosApi.pickThumbnail:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}              \n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#pickThumbnail\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n \n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier of the video you\
            \ want to add a thumbnail to, where you use a section of your video as\
            \ the thumbnail.\n\n$video = $client->videos()->pickThumbnail($videoId,\
            \ (new \\ApiVideo\\Client\\Model\\VideoThumbnailPickPayload())\n    ->setTimecode(\"\
            00:01:00.000\")); // Frame in video to be used as a placeholder before\
            \ the video plays. "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#pickThumbnail
    post:
      description: Upload a thumbnail for a certain video.
      operationId: POST_videos-videoId-thumbnail
      parameters:
      - description: 'Unique identifier of the chosen video '
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/video-thumbnail-upload-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    playerId: pl45KFKdlddgk654dspkze
                    title: Maths video
                    description: An amazing video explaining the string theory
                    public: false
                    panoramic: false
                    mp4Support: true
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    createdAt: 2020-03-03T12:52:03.085Z
                    publishedAt: 2020-07-14T23:36:18.598Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    status: 400
                    type: https://docs.api.video/docs/fileextension
                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.
                    name: file
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a thumbnail
      tags:
      - Videos
      x-client-description:
        default: |-
          The thumbnail is the poster that appears in the player window before video playback begins.

          This endpoint allows you to upload an image for the thumbnail.

          To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.

          Note: There may be a short delay before the new thumbnail is delivered to our CDN.
      x-client-action: uploadThumbnail
      x-readme:
        explorer-enabled: false
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#uploadThumbnail\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \n    videoId := \"videoId_example\" // string | Unique identifier of\
            \ the chosen video \n    file := os.NewFile(1234, \"some_file\") // *os.File\
            \ | The image to be added as a thumbnail.\n\n\n    res, err := client.Videos.UploadThumbnailFile(videoId,\
            \ file)\n\n    // you can also use a Reader instead of a File:\n    //\
            \ client.Videos.UploadThumbnail(videoId, fileName, fileReader)\n\n   \
            \ if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Videos.UploadThumbnail``: %v\\\n\", err)\n    }\n    // response from\
            \ `UploadThumbnail`: Video\n    fmt.Fprintf(os.Stdout, \"Response from\
            \ `Videos.UploadThumbnail`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#uploadThumbnail\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'videoId_example'; // Unique identifier of the chosen\
            \ video \nconst file = './thumbnail.jpg'; // The image to be added as\
            \ a thumbnail.\n\nconst video = await client.videos.uploadThumbnail(videoId,\
            \ file);"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#uploadThumbnail\n\
            \nimport apivideo\nfrom apivideo.api import videos_api\nfrom apivideo.model.bad_request\
            \ import BadRequest\nfrom apivideo.model.not_found import NotFound\nfrom\
            \ apivideo.model.video import Video\nfrom pprint import pprint\n\n# Enter\
            \ a context with an instance of the API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\
            \ as api_client:\n    # Create an instance of the API class\n    api_instance\
            \ = videos_api.VideosApi(api_client)\n    video_id = \"videoId_example\"\
            \ # str | Unique identifier of the chosen video \n    file = open('/path/to/file',\
            \ 'rb') # file_type | The image to be added as a thumbnail.\n\n    # example\
            \ passing only required values which don't have defaults set\n    try:\n\
            \        # Upload a thumbnail\n        api_response = api_instance.upload_thumbnail(video_id,\
            \ file)\n        pprint(api_response)\n    except apivideo.ApiException\
            \ as e:\n        print(\"Exception when calling VideosApi->upload_thumbnail:\
            \ %s\\\n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#uploadThumbnail\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n public static void main(String[]\
            \ args) {\n   ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n   // if you rather like to use the sandbox environment:\n   // ApiVideoClient\
            \ client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\", ApiVideoClient.Environment.SANDBOX);\n\
            \n   VideosApi apiInstance = client.videos();\n\n   String videoId = \"\
            videoId_example\"; // Unique identifier of the chosen video \n   File\
            \ file = new File(\"/path/to/file\"); // The image to be added as a thumbnail.\n\
            \n   try {\n     Video result = apiInstance.uploadThumbnail(videoId, file);\n\
            \     System.out.println(result);\n   } catch (ApiException e) {\n   \
            \  System.err.println(\"Exception when calling VideosApi#uploadThumbnail\"\
            );\n     System.err.println(\"Status code: \" + e.getCode());\n     System.err.println(\"\
            Reason: \" + e.getMessage());\n     System.err.println(\"Response headers:\
            \ \" + e.getResponseHeaders());\n     e.printStackTrace();\n   }\n }\n\
            }\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#uploadThumbnail\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class uploadThumbnailExample\n    {\n        public static\
            \ void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ videoId_example;  // string | Unique identifier of the chosen video\
            \ \n            var file = BINARY_DATA_HERE;  // System.IO.Stream | The\
            \ image to be added as a thumbnail.\n            var apiVideosInstance\
            \ = apiInstance.Videos();\n            try\n            {\n          \
            \      // Upload a thumbnail\n                Video result = apiVideosInstance.uploadThumbnail(videoId,\
            \ file);\n                Debug.WriteLine(result);\n            }\n  \
            \          catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling VideosApi.uploadThumbnail: \" + e.Message );\n\
            \                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n      \
            \          Debug.Print(e.StackTrace);\n            }\n        }\n    }\n\
            }\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#uploadWithUploadToken\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier of the chosen video\n\
            $thumbnail = new SplFileObject(__DIR__ . '/thumbnail.jpg'); // The image\
            \ to be added as a thumbnail.\n\n$client->videos()->uploadThumbnail($videoId,\
            \ $thumbnail); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#uploadThumbnail
  /videos/{videoId}:
    delete:
      description: Delete a video object by video ID.
      operationId: DELETE-video
      parameters:
      - description: The video ID for the video you want to delete.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a video object
      tags:
      - Videos
      x-client-description:
        default: If you do not need a video any longer, you can send a request to
          delete it. All you need is the videoId.
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#delete\n\
            \npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n \
            \   apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\nfunc main()\
            \ {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ video ID for the video you want to delete.\n    err := client.Videos.Delete(videoId)\n\
            \    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Videos.Delete``: %v\\\n\", err)\n    }\n}  \n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // the id of the video to\
            \ delete\nawait client.videos.delete(videoId); \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#delete

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint
            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.VideosApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The video ID for the video you want to delete.
                # example passing only required values which don't have defaults set
                try:
                    # Delete a video
                    api_instance.delete(video_id)
                except apivideo.ApiException as e:
                    print("Exception when calling VideosApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#delete\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n  \npublic class Example {\n  public static void\
            \ main(String[] args) {\n    ApiVideoClient client = new ApiVideoClient(\"\
            YOUR_API_KEY\");\n    // if you rather like to use the sandbox environment:\n\
            \    // ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n    \n    VideosApi apiInstance\
            \ = client.videos();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The video ID for the video you want to delete.\n    \n    try {\n\
            \      apiInstance.delete(videoId);\n    } catch (ApiException e) {\n\
            \      System.err.println(\"Exception when calling VideosApi#delete\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#delete\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class deleteExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n            var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;\
            \  // string | The video ID for the video you want to delete.\n      \
            \      var apiVideosInstance = apiInstance.Videos();\n            try\n\
            \            {\n                // Delete a video\n                apiVideosInstance.delete(videoId);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling VideosApi.delete:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n} \n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // the id of the video to delete\n$client->videos()->delete($videoId); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#delete
    get:
      description: Retrieve the video details by video id.
      operationId: GET-video
      parameters:
      - description: The unique identifier for the video you want details about.
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    playerId: pl45KFKdlddgk654dspkze
                    title: Maths video
                    description: An amazing video explaining string theory
                    public: false
                    panoramic: false
                    mp4Support: true
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 2019-12-16T08:25:51.000Z
                    updatedAt: 2019-12-16T08:48:49.000Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve a video object
      tags:
      - Videos
      x-client-description:
        default: This call provides the same information provided on video creation.
          For private videos, it will generate a unique token url. Use this to retrieve
          any details you need about a video, or set up a private viewing URL.
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"videoId_example\" // string | The unique identifier\
            \ for the video you want details about.\n\n    \n    res, err := client.Videos.Get(videoId)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Videos.Get``: %v\\\n\", err)\n    }\n    // response from `Get`: Video\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `Videos.Get`: %v\\\n\", res)\n\
            }\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#get\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for\
            \ the video you want to retrieve.\nconst result = await client.videos.get(videoId);\
            \  \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#get

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.video import Video
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.VideosApi(api_client)
                video_id = "videoId_example" # str | The unique identifier for the video you want details about.

                # example passing only required values which don't have defaults set
                try:
                    # Show a video
                    api_response = api_instance.get(video_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling VideosApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    VideosApi apiInstance =\
            \ client.videos();\n    \n    String videoId = \"videoId_example\"; //\
            \ The unique identifier for the video you want details about.\n\n    try\
            \ {\n      Video result = apiInstance.get(videoId);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling VideosApi#get\");\n      System.err.println(\"Status code:\
            \ \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}  \n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#get\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class getExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ videoId_example;  // string | The unique identifier for the video you\
            \ want details about.\n            var apiVideosInstance = apiInstance.Videos();\n\
            \            try\n            {\n                // Show a video\n   \
            \             Video result = apiVideosInstance.get(videoId);\n       \
            \         Debug.WriteLine(result);\n            }\n            catch (ApiException\
            \  e)\n            {\n                Debug.Print(\"Exception when calling\
            \ VideosApi.get: \" + e.Message );\n                Debug.Print(\"Status\
            \ Code: \"+ e.ErrorCode);\n                Debug.Print(e.StackTrace);\n\
            \            }\n        }\n    }\n} \n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#getStatus\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video\
            \ you want the status for.\n$videoStatus = $client->videos()->getStatus($videoId);\
            \  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#get
    patch:
      description: Update the parameters associated with a video ID.
      operationId: PATCH-video
      parameters:
      - description: The video ID for the video you want to update.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/video-update-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4blUQJFrYWbaG44NChkH27
                    playerId: pl45KFKdlddgk654dspkze
                    title: Maths video
                    description: An amazing video explaining the string theory
                    public: false
                    panoramic: false
                    mp4Support: true
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 2019-12-16T08:25:51.000Z
                    updatedAt: 2019-12-16T08:48:49.000Z
                    source:
                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/attributeinvalid
                    title: This attribute must be a ISO-8601 date.
                    name: scheduledAt
                    status: 400
                    problems:
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be a ISO-8601 date.
                      name: scheduledAt
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be an array.
                      name: tags
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be an array.
                      name: metadata
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Update a video object
      tags:
      - Videos
      x-client-description:
        default: "Updates the parameters associated with a video ID. The video object\
          \ you are updating is determined by the video ID you provide. \n\nNOTE:\
          \ If you are updating an array, you must provide the entire array as what\
          \ you provide here overwrites what is in the system rather than appending\
          \ to it.\n"
      x-client-action: update
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#update\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ video ID for the video you want to delete.\n    videoUpdatePayload :=\
            \ *apivideosdk.NewVideoUpdatePayload() // VideoUpdatePayload | \n\n  \
            \  \n    res, err := client.Videos.Update(videoId, videoUpdatePayload)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Videos.Update``: %v\\\n\", err)\n    }\n    // response from `Update`:\
            \ Video\n    fmt.Fprintf(os.Stdout, \"Response from `Videos.Update`: %v\\\
            \n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#update\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The video ID for the video\
            \ you want to update.\n\n// define the value you want to update\nconst\
            \ videoUpdatePayload = {\n    playerId: \"pl4k0jvEUuaTdRAEjQ4Jfrgz\",\
            \ // The unique ID for the player you want to associate with your video.\n\
            \    title: \"title_example\", // The title you want to use for your video.\n\
            \    description: \"A film about good books.\", // A brief description\
            \ of the video.\n    _public: true, // Whether the video is publicly available\
            \ or not. False means it is set to private.\n    panoramic: false, //\
            \ Whether the video is a 360 degree or immersive video.\n    mp4Support:\
            \ true, // Whether the player supports the mp4 format.\n    tags: [\"\
            maths\", \"string theory\", \"video\"], // A list of terms or words you\
            \ want to tag the video with. Make sure the list includes all the tags\
            \ you want as whatever you send in this list will overwrite the existing\
            \ list for the video.\n    metadata: [{\"key\": \"Author\", \"value\"\
            : \"John Doe\"}], // A list (array) of dictionaries where each dictionary\
            \ contains a key value pair that describes the video. As with tags, you\
            \ must send the complete list of metadata you want as whatever you send\
            \ here will overwrite the existing metadata for the video.\n}; \n\n\n\
            const updatedVideo = await client.videos.update(videoId, videoUpdatePayload);\n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#update\n\
            \nimport apivideo\nfrom apivideo.api import videos_api\nfrom apivideo.model.video_update_payload\
            \ import VideoUpdatePayload\nfrom apivideo.model.bad_request import BadRequest\n\
            from apivideo.model.not_found import NotFound\nfrom apivideo.model.video\
            \ import Video\nfrom pprint import pprint\n\n# Enter a context with an\
            \ instance of the API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\
            \ as api_client:\n    # Create an instance of the API class\n    api_instance\
            \ = videos_api.VideosApi(api_client)\n    video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            \ # str | The video ID for the video you want to delete.\n    video_update_payload\
            \ = VideoUpdatePayload(\n        player_id=\"pl4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ,\n        title=\"title_example\",\n        description=\"A film about\
            \ good books.\",\n        public=True,\n        panoramic=False,\n   \
            \     mp4_support=True,\n        tags=[\"maths\", \"string theory\", \"\
            video\"],\n        metadata=[\n            Metadata(\n               \
            \ key=\"Color\",\n                value=\"Green\",\n            ),\n \
            \       ],\n    ) # VideoUpdatePayload | \n\n    # example passing only\
            \ required values which don't have defaults set\n    try:\n        # Update\
            \ a video\n        api_response = api_instance.update(video_id, video_update_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling VideosApi->update: %s\\\n\" %\
            \ e)              \n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#update\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    VideosApi apiInstance =\
            \ client.videos();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The video ID for the video you want to delete.\n    VideoUpdatePayload\
            \ videoUpdatePayload = new VideoUpdatePayload(); // \n    videoUpdatePayload.setPlayerId(\"\
            pl4k0jvEUuaTdRAEjQ4Jfrgz\"); // The unique ID for the player you want\
            \ to associate with your video.\n    videoUpdatePayload.setTitle(\"null\"\
            ); // The title you want to use for your video.\n    videoUpdatePayload.setDescription(\"\
            A film about good books.\"); // A brief description of the video.\n  \
            \  videoUpdatePayload.setPublic(true); // Whether the video is publicly\
            \ available or not. False means it is set to private.\n    videoUpdatePayload.setPanoramic(false);\
            \ // Whether the video is a 360 degree or immersive video.\n    videoUpdatePayload.setMp4Support(true);\
            \ // Whether the player supports the mp4 format.\n    videoUpdatePayload.setTags(Arrays.asList(\"\
            maths\", \"string theory\", \"video\")); // A list of terms or words you\
            \ want to tag the video with. Make sure the list includes all the tags\
            \ you want as whatever you send in this list will overwrite the existing\
            \ list for the video.\n    videoUpdatePayload.setMetadata(Collections.<Metadata>emptyList());\
            \ // A list (array) of dictionaries where each dictionary contains a key\
            \ value pair that describes the video. As with tags, you must send the\
            \ complete list of metadata you want as whatever you send here will overwrite\
            \ the existing metadata for the video.\n\n\n    try {\n      Video result\
            \ = apiInstance.update(videoId, videoUpdatePayload);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling VideosApi#update\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#update\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class updateExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The video ID for the video you\
            \ want to delete.\n            var videoUpdatePayload = new VideoUpdatePayload();\
            \ // VideoUpdatePayload | \n            var apiVideosInstance = apiInstance.Videos();\n\
            \            try\n            {\n                // Update a video\n \
            \               Video result = apiVideosInstance.update(videoId, videoUpdatePayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling VideosApi.update: \" + e.Message );\n         \
            \       Debug.Print(\"Status Code: \"+ e.ErrorCode);\n               \
            \ Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#update\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The video ID for the video you want\
            \ to update.\n\n$client->videos()->update($videoId, (new \\ApiVideo\\\
            Client\\Model\\VideoUpdatePayload())\n    ->setPlayerId(\"pl4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ) // The unique ID for the player you want to associate with your video.\n\
            \    ->setTitle(\"The new title\") // The title you want to use for your\
            \ video.\n    ->setDescription(\"A new description\") // A brief description\
            \ of the video.\n    ->setPublic(false) // Whether the video is publicly\
            \ available or not. False means it is set to private.\n    ->setPanoramic(false)\
            \ // Whether the video is a 360 degree or immersive video.\n    ->setMp4Support(true)\
            \ // Whether the player supports the mp4 format.\n    ->setTags([\"tag1\"\
            , \"tag2\"]) // A list of terms or words you want to tag the video with.\
            \ Make sure the list includes all the tags you want as whatever you send\
            \ in this list will overwrite the existing list for the video.\n    ->setMetadata(array(\
            \ // A list (array) of dictionaries where each dictionary contains a key\
            \ value pair that describes the video. As with tags, you must send the\
            \ complete list of metadata you want as whatever you send here will overwrite\
            \ the existing metadata for the video.\n        new \\ApiVideo\\Client\\\
            Model\\Metadata([\"key\" => \"aa\", 'value' => \"bb\"]),\n        new\
            \ \\ApiVideo\\Client\\Model\\Metadata([\"key\" => \"aa2\", 'value' =>\
            \ \"bb2\"])))); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#update
  /videos/{videoId}/status:
    get:
      description: Retrieve upload status and encoding status to determine when the
        video is uploaded or ready to playback. Once encoding is completed, the response
        also lists the available stream qualities.
      operationId: GET-video-status
      parameters:
      - description: The unique identifier for the video you want the status for.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    ingest:
                      status: uploaded
                      filesize: 273579401
                      receivedBytes:
                      - to: 134217727
                        from: 0
                        total: 273579401
                      - to: 268435455
                        from: 134217728
                        total: 273579401
                      - to: 273579400
                        from: 268435456
                        total: 273579401
                    encoding:
                      playable: true
                      qualities:
                      - quality: 360p
                        status: encoded
                      - quality: 480p
                        status: encoded
                      - quality: 720p
                        status: encoded
                      - quality: 1080p
                        status: encoding
                      - quality: 2160p
                        status: waiting
                      metadata:
                        width: 424
                        height: 240
                        bitrate: 411.218
                        duration: 4176
                        framerate: 24
                        samplerate: 48000
                        videoCodec: h264
                        audioCodec: aac
                        aspectRatio: 16/9
              schema:
                $ref: '#/components/schemas/video-status'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve video status and details
      tags:
      - Videos
      x-client-description:
        default: This method provides upload status & encoding status to determine
          when the video is uploaded or ready to playback. Once encoding is completed,
          the response also lists the available stream qualities.
      x-client-action: getStatus
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#getStatus\n\
            \n package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ unique identifier for the video you want the status for.\n\n    \n \
            \   res, err := client.Videos.GetStatus(videoId)\n\n    if err != nil\
            \ {\n        fmt.Fprintf(os.Stderr, \"Error when calling `Videos.GetStatus``:\
            \ %v\\\n\", err)\n    }\n    // response from `GetStatus`: VideoStatus\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `Videos.GetStatus`: %v\\\n\
            \", res)\n}             \n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#getStatus\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for\
            \ the video you want the status for.\nconst result = await client.videos.getStatus(videoId);\
            \ \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#getStatus

            import apivideo
            from apivideo.api import videos_api
            from apivideo.model.video_status import VideoStatus
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = videos_api.VideosApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the video you want the status for.

                # example passing only required values which don't have defaults set
                try:
                    # Show video status
                    api_response = api_instance.get_status(video_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling VideosApi->get_status: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#getStatus\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.VideosApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    VideosApi apiInstance =\
            \ client.videos();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the video you want the status for.\n\n\
            \    try {\n      VideoStatus result = apiInstance.getStatus(videoId);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling VideosApi#getStatus\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#getStatus

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getStatusExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want the status for.
                        var apiVideosInstance = apiInstance.Videos();
                        try
                        {
                            // Show video status
                            VideoStatus result = apiVideosInstance.getStatus(videoId);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling VideosApi.getStatus: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#getStatus\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video\
            \ you want the status for.\n$videoStatus = $client->videos()->getStatus($videoId);\
            \  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#getStatus
  /upload-tokens:
    get:
      description: Retrieve a list of all currently active delegated tokens.
      operationId: GET_upload-tokens
      parameters:
      - description: 'Allowed: createdAt, ttl. You can use these to sort by when a
          token was created, or how much longer the token will be active (ttl - time
          to live). Date and time is presented in ISO-8601 format.'
        example: ttl
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - createdAt
          - ttl
          type: string
        style: form
      - description: 'Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0
          or Z-A.'
        example: asc
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - token: to37YfoPDRR2pcDKa6LsUE0M
                      ttl: 3600
                      createdAt: 2020-12-02T10:26:46.000Z
                      expiresAt: 2020-12-02T11:26:46.000Z
                    - token: to1W3ZS9PdUBZWzzTEZr1B79
                      ttl: 0
                      createdAt: 2020-12-02T10:26:28.000Z
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 2
                      links:
                      - rel: self
                        uri: /upload-tokens?currentPage=1&pageSize=25
                      - rel: first
                        uri: /upload-tokens?currentPage=1&pageSize=25
                      - rel: last
                        uri: /upload-tokens?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/token-list-response'
          description: Success
      security:
      - apiKey: []
      summary: List all active upload tokens
      tags:
      - Upload Tokens
      x-group-parameters: true
      x-client-paginated: true
      x-optional-object: true
      x-client-action: list
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/UploadTokensApi.md#list\n\
            \npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n \
            \   apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    uploadToken := \"to1tcmSFHeYY5KzyhOqVKMKb\" // string |\
            \ The unique identifier for the token you want information about.\n\n\
            \    \n    res, err := client.UploadTokens.GetToken(uploadToken)\n\n \
            \   if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `UploadTokens.GetToken``: %v\\\n\", err)\n    }\n    // response from\
            \ `GetToken`: UploadToken\n    fmt.Fprintf(os.Stdout, \"Response from\
            \ `UploadTokens.GetToken`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/UploadTokensApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\
            \ \nconst uploadTokens = await client.uploadTokens.list();\n        \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/UploadTokensApi.md#list

            import apivideo
            from apivideo.api import upload_tokens_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.upload_token import UploadToken
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = upload_tokens_api.UploadTokensApi(api_client)
                upload_token = "to1tcmSFHeYY5KzyhOqVKMKb" # str | The unique identifier for the token you want information about.

                # example passing only required values which don't have defaults set
                try:
                    # Show upload token
                    api_response = api_instance.get_token(upload_token)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling UploadTokensApi->get_token: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/UploadTokensApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.UploadTokensApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    UploadTokensApi apiInstance\
            \ = client.uploadTokens();\n    \n    String uploadToken = \"to1tcmSFHeYY5KzyhOqVKMKb\"\
            ; // The unique identifier for the token you want information about.\n\
            \n    try {\n      UploadToken result = apiInstance.getToken(uploadToken);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling UploadTokensApi#getToken\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/UploadTokensApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.UploadTokensApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    UploadTokensApi apiInstance\
            \ = client.uploadTokens();\n    \n    String uploadToken = \"to1tcmSFHeYY5KzyhOqVKMKb\"\
            ; // The unique identifier for the token you want information about.\n\
            \n    try {\n      UploadToken result = apiInstance.getToken(uploadToken);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling UploadTokensApi#getToken\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/UploadTokensApi.md#list

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getTokenExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the token you want information about.
                        var apiUploadTokensInstance = apiInstance.UploadTokens();
                        try
                        {
                            // Show upload token
                            UploadToken result = apiUploadTokensInstance.getToken(uploadToken);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling UploadTokensApi.getToken: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/UploadTokensApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$uploadTokens\
            \ = $client->uploadTokens()->list(); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/UploadTokensAPI.md#list
    post:
      description: Generates an upload token that can be used to replace the API Key.
        More information can be found [here](https://docs.api.video/reference/upload-tokens)
      operationId: POST_upload-tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token-creation-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    token: to1tcmSFHeYY5KzyhOqVKMKb
                    ttl: 3600
                    createdAt: 2020-12-02T10:13:19.000Z
                    expiresAt: 2020-12-02T11:13:19.000Z
              schema:
                $ref: '#/components/schemas/upload-token'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Generate an upload token
      tags:
      - Upload Tokens
      x-client-action: createToken
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/UploadTokensApi.md#createToken\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    tokenCreationPayload := *apivideosdk.NewTokenCreationPayload()\
            \ // TokenCreationPayload | \n\n    \n    res, err := client.UploadTokens.CreateToken(tokenCreationPayload)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `UploadTokens.CreateToken``: %v\\\n\", err)\n    }\n    // response\
            \ from `CreateToken`: UploadToken\n    fmt.Fprintf(os.Stdout, \"Response\
            \ from `UploadTokens.CreateToken`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/UploadTokensApi.md#createToken\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\n\
            const tokenCreationPayload = {\n  ttl: 56, // Time in seconds that the\
            \ token will be active. A value of 0 means that the token has no expiration\
            \ date. The default is to have no expiration.\n}; \n\nconst uploadToken\
            \ = await client.uploadTokens.createToken(tokenCreationPayload);\n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/UploadTokensApi.md#createToken\n\
            \nimport apivideo\nfrom apivideo.api import upload_tokens_api\nfrom apivideo.model.bad_request\
            \ import BadRequest\nfrom apivideo.model.upload_token import UploadToken\n\
            from apivideo.model.token_creation_payload import TokenCreationPayload\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = upload_tokens_api.UploadTokensApi(api_client)\n\
            \    token_creation_payload = TokenCreationPayload(\n        ttl=0,\n\
            \    ) # TokenCreationPayload | \n\n    # example passing only required\
            \ values which don't have defaults set\n    try:\n        # Generate an\
            \ upload token\n        api_response = api_instance.create_token(token_creation_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling UploadTokensApi->create_token:\
            \ %s\\\n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/UploadTokensApi.md#createToken\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.UploadTokensApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    UploadTokensApi apiInstance\
            \ = client.uploadTokens();\n    \n    TokenCreationPayload tokenCreationPayload\
            \ = new TokenCreationPayload(); // \n    tokenCreationPayload.setTtl();\
            \ // Time in seconds that the token will be active. A value of 0 means\
            \ that the token has no expiration date. The default is to have no expiration.\n\
            \n\n    try {\n      UploadToken result = apiInstance.createToken(tokenCreationPayload);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling UploadTokensApi#createToken\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/UploadTokensApi.md#createToken\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class createTokenExample\n    {\n        public static void\
            \ Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var tokenCreationPayload\
            \ = new TokenCreationPayload(); // TokenCreationPayload | \n         \
            \   var apiUploadTokensInstance = apiInstance.UploadTokens();\n      \
            \      try\n            {\n                // Generate an upload token\n\
            \                UploadToken result = apiUploadTokensInstance.createToken(tokenCreationPayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling UploadTokensApi.createToken: \" + e.Message );\n\
            \                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n      \
            \          Debug.Print(e.StackTrace);\n            }\n        }\n    }\n\
            }\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/UploadTokensApi.md#deleteToken\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$uploadToken\
            \ = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the upload\
            \ token you want to delete. Deleting a token will make it so the token\
            \ can no longer be used for authentication.\n$client->uploadTokens()->deleteToken($uploadToken); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/UploadTokensAPI.md#createToken
  /upload-tokens/{uploadToken}:
    delete:
      description: Delete an existing upload token. This is especially useful for
        tokens you may have created that do not expire.
      operationId: DELETE_upload-tokens-uploadToken
      parameters:
      - description: The unique identifier for the upload token you want to delete.
          Deleting a token will make it so the token can no longer be used for authentication.
        example: to1tcmSFHeYY5KzyhOqVKMKb
        explode: false
        in: path
        name: uploadToken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete an upload token
      tags:
      - Upload Tokens
      x-client-action: deleteToken
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/UploadTokensApi.md#deleteToken\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    uploadToken := \"to1tcmSFHeYY5KzyhOqVKMKb\" // string |\
            \ The unique identifier for the upload token you want to delete. Deleting\
            \ a token will make it so the token can no longer be used for authentication.\n\
            \n    \n    err := client.UploadTokens.DeleteToken(uploadToken)\n\n  \
            \  if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `UploadTokens.DeleteToken``: %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/UploadTokensApi.md#deleteToken\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\n\
            const uploadToken = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier\
            \ for the upload token you want to delete. Deleting a token will make\
            \ it so the token can no longer be used for authentication.\n  \nawait\
            \ client.uploadTokens.deleteToken(uploadToken); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/UploadTokensApi.md#deleteToken

            import apivideo
            from apivideo.api import upload_tokens_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = upload_tokens_api.UploadTokensApi(api_client)
                upload_token = "to1tcmSFHeYY5KzyhOqVKMKb" # str | The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.

                # example passing only required values which don't have defaults set
                try:
                    # Delete an upload token
                    api_instance.delete_token(upload_token)
                except apivideo.ApiException as e:
                    print("Exception when calling UploadTokensApi->delete_token: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/UploadTokensApi.md#deleteToken\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.UploadTokensApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    UploadTokensApi apiInstance\
            \ = client.uploadTokens();\n    \n    String uploadToken = \"to1tcmSFHeYY5KzyhOqVKMKb\"\
            ; // The unique identifier for the upload token you want to delete. Deleting\
            \ a token will make it so the token can no longer be used for authentication.\n\
            \n    try {\n      apiInstance.deleteToken(uploadToken);\n    } catch\
            \ (ApiException e) {\n      System.err.println(\"Exception when calling\
            \ UploadTokensApi#deleteToken\");\n      System.err.println(\"Status code:\
            \ \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/UploadTokensApi.md#deleteToken

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteTokenExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
                        var apiUploadTokensInstance = apiInstance.UploadTokens();
                        try
                        {
                            // Delete an upload token
                            apiUploadTokensInstance.deleteToken(uploadToken);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling UploadTokensApi.deleteToken: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/UploadTokensApi.md#getToken\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$uploadTokenId\
            \ = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the token\
            \ you want information about.\n$uploadToken = $client->uploadTokens()->getToken($uploadTokenId); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/UploadTokensAPI.md#deleteToken
    get:
      description: Retrieve details about a specific upload token by id.
      operationId: GET_upload-tokens-uploadToken
      parameters:
      - description: The unique identifier for the token you want information about.
        example: to1tcmSFHeYY5KzyhOqVKMKb
        explode: false
        in: path
        name: uploadToken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    token: to1tcmSFHeYY5KzyhOqVKMKb
                    ttl: 0
                    createdAt: 2020-12-02T10:13:19.000Z
              schema:
                $ref: '#/components/schemas/upload-token'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve upload token
      tags:
      - Upload Tokens
      x-client-action: getToken
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/UploadTokensApi.md#getToken\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    uploadToken := \"to1tcmSFHeYY5KzyhOqVKMKb\" // string |\
            \ The unique identifier for the token you want information about.\n\n\
            \    \n    res, err := client.UploadTokens.GetToken(uploadToken)\n\n \
            \   if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `UploadTokens.GetToken``: %v\\\n\", err)\n    }\n    // response from\
            \ `GetToken`: UploadToken\n    fmt.Fprintf(os.Stdout, \"Response from\
            \ `UploadTokens.GetToken`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/UploadTokensApi.md#getToken\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" }); \n\n\
            const uploadTokenId = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier\
            \ for the token you want information about.\n\nconst uploadToken = await\
            \ client.uploadTokens.getToken(uploadTokenId);\n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/UploadTokensApi.md#getToken

            import apivideo
            from apivideo.api import upload_tokens_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.upload_token import UploadToken
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = upload_tokens_api.UploadTokensApi(api_client)
                upload_token = "to1tcmSFHeYY5KzyhOqVKMKb" # str | The unique identifier for the token you want information about.

                # example passing only required values which don't have defaults set
                try:
                    # Show upload token
                    api_response = api_instance.get_token(upload_token)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling UploadTokensApi->get_token: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/UploadTokensApi.md#getToken\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.UploadTokensApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    UploadTokensApi apiInstance\
            \ = client.uploadTokens();\n    \n    String uploadToken = \"to1tcmSFHeYY5KzyhOqVKMKb\"\
            ; // The unique identifier for the token you want information about.\n\
            \n    try {\n      UploadToken result = apiInstance.getToken(uploadToken);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling UploadTokensApi#getToken\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/UploadTokensApi.md#getToken

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getTokenExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the token you want information about.
                        var apiUploadTokensInstance = apiInstance.UploadTokens();
                        try
                        {
                            // Show upload token
                            UploadToken result = apiUploadTokensInstance.getToken(uploadToken);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling UploadTokensApi.getToken: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/UploadTokensApi.md#getToken\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$uploadTokenId\
            \ = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the token\
            \ you want information about.\n$uploadToken = $client->uploadTokens()->getToken($uploadTokenId); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/UploadTokensAPI.md#getToken
  /upload:
    post:
      description: Uploading a video with the delegated upload token.
      operationId: POST_upload
      parameters:
      - description: The unique identifier for the token you want to use to upload
          a video.
        example: to1tcmSFHeYY5KzyhOqVKMKb
        explode: true
        in: query
        name: token
        required: true
        schema:
          type: string
        style: form
      - description: Content-Range represents the range of bytes that will be returned
          as a result of the request. Byte ranges are inclusive, meaning that bytes
          0-999 represents the first 1000 bytes in a file or object.
        example: 'Content-Range: bytes 200-100/5000'
        explode: false
        in: header
        name: Content-Range
        required: false
        schema:
          pattern: ^bytes [0-9]*-[0-9]*\/[0-9]*$
          type: string
        style: simple
        x-client-ignore: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/token-upload-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz
                    playerId: pl45KFKdlddgk654dspkze
                    title: Maths video
                    description: An amazing video explaining the string theory
                    public: false
                    panoramic: false
                    tags:
                    - maths
                    - string theory
                    - video
                    metadata:
                    - key: Author
                      value: John Doe
                    - key: Format
                      value: Tutorial
                    publishedAt: 4665-07-14T23:36:18.598Z
                    source:
                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source
                    assets:
                      iframe: <iframe src="https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27"
                        width="100%" height="100%" frameborder="0" scrolling="no"
                        allowfullscreen=""></iframe>
                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27
                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8
                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg
                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4
              schema:
                $ref: '#/components/schemas/video'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security: []
      summary: Upload with an delegated upload token
      tags:
      - Videos
      x-client-description:
        default: This method allows you to send a video using an upload token. Upload
          tokens are especially useful when the upload is done from the client side.
          If you want to upload a video from your server-side application, you'd better
          use the [standard upload method](#upload).
      x-client-action: uploadWithUploadToken
      x-client-chunk-upload: true
      x-readme:
        code-samples:
        - language: go
          code: |
            // First install the go client with "go get github.com/apivideo/api.video-go-client"
            // Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#uploadWithUploadToken
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#uploadWithUploadToken\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const token = 'to4k0jvEUuaTdRAEjQ4Jfrgz'; // Enter the unique identifier\
            \ for the token you want to use to upload a video.\nconst file = './my-video.mp4';\
            \ // The path to the video you would like to upload. The path must be\
            \ local. If you want to use a video from an online source, you must use\
            \ the \"/videos\" endpoint and add the \"source\" parameter when you create\
            \ a new video.\n      \nconst video = await client.videos.uploadWithUploadToken(token,\
            \ file);\n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#uploadWithUploadToken
        - language: java
          code: |
            // First add the "video.api:java-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#uploadWithUploadToken
        - language: android
          code: |
            // First add the "video.api:android-api-client" maven dependency to your project
            // Documentation: https://github.com/apivideo/api.video-android-client/blob/main/docs/VideosApi.md#uploadWithUploadToken

            VideosApiStore.initialize("YOUR_API_KEY")
            // if you rather like to use the sandbox environment:
            // VideosApiStore.initialize("YOUR_SANDBOX_API_KEY", Environment.SANDBOX)

            val workManager = WorkManager.getInstance(context) // WorkManager comes from package "androidx.work:work-runtime"

            val token = "to1tcmSFHeYY5KzyhOqVKMKb" // The unique identifier for the token you want to use to upload a video.
            val file = File("/path/to/file") // The path to the video you want to upload.

            workManager.uploadWithUploadToken(token, file) // Dispatch the upload with the WorkManager
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#uploadWithUploadToken
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#pickThumbnail\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n \n$videoId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier of the video you\
            \ want to add a thumbnail to, where you use a section of your video as\
            \ the thumbnail.\n\n$video = $client->videos()->pickThumbnail($videoId,\
            \ (new \\ApiVideo\\Client\\Model\\VideoThumbnailPickPayload())\n    ->setTimecode(\"\
            00:01:00.000\")); // Frame in video to be used as a placeholder before\
            \ the video plays. "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#uploadWithUploadToken
  /live-streams:
    get:
      description: Get the list of livestreams on the workspace.
      operationId: GET_live-streams
      parameters:
      - description: The unique stream key that allows you to stream videos.
        example: dw-dew8-q6w9-k67w-1ws8
        explode: true
        in: query
        name: streamKey
        required: false
        schema:
          type: string
        style: form
      - description: You can filter live streams by their name or a part of their
          name.
        example: My Video
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: 'Allowed: createdAt, publishedAt, name. createdAt - the time
          a livestream was created using the specified streamKey. publishedAt - the
          time a livestream was published using the specified streamKey. name - the
          name of the livestream. If you choose one of the time based options, the
          time is presented in ISO-8601 format.'
        example: createdAt
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: 'Allowed: asc, desc. Ascending for date and time means that earlier
          values precede later ones. Descending means that later values preced earlier
          ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.'
        example: desc
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - liveStreamId: li400mYKSgQ6xs7taUeSaEKr
                      createdAt: 2020-01-31T10:17:47.000Z
                      updatedAt: 2020-03-09T13:19:43.000Z
                      streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332
                      restreams:
                      - name: YouTube
                        serverUrl: rtmp://youtube.broadcast.example.com
                        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385188
                      - name: Twitch
                        serverUrl: rtmp://twitch.broadcast.example.com
                        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385188
                      name: Live Stream From the browser
                      public: true
                      record: true
                      broadcasting: false
                      assets:
                        iframe: <iframe src="https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr"
                          width="100%" height="100%" frameborder="0" scrolling="no"
                          allowfullscreen=""></iframe>
                        player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
                        hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8
                        thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
                    - liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5
                      createdAt: 2020-07-29T10:45:35.000Z
                      updatedAt: 2020-07-29T10:45:35.000Z
                      streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
                      restreams:
                      - name: YouTube
                        serverUrl: rtmp://youtube.broadcast.example.com
                        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
                      - name: Twitch
                        serverUrl: rtmp://twitch.broadcast.example.com
                        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
                      name: Live From New York
                      public: true
                      record: true
                      broadcasting: false
                      assets:
                        iframe: <iframe src="https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5"
                          width="100%" height="100%" frameborder="0" scrolling="no"
                          allowfullscreen=""></iframe>
                        player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5
                        hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
                        thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg
                    pagination:
                      currentPage: 1
                      currentPageItems: 19
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 19
                      links:
                      - rel: self
                        uri: /live-streams?currentPage=1&pageSize=25
                      - rel: first
                        uri: /live-streams?currentPage=1&pageSize=25
                      - rel: last
                        uri: /live-streams?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/live-stream-list-response'
          description: Success
      security:
      - apiKey: []
      summary: List all live streams
      tags:
      - Live Streams
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-optional-object: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#list\n\
            \npackage main\n  \n  import (\n      \"context\"\n      \"fmt\"\n   \
            \   \"os\"\n      apivideosdk \"github.com/apivideo/api.video-go-client\"\
            \n  )\n  \n  func main() {\n      client := apivideosdk.ClientBuilder(\"\
            YOUR_API_KEY\").Build()\n      // if you rather like to use the sandbox\
            \ environment:\n      // client := apivideosdk.SandboxClientBuilder(\"\
            YOUR_SANDBOX_API_KEY\").Build()\n      req := apivideosdk.LiveStreamsApiListRequest{}\n\
            \      \n      req.StreamKey(\"30087931-229e-42cf-b5f9-e91bcc1f7332\"\
            ) // string | The unique stream key that allows you to stream videos.\n\
            \      req.Name(\"My Video\") // string | You can filter live streams\
            \ by their name or a part of their name.\n      req.SortBy(\"createdAt\"\
            ) // string | Allowed: createdAt, publishedAt, name. createdAt - the time\
            \ a livestream was created using the specified streamKey. publishedAt\
            \ - the time a livestream was published using the specified streamKey.\
            \ name - the name of the livestream. If you choose one of the time based\
            \ options, the time is presented in ISO-8601 format.\n      req.SortOrder(\"\
            desc\") // string | Allowed: asc, desc. Ascending for date and time means\
            \ that earlier values precede later ones. Descending means that later\
            \ values preced earlier ones. For title, it is 0-9 and A-Z ascending and\
            \ Z-A, 9-0 descending.\n      req.CurrentPage(int32(2)) // int32 | Choose\
            \ the number of search results to return per page. Minimum value: 1 (default\
            \ to 1)\n      req.PageSize(int32(30)) // int32 | Results per page. Allowed\
            \ values 1-100, default is 25. (default to 25)\n  \n      res, err :=\
            \ client.LiveStreams.List(req)\n      \n  \n      if err != nil {\n  \
            \        fmt.Fprintf(os.Stderr, \"Error when calling `LiveStreams.List``:\
            \ %v\\\n\", err)\n      }\n      // response from `List`: LiveStreamListResponse\n\
            \      fmt.Fprintf(os.Stdout, \"Response from `LiveStreams.List`: %v\\\
            \n\", res)\n  }\n"
        - language: node
          code: |
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#list

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            // retrieve the first page of all livestreams
            const liveStreams = await client.liveStreams.list({ });

            // retrieve the livestreams having a given name
            const liveStreams2 = await client.liveStreams.list({
              name: 'My livestream'
            });

            // retrieve the livestreams having a given stream key
            const liveStreams2 = await client.liveStreams.list({
              streamKey:'30087931-229e-42cf-b5f9-e91bcc1f7332'
            });

            // retrieve the second page of 30 items sorted by name desc
            const liveStreams3 = await client.liveStreams.list({
              sortBy: 'name',
              sortOrder: 'desc',
              currentPage: 2,
              pageSize: 30
            });
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#list

            import apivideo
            from apivideo.api import live_streams_api
            from apivideo.model.live_stream import LiveStream
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = live_streams_api.LiveStreamsApi(api_client)
                live_stream_id = "li400mYKSgQ6xs7taUeSaEKr" # str | The unique ID for the live stream you want to watch.

                # example passing only required values which don't have defaults set
                try:
                    # Show live stream
                    api_response = api_instance.get(live_stream_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling LiveStreamsApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String streamKey = \"30087931-229e-42cf-b5f9-e91bcc1f7332\"\
            ; // The unique stream key that allows you to stream videos.\n    String\
            \ name = \"My Video\"; // You can filter live streams by their name or\
            \ a part of their name.\n    String sortBy = \"createdAt\"; // Allowed:\
            \ createdAt, publishedAt, name. createdAt - the time a livestream was\
            \ created using the specified streamKey. publishedAt - the time a livestream\
            \ was published using the specified streamKey. name - the name of the\
            \ livestream. If you choose one of the time based options, the time is\
            \ presented in ISO-8601 format.\n    String sortOrder = \"desc\"; // Allowed:\
            \ asc, desc. Ascending for date and time means that earlier values precede\
            \ later ones. Descending means that later values preced earlier ones.\
            \ For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.\n  \
            \  Integer currentPage = 1; // Choose the number of search results to\
            \ return per page. Minimum value: 1\n    Integer pageSize = 25; // Results\
            \ per page. Allowed values 1-100, default is 25.\n\n    try {\n      Page<LiveStream>\
            \ result = apiInstance.list()\n            .streamKey(streamKey)\n   \
            \         .name(name)\n            .sortBy(sortBy)\n            .sortOrder(sortOrder)\n\
            \            .currentPage(currentPage)\n            .pageSize(pageSize)\n\
            \            .execute();\n      System.out.println(result);\n    } catch\
            \ (ApiException e) {\n      System.err.println(\"Exception when calling\
            \ LiveStreamsApi#list\");\n      System.err.println(\"Status code: \"\
            \ + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#list

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream you want to watch.
                        var apiLiveStreamsInstance = apiInstance.LiveStreams();
                        try
                        {
                            // Show live stream
                            LiveStream result = apiLiveStreamsInstance.get(liveStreamId);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling LiveStreamsApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n// retrieve\
            \ the first page of all livestreams\n$liveStreams = $client->liveStreams()->list();\n\
            \n// retrieve the livestreams having a given name\n$liveStreams2 = $client->liveStreams()->list(array(\n\
            \    'name' => 'My livestream'\n));\n\n// retrieve the livestreams having\
            \ a given stream key\n$liveStreams2 = $client->liveStreams()->list(array(\n\
            \  'streamKey' => '30087931-229e-42cf-b5f9-e91bcc1f7332'\n));\n\n// retrieve\
            \ the second page of 30 items sorted by name desc\n$liveStreams3 = $client->liveStreams()->list(array(\n\
            \    'sortBy' => 'name',\n    'sortOrder' => 'desc',\n    'currentPage'\
            \ => 2,\n    'pageSize' => 30\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#list
    post:
      description: Creates a livestream object.
      operationId: POST_live-streams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/live-stream-creation-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                live-stream-response-example:
                  $ref: '#/components/examples/live-stream-response-example'
              schema:
                $ref: '#/components/schemas/live-stream'
          description: Success
        "400":
          content:
            application/json:
              examples:
                Empty field in restreams array:
                  description: This error occurs when a field is empty in the `restreams`
                    array in your request.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value should not be blank.
                    name: restreams[0][name]
                Missing app name in serverUrl:
                  description: This error occurs when the rtmp app name is missing
                    from `serverURL` in the `restreams` array.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: 'Missing app name: rtmp://[host]/[app name].'
                    name: restreams[0][serverUrl]
                Incorrect URL in serverUrl:
                  description: This error occurs when the URL you set in `serverURL`
                    is not `rtmp`.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: 'RTMP URL should have the following format: rtmp://[host]/[app
                      name].'
                    name: restreams[0][serverUrl]
                Too many restream destinations:
                  description: This error occurs when you set more than 5 restream
                    destinations.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This collection should contain 5 elements or less.
                    name: restreams
                null field in the restreams array:
                  description: This error occurs when a field is sent as `null` in
                    the `restreams` array in your request.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value should not be null.
                    name: restreams[0][name]
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Create live stream
      tags:
      - Live Streams
      x-client-action: create
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#create\n\
            \n                  \n// instantiate the client \nclient := apivideosdk.ClientBuilder(\"\
            YOUR_API_KEY\").Build()\n\nliveStreamCreationPayload := apivideosdk.LiveStreamCreationPayload{}\n\
            liveStreamCreationPayload.SetName(\"My Live Stream Video\") // Add a name\
            \ for your live stream here.\nliveStreamCreationPayload.SetRecord(false)\
            \ // Whether you are recording or not. True for record, false for not\
            \ record.\nliveStreamCreationPayload.SetPublic(true) // Whether your video\
            \ can be viewed by everyone, or requires authentication to see it.\nliveStreamCreationPayload.SetPlayerId(\"\
            pl4f4ferf5erfr5zed4fsdd\") // The unique identifier for the player.\n\
            liveStreamCreatePayload.SetRestreams([]RestreamsRequestObject{{Name: \"\
            My RTMP server\", ServerUrl: \"rtmp://my.broadcast.example.com/app\",\
            \ StreamKey: \"dw-dew8-q6w9-k67w-1ws8\"}}) // Use this parameter to add,\
            \ edit, or remove RTMP services where you want to restream a live stream.\
            \ The list can only contain up to 5 destinations.\n\nres, err := client.LiveStreams.Create(liveStreamCreationPayload)\n\
            \nif err != nil {\n    fmt.Fprintf(os.Stderr, \"Error when calling `LiveStreams.Create``:\
            \ %v\", err)\n}\n\nfmt.Fprintf(os.Stdout, \"Response from `LiveStreams.Create`:\
            \ %v\", res)\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#create\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamCreationPayload = {\n    record: false, // Whether you\
            \ are recording or not. True for record, false for not record.\n    name:\
            \ \"My Live Stream\", // Add a name for your live stream here.\n    _public:\
            \ true, // Whether your video can be viewed by everyone, or requires authentication\
            \ to see it. \n    playerId: \"pl4f4ferf5erfr5zed4fsdd\", // The unique\
            \ identifier for the player.\n    restreams: [ // Use this parameter to\
            \ add, edit, or remove RTMP services where you want to restream a live\
            \ stream. The list can only contain up to 5 destinations.\n      {\n \
            \       streamKey: \"dw-dew8-q6w9-k67w-1ws8\",\n        serverUrl: \"\
            rtmp://my.broadcast.example.com/app\",\n        name: \"My RTMP server\"\
            ,\n      },\n    ],\n}; \n\nconst liveStream = await client.liveStreams.create(liveStreamCreationPayload);\n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#create\n\
            \nfrom apivideo.api.live_streams_api import LiveStreamsApi\nfrom apivideo.model.live_stream_creation_payload\
            \ import LiveStreamCreationPayload\nfrom apivideo import AuthenticatedApiClient,\
            \ ApiException\n\nwith AuthenticatedApiClient(\"YOUR_API_KEY\") as api_client:\n\
            \    live_stream_creation_payload = LiveStreamCreationPayload(\n     \
            \   record=False,\n        name=\"My Live Stream Video\",\n        public=True,\n\
            \        player_id=\"pl4f4ferf5erfr5zed4fsdd\",\n        restreams=[\n\
            \            RestreamsRequestObject(\n                name=\"My RTMP server\"\
            ,\n                server_url=\"rtmp://my.broadcast.example.com/app\"\
            ,\n                stream_key=\"dw-dew8-q6w9-k67w-1ws8\",\n          \
            \  ),\n        ],\n    ) # LiveStreamCreationPayload | \n\n    try:\n\
            \        live_stream = LiveStreamsApi(api_client).create(live_stream_creation_payload)\n\
            \        print(live_stream)\n    except ApiException as e:\n        print(\"\
            Exception when calling LiveStreamsApi->create: %s\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#create\n\
            \n                  \n// instantiate the client \nApiVideoClient client\
            \ = new ApiVideoClient(\"YOUR_API_KEY\");\n\nLiveStreamCreationPayload\
            \ liveStreamCreationPayload = new LiveStreamCreationPayload(); \nliveStreamCreationPayload.setRecord(true);\
            \ // Whether you are recording or not. True for record, false for not\
            \ record.\nliveStreamCreationPayload.setName(\"My Live Stream Video\"\
            ); // Add a name for your live stream here.\nliveStreamCreationPayload.setPublic();\
            \ // Whether your video can be viewed by everyone, or requires authentication\
            \ to see it.\nliveStreamCreationPayload.setPlayerId(\"pl4f4ferf5erfr5zed4fsdd\"\
            ); // The unique identifier for the player.\nliveStreamCreationPayload.setRestreams(Collections.singletonList(new\
            \ RestreamsRequestObject() // Use this parameter to add, edit, or remove\
            \ RTMP services where you want to restream a live stream. The list can\
            \ only contain up to 5 destinations.\n      .name(\"My RTMP server\")\n\
            \      .serverUrl(\"rtmp://my.broadcast.example.com/app\")\n      .streamKey(\"\
            dw-dew8-q6w9-k67w-1ws8\")));\n\n\ntry {\n    LiveStream liveStream = client.liveStreams().create(liveStreamCreationPayload);\n\
            \    System.out.println(liveStream);\n} catch (ApiException e) {\n   \
            \ e.printStackTrace();\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#create\n\
            \n                  \nvar apiVideoClient = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n\nvar liveStreamCreationPayload = new LiveStreamCreationPayload()\n\
            {\n    record = false,\n    name = \"My Live Stream Video\",\n    _public\
            \ = true,\n    playerid = \"pl4f4ferf5erfr5zed4fsdd\",\n    restreams\
            \ = new List<RestreamsRequestObject>(){\n        new RestreamsRequestObject(){name=\"\
            My RTMP server\", streamKey=\"dw-dew8-q6w9-k67w-1ws8\", serverUrl=\"rtmp://my.broadcast.example.com/app\"\
            \ }\n    }\n};\n\ntry\n{\n    var liveStream = apiVideoClient.LiveStreams().create(liveStreamCreationPayload);\n\
            }\ncatch (ApiException e)\n{\n    // Manage create error here\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#create\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n);\n\n$liveStream\
            \ = $client->liveStreams()->create((new \\ApiVideo\\Client\\Model\\LiveStreamCreationPayload())\n\
            \    ->setRecord(false) // Whether you are recording or not. True for\
            \ record, false for not record.\n    ->setName(\"My Live Stream Video\"\
            ) // Add a name for your live stream here.\n    ->setPublic(true) // Whether\
            \ your video can be viewed by everyone, or requires authentication to\
            \ see it. \n    ->setPlayerId(\"pl4f4ferf5erfr5zed4fsdd\")); // The unique\
            \ identifier for the player.\n    ->setRestreams(array(  // Use this parameter\
            \ to add, edit, or remove RTMP services where you want to restream a live\
            \ stream. The list can only contain up to 5 destinations.\n        new\
            \ RestreamsRequestObject(['name' => 'My RTMP server', 'serverUrl' => 'rtmp://my.broadcast.example.com/app',\
            \ 'streamKey' => 'dw-dew8-q6w9-k67w-1ws8'])));\n"
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#create

            ApiVideoClient.apiKey = "YOUR_API_KEY"

            let liveStreamCreationPayload = LiveStreamCreationPayload(
                name: "My Live Stream Video",
                record: false,
                _public: true,
                playerId: "pl4f4ferf5erfr5zed4fsdd",
                restreams: [RestreamsRequestObject(
                    name: "My RTMP server",
                    serverUrl: "rtmp://my.broadcast.example.com/app",
                    streamKey: "dw-dew8-q6w9-k67w-1ws8"
                )]
            )

            LiveStreamsAPI.create(liveStreamCreationPayload: liveStreamCreationPayload) { liveStream, error in
               if let liveStream = liveStream  {
                   // Do something with the livestream
               }
               if let error = error {
                  // Manage create error here
               }
            }
  /live-streams/{liveStreamId}:
    delete:
      description: If you do not need a live stream any longer, you can send a request
        to delete it. All you need is the liveStreamId.
      operationId: DELETE_live-streams-liveStreamId
      parameters:
      - description: The unique ID for the live stream that you want to remove.
        example: li400mYKSgQ6xs7taUeSaEKr
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
      security:
      - apiKey: []
      summary: Delete a live stream
      tags:
      - Live Streams
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#delete\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    liveStreamId := \"li400mYKSgQ6xs7taUeSaEKr\" // string\
            \ | The unique ID for the live stream that you want to remove.\n\n   \
            \ \n    err := client.LiveStreams.Delete(liveStreamId)\n\n    if err !=\
            \ nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `LiveStreams.Delete``:\
            \ %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique identifier\
            \ of the live stream whose thumbnail you want to delete.\n\nconst liveStream\
            \ = await client.liveStreams.deleteThumbnail(liveStreamId);\n    "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#delete

            import apivideo
            from apivideo.api import live_streams_api
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = live_streams_api.LiveStreamsApi(api_client)
                live_stream_id = "li400mYKSgQ6xs7taUeSaEKr" # str | The unique ID for the live stream that you want to remove.

                # example passing only required values which don't have defaults set
                try:
                    # Delete a live stream
                    api_instance.delete(live_stream_id)
                except apivideo.ApiException as e:
                    print("Exception when calling LiveStreamsApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#delete\n\
            \n  import video.api.client.ApiVideoClient;\n  import video.api.client.api.ApiException;\n\
            \  import video.api.client.api.models.*;\n  import video.api.client.api.clients.LiveStreamsApi;\n\
            \  import java.util.*;\n  \n  public class Example {\n    public static\
            \ void main(String[] args) {\n      ApiVideoClient client = new ApiVideoClient(\"\
            YOUR_API_KEY\");\n      // if you rather like to use the sandbox environment:\n\
            \      // ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n  \n      LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n      \n      String liveStreamId = \"li400mYKSgQ6xs7taUeSaEKr\"\
            ; // The unique ID for the live stream that you want to remove.\n  \n\
            \      try {\n        apiInstance.delete(liveStreamId);\n      } catch\
            \ (ApiException e) {\n        System.err.println(\"Exception when calling\
            \ LiveStreamsApi#delete\");\n        System.err.println(\"Status code:\
            \ \" + e.getCode());\n        System.err.println(\"Reason: \" + e.getMessage());\n\
            \        System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \        e.printStackTrace();\n      }\n    }\n  }\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#delete

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream that you want to remove.
                        var apiLiveStreamsInstance = apiInstance.LiveStreams();
                        try
                        {
                            // Delete a live stream
                            apiLiveStreamsInstance.delete(liveStreamId);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling LiveStreamsApi.delete: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$liveStreamId\
            \ = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique identifier of the live stream\
            \ whose thumbnail you want to delete.\n$liveStream = $client->liveStreams()->deleteThumbnail($liveStreamId);\
            \ \n"
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#delete
    get:
      description: Get a livestream by id.
      operationId: GET_live-streams-liveStreamId
      parameters:
      - description: The unique ID for the live stream you want to watch.
        example: li400mYKSgQ6xs7taUeSaEKr
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                live-stream-response-example:
                  $ref: '#/components/examples/live-stream-response-example'
              schema:
                $ref: '#/components/schemas/live-stream'
          description: Success
      security:
      - apiKey: []
      summary: Retrieve live stream
      tags:
      - Live Streams
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    liveStreamId := \"li400mYKSgQ6xs7taUeSaEKr\" // string\
            \ | The unique ID for the live stream you want to watch.\n\n    \n   \
            \ res, err := client.LiveStreams.Get(liveStreamId)\n\n    if err != nil\
            \ {\n        fmt.Fprintf(os.Stderr, \"Error when calling `LiveStreams.Get``:\
            \ %v\\\n\", err)\n    }\n    // response from `Get`: LiveStream\n    fmt.Fprintf(os.Stdout,\
            \ \"Response from `LiveStreams.Get`: %v\\\n\", res)\n}\n"
        - language: node
          code: |
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#get

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream you want to retrieve.

            const liveStream = await client.liveStreams.get(liveStreamId);
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#get

            import apivideo
            from apivideo.api import live_streams_api
            from apivideo.model.live_stream import LiveStream
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = live_streams_api.LiveStreamsApi(api_client)
                live_stream_id = "li400mYKSgQ6xs7taUeSaEKr" # str | The unique ID for the live stream you want to watch.

                # example passing only required values which don't have defaults set
                try:
                    # Show live stream
                    api_response = api_instance.get(live_stream_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling LiveStreamsApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String liveStreamId = \"li400mYKSgQ6xs7taUeSaEKr\"\
            ; // The unique ID for the live stream you want to watch.\n\n    try {\n\
            \      LiveStream result = apiInstance.get(liveStreamId);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling LiveStreamsApi#get\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String liveStreamId = \"li400mYKSgQ6xs7taUeSaEKr\"\
            ; // The unique ID for the live stream you want to watch.\n\n    try {\n\
            \      LiveStream result = apiInstance.get(liveStreamId);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling LiveStreamsApi#get\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#get

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream you want to watch.
                        var apiLiveStreamsInstance = apiInstance.LiveStreams();
                        try
                        {
                            // Show live stream
                            LiveStream result = apiLiveStreamsInstance.get(liveStreamId);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling LiveStreamsApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#get\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$liveStreamId\
            \ = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream you\
            \ want to retrieve.\n$liveStream = $client->liveStreams()->get($liveStreamId);\n"
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#get
    patch:
      description: Updates the livestream object.
      operationId: PATCH_live-streams-liveStreamId
      parameters:
      - description: The unique ID for the live stream that you want to update information
          for such as player details, or whether you want the recording on or off.
        example: li400mYKSgQ6xs7taUeSaEKr
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/live-stream-update-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                live-stream-response-example:
                  $ref: '#/components/examples/live-stream-response-example'
              schema:
                $ref: '#/components/schemas/live-stream'
          description: Success
        "400":
          content:
            application/json:
              examples:
                Empty field in restreams array:
                  description: This error occurs when a field is empty in the `restreams`
                    array in your request.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value should not be blank.
                    name: restreams[0][name]
                Missing app name in serverUrl:
                  description: This error occurs when the rtmp app name is missing
                    from `serverURL` in the `restreams` array.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: 'Missing app name: rtmp://[host]/[app name].'
                    name: restreams[0][serverUrl]
                Incorrect URL in serverUrl:
                  description: This error occurs when the URL you set in `serverURL`
                    is not `rtmp`.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: 'RTMP URL should have the following format: rtmp://[host]/[app
                      name].'
                    name: restreams[0][serverUrl]
                Too many restream destinations:
                  description: This error occurs when you set more than 5 restream
                    destinations.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This collection should contain 5 elements or less.
                    name: restreams
                null field in the restreams array:
                  description: This error occurs when a field is sent as `null` in
                    the `restreams` array in your request.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value should not be null.
                    name: restreams[0][name]
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Update a live stream
      tags:
      - Live Streams
      x-client-action: update
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#update\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    liveStreamId := \"li400mYKSgQ6xs7taUeSaEKr\" // string\
            \ | The unique ID for the live stream that you want to update information\
            \ for such as player details, or whether you want the recording on or\
            \ off.\n    liveStreamUpdatePayload := apivideosdk.LiveStreamUpdatePayload{}\n\
            \    liveStreamUpdatePayload.SetName(\"My Live Stream Video\") // The\
            \ name you want to use for your live stream.\n    liveStreamUpdatePayload.SetRecord(false)\
            \ // Use this to indicate whether you want the recording on or off. On\
            \ is true, off is false.\n    liveStreamUpdatePayload.SetPublic(true)\
            \ // Whether your video can be viewed by everyone, or requires authentication\
            \ to see it.\n    liveStreamUpdatePayload.SetPlayerId(\"pl4f4ferf5erfr5zed4fsdd\"\
            ) // The unique ID for the player associated with a live stream that you\
            \ want to update.\n    liveStreamUpdatePayload.SetRestreams([]RestreamsRequestObject{{Name:\
            \ \"My RTMP server\", ServerUrl: \"rtmp://my.broadcast.example.com/app\"\
            , StreamKey: \"dw-dew8-q6w9-k67w-1ws8\"}}) // Use this parameter to add,\
            \ edit, or remove RTMP services where you want to restream a live stream.\
            \ The list can only contain up to 5 destinations. This operation updates\
            \ all restream destinations in the same request. If you do not want to\
            \ modify an existing restream destination, you need to include it in your\
            \ request, otherwise it is removed.\n\n    res, err := client.LiveStreams.Update(liveStreamId,\
            \ liveStreamUpdatePayload)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `LiveStreams.Update``: %v\\\n\", err)\n    }\n\
            \    // response from `Update`: LiveStream\n    fmt.Fprintf(os.Stdout,\
            \ \"Response from `LiveStreams.Update`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#update\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for\
            \ the live stream that you want to update information for such as player\
            \ details, or whether you want the recording on or off.\nconst liveStreamUpdatePayload\
            \ = {\n  name: \"My Live Stream Video\", // The name you want to use for\
            \ your live stream.\n  _public: true, // Whether your video can be viewed\
            \ by everyone, or requires authentication to see it. \n  record: true,\
            \ // Use this to indicate whether you want the recording on or off. On\
            \ is true, off is false.\n  playerId: \"pl45KFKdlddgk654dspkze\", // The\
            \ unique ID for the player associated with a live stream that you want\
            \ to update.\n  restreams: [ // Use this parameter to add, edit, or remove\
            \ RTMP services where you want to restream a live stream. The list can\
            \ only contain up to 5 destinations.\n    {\n      streamKey: \"dw-dew8-q6w9-k67w-1ws8\"\
            ,\n      serverUrl: \"rtmp://my.broadcast.example.com/app\",\n      name:\
            \ \"My RTMP server\",\n    },\n  ],\n};\n\nconst liveStream = await client.liveStreams.update(liveStreamId,\
            \ liveStreamUpdatePayload); \n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#update\n\
            \nimport apivideo\nfrom apivideo.api import live_streams_api\nfrom apivideo.model.bad_request\
            \ import BadRequest\nfrom apivideo.model.live_stream_update_payload import\
            \ LiveStreamUpdatePayload\nfrom apivideo.model.live_stream import LiveStream\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = live_streams_api.LiveStreamsApi(api_client)\n\
            \    live_stream_id = \"li400mYKSgQ6xs7taUeSaEKr\" # str | The unique\
            \ ID for the live stream that you want to update information for such\
            \ as player details, or whether you want the recording on or off.\n  \
            \  live_stream_update_payload = LiveStreamUpdatePayload(\n        name=\"\
            My Live Stream Video\",\n        public=True,\n        record=True,\n\
            \        player_id=\"pl45KFKdlddgk654dspkze\",\n        restreams=[\n\
            \            RestreamsRequestObject(\n                name=\"My RTMP server\"\
            ,\n                server_url=\"rtmp://my.broadcast.example.com\",\n \
            \               stream_key=\"dw-dew8-q6w9-k67w-1ws8\",\n            ),\n\
            \        ],\n    ) # LiveStreamUpdatePayload | \n\n    # example passing\
            \ only required values which don't have defaults set\n    try:\n     \
            \   # Update a live stream\n        api_response = api_instance.update(live_stream_id,\
            \ live_stream_update_payload)\n        pprint(api_response)\n    except\
            \ apivideo.ApiException as e:\n        print(\"Exception when calling\
            \ LiveStreamsApi->update: %s\\\n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#update\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String liveStreamId = \"li400mYKSgQ6xs7taUeSaEKr\"\
            ; // The unique ID for the live stream that you want to update information\
            \ for such as player details, or whether you want the recording on or\
            \ off.\n    LiveStreamUpdatePayload liveStreamUpdatePayload = new LiveStreamUpdatePayload();\
            \ // \n    liveStreamUpdatePayload.setName(\"My Live Stream Video\");\
            \ // The name you want to use for your live stream.\n    liveStreamUpdatePayload.setPublic();\
            \ // Whether your video can be viewed by everyone, or requires authentication\
            \ to see it. A setting of false will require a unique token for each view.\n\
            \    liveStreamUpdatePayload.setRecord(true); // Use this to indicate\
            \ whether you want the recording on or off. On is true, off is false.\n\
            \    liveStreamUpdatePayload.setPlayerId(\"pl45KFKdlddgk654dspkze\");\
            \ // The unique ID for the player associated with a live stream that you\
            \ want to update.\n    liveStreamUpdatePayload.setRestreams(Collections.singletonList(new\
            \ RestreamsRequestObject() // Use this parameter to add, edit, or remove\
            \ RTMP services where you want to restream a live stream. The list can\
            \ only contain up to 5 destinations. This operation updates all restream\
            \ destinations in the same request. If you do not want to modify an existing\
            \ restream destination, you need to include it in your request, otherwise\
            \ it is removed.\n          .name(\"My RTMP server\")\n          .serverUrl(\"\
            rtmp://my.broadcast.example.com/app\")\n          .streamKey(\"dw-dew8-q6w9-k67w-1ws8\"\
            )));\n\n\n    try {\n      LiveStream result = apiInstance.update(liveStreamId,\
            \ liveStreamUpdatePayload);\n      System.out.println(result);\n    }\
            \ catch (ApiException e) {\n      System.err.println(\"Exception when\
            \ calling LiveStreamsApi#update\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#update\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class updateExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var liveStreamId\
            \ = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live\
            \ stream that you want to update information for such as player details,\
            \ or whether you want the recording on or off.\n            var liveStreamUpdatePayload\
            \ = new LiveStreamUpdatePayload(); // LiveStreamUpdatePayload | \n   \
            \         var apiLiveStreamsInstance = apiInstance.LiveStreams();\n  \
            \          try\n            {\n                // Update a live stream\n\
            \                LiveStream result = apiLiveStreamsInstance.update(liveStreamId,\
            \ liveStreamUpdatePayload);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling LiveStreamsApi.update:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#update\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$liveStreamId\
            \ = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream that\
            \ you want to update information for such as player details, or whether\
            \ you want the recording on or off.\n\n$liveStreamUpdatePayload = (new\
            \ \\ApiVideo\\Client\\Model\\LiveStreamUpdatePayload())\n    ->setName(\"\
            My Live Stream Video\") // The name you want to use for your live stream.)\n\
            \    ->setPublic(true) // Whether your video can be viewed by everyone,\
            \ or requires authentication to see it. )\n    ->setRecord(true) // Use\
            \ this to indicate whether you want the recording on or off. On is true,\
            \ off is false.)\n    ->setPlayerId(\"pl45KFKdlddgk654dspkze\") // The\
            \ unique ID for the player associated with a live stream that you want\
            \ to update.)\n    ->setRestreams(array(\n      new RestreamsRequestObject(['name'\
            \ => 'My RTMP server', 'serverUrl' => 'rtmp://my.broadcast.example.com/app',\
            \ 'streamKey' => 'dw-dew8-q6w9-k67w-1ws8'])));\n\n\n$liveStream = $client->liveStreams()->update($liveStreamId,\
            \ $liveStreamUpdatePayload); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#update

            ApiVideoClient.apiKey = "YOUR_API_KEY"

            let liveStreamId = "li400mYKSgQ6xs7taUeSaEKr" // String | The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
            let liveStreamUpdatePayload = LiveStreamUpdatePayload(
                name: "My Live Stream Video",
                record: false,
                _public: true,
                playerId: "pl4f4ferf5erfr5zed4fsdd",
                restreams: [RestreamsRequestObject(
                    name: "My RTMP server",
                    serverUrl: "rtmp://my.broadcast.example.com/app",
                    streamKey: "dw-dew8-q6w9-k67w-1ws8"
                )]
            )

            LiveStreamsAPI.update(liveStreamId: liveStreamId, liveStreamUpdatePayload: liveStreamUpdatePayload) { liveStream, error in
               if let liveStream = liveStream  {
                   // Do something with the livestream
               }
               if let error = error {
                  // Manage update error here
               }
            }
  /live-streams/{liveStreamId}/thumbnail:
    delete:
      description: Send the unique identifier for a live stream to delete its thumbnail.
      operationId: DELETE_live-streams-liveStreamId-thumbnail
      parameters:
      - description: The unique identifier of the live stream whose thumbnail you
          want to delete.
        example: li400mYKSgQ6xs7taUeSaEKr
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live-stream'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: liveStreamId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a thumbnail
      tags:
      - Live Streams
      x-client-action: deleteThumbnail
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#deleteThumbnail\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    liveStreamId := \"li400mYKSgQ6xs7taUeSaEKr\" // string\
            \ | The unique identifier for the live stream you want to delete. \n\n\
            \    \n    res, err := client.LiveStreams.DeleteThumbnail(liveStreamId)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `LiveStreams.DeleteThumbnail``: %v\\\n\", err)\n    }\n    // response\
            \ from `DeleteThumbnail`: LiveStream\n    fmt.Fprintf(os.Stdout, \"Response\
            \ from `LiveStreams.DeleteThumbnail`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#deleteThumbnail\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for\
            \ the live stream whose thumbnail you want to delete.\n\nconst liveStream\
            \ = await client.liveStreams.deleteThumbnail(liveStreamId); "
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#deleteThumbnail\n\
            \nimport apivideo\nfrom apivideo.api import live_streams_api\nfrom apivideo.model.not_found\
            \ import NotFound\nfrom apivideo.model.live_stream import LiveStream\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = live_streams_api.LiveStreamsApi(api_client)\n\
            \    live_stream_id = \"li400mYKSgQ6xs7taUeSaEKr\" # str | The unique\
            \ identifier for the live stream you want to delete. \n\n    # example\
            \ passing only required values which don't have defaults set\n    try:\n\
            \        # Delete a thumbnail\n        api_response = api_instance.delete_thumbnail(live_stream_id)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling LiveStreamsApi->delete_thumbnail:\
            \ %s\\\n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#deleteThumbnail\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String liveStreamId = \"li400mYKSgQ6xs7taUeSaEKr\"\
            ; // The unique identifier for the live stream you want to delete. \n\n\
            \    try {\n      LiveStream result = apiInstance.deleteThumbnail(liveStreamId);\n\
            \      System.out.println(result);\n    } catch (ApiException e) {\n \
            \     System.err.println(\"Exception when calling LiveStreamsApi#deleteThumbnail\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#deleteThumbnail\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class deleteThumbnailExample\n    {\n        public static\
            \ void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var liveStreamId\
            \ = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique identifier for the\
            \ live stream you want to delete. \n            var apiLiveStreamsInstance\
            \ = apiInstance.LiveStreams();\n            try\n            {\n     \
            \           // Delete a thumbnail\n                LiveStream result =\
            \ apiLiveStreamsInstance.deleteThumbnail(liveStreamId);\n            \
            \    Debug.WriteLine(result);\n            }\n            catch (ApiException\
            \  e)\n            {\n                Debug.Print(\"Exception when calling\
            \ LiveStreamsApi.deleteThumbnail: \" + e.Message );\n                Debug.Print(\"\
            Status Code: \"+ e.ErrorCode);\n                Debug.Print(e.StackTrace);\n\
            \            }\n        }\n    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#get\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$liveStreamId\
            \ = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream you\
            \ want to watch.\n$liveStream = $client->liveStreams()->get(liveStreamId); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#deleteThumbnail
    post:
      description: Upload the thumbnail for the livestream.
      operationId: POST_live-streams-liveStreamId-thumbnail
      parameters:
      - description: The unique ID for the live stream you want to upload.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/live-stream-thumbnail-upload-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live-stream'
          description: Created
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    status: 400
                    type: https://docs.api.video/docs/fileextension
                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.
                    name: file
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: liveStreamId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a thumbnail
      tags:
      - Live Streams
      x-client-action: uploadThumbnail
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/LiveStreamsApi.md#uploadThumbnail\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    liveStreamId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string\
            \ | The unique ID for the live stream you want to upload.\n    file :=\
            \ os.NewFile(1234, \"some_file\") // *os.File | The image to be added\
            \ as a thumbnail.\n\n    \n    res, err := client.LiveStreams.UploadThumbnailFile(liveStreamId,\
            \ file)\n\n    // you can also use a Reader instead of a File:\n    //\
            \ client.LiveStreams.UploadThumbnail(liveStreamId, fileName, fileReader)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `LiveStreams.UploadThumbnail``: %v\\\n\", err)\n    }\n    // response\
            \ from `UploadThumbnail`: LiveStream\n    fmt.Fprintf(os.Stdout, \"Response\
            \ from `LiveStreams.UploadThumbnail`: %v\\\n\", res)\n}\n"
        - language: node
          code: |
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/LiveStreamsApi.md#uploadThumbnail

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            const liveStreamId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique ID for the live stream you want to upload.
            const file = './thumbnail.jpg'; // The image to be added as a thumbnail.

            const livestream = await client.liveStreams.uploadThumbnail(liveStreamId, file);
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/LiveStreamsApi.md#uploadThumbnail

            import apivideo
            from apivideo.api import live_streams_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from apivideo.model.live_stream import LiveStream
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = live_streams_api.LiveStreamsApi(api_client)
                live_stream_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique ID for the live stream you want to upload.
                file = open('/path/to/file', 'rb') # file_type | The image to be added as a thumbnail.

                # example passing only required values which don't have defaults set
                try:
                    # Upload a thumbnail
                    api_response = api_instance.upload_thumbnail(live_stream_id, file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling LiveStreamsApi->upload_thumbnail: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/LiveStreamsApi.md#uploadThumbnail\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.LiveStreamsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    LiveStreamsApi apiInstance\
            \ = client.liveStreams();\n    \n    String liveStreamId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique ID for the live stream you want to upload.\n    File file\
            \ = new File(\"/path/to/file\"); // The image to be added as a thumbnail.\n\
            \n    try {\n      LiveStream result = apiInstance.uploadThumbnail(liveStreamId,\
            \ file);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling LiveStreamsApi#uploadThumbnail\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/LiveStreamsApi.md#uploadThumbnail

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class uploadThumbnailExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var liveStreamId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique ID for the live stream you want to upload.
                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The image to be added as a thumbnail.
                        var apiLiveStreamsInstance = apiInstance.LiveStreams();
                        try
                        {
                            // Upload a thumbnail
                            LiveStream result = apiLiveStreamsInstance.uploadThumbnail(liveStreamId, file);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling LiveStreamsApi.uploadThumbnail: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/LiveStreamsApi.md#uploadThumbnail\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$client = new \\ApiVideo\\\
            Client\\Client(\n    'https://ws.api.video',\n    'YOUR_API_KEY',\n  \
            \  new \\Symfony\\Component\\HttpClient\\Psr18Client()\n); \n\n$liveStreamId\
            \ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique ID for the live stream you\
            \ want to upload.\n$file = new SplFileObject(__DIR__ . './thumbnail.jpg');\
            \ // The image to be added as a thumbnail.\n\n$livestream = $client->liveStreams()->uploadThumbnail($liveStreamId,\
            \ $file); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/LiveStreamsAPI.md#uploadThumbnail
  /videos/{videoId}/captions/{language}:
    delete:
      description: Delete a caption in a specific language by by video id.
      operationId: DELETE_videos-videoId-captions-language
      parameters:
      - description: The unique identifier for the video you want to delete a caption
          from.
        example: vi4k0jvEUuaTdRAEjQ4Prklgc
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a caption
      tags:
      - Captions
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/CaptionsApi.md#delete\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Prklgc\" // string | The\
            \ unique identifier for the video you want to delete a caption from.\n\
            \    language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    \n    err := client.Captions.Delete(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Captions.Delete``: %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/CaptionsApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklgc'; // The unique identifier\
            \ for the video you want to delete a caption from.\nconst language = 'en';\
            \ // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\nawait client.captions.delete(videoId, language);\n\
            \ "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/CaptionsApi.md#delete

            import apivideo
            from apivideo.api import captions_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = captions_api.CaptionsApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Prklgc" # str | The unique identifier for the video you want to delete a caption from.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.

                # example passing only required values which don't have defaults set
                try:
                    # Delete a caption
                    api_instance.delete(video_id, language)
                except apivideo.ApiException as e:
                    print("Exception when calling CaptionsApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/CaptionsApi.md#delete\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.CaptionsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    CaptionsApi apiInstance\
            \ = client.captions();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklgc\"\
            ; // The unique identifier for the video you want to delete a caption\
            \ from.\n    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    try {\n      apiInstance.delete(videoId,\
            \ language);\n    } catch (ApiException e) {\n      System.err.println(\"\
            Exception when calling CaptionsApi#delete\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/CaptionsApi.md#delete

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklgc;  // string | The unique identifier for the video you want to delete a caption from.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                        var apiCaptionsInstance = apiInstance.Captions();
                        try
                        {
                            // Delete a caption
                            apiCaptionsInstance.delete(videoId, language);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling CaptionsApi.delete: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/CaptionsApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklgc';\
            \ // The unique identifier for the video you want to delete a caption\
            \ from.\n$language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n$client->captions()->delete($videoId, $language); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/CaptionsAPI.md#delete
    get:
      description: Retrieve a caption for a video in a specific language.
      operationId: GET_videos-videoId-captions-language
      parameters:
      - description: The unique identifier for the video you want captions for.
        example: vi4k0jvEUuaTdRAEjQ4Prklg
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en
                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt
                    srclang: en
                    default: false
              schema:
                $ref: '#/components/schemas/caption'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve a caption
      tags:
      - Captions
      x-client-description:
        default: |-
          Retrieve a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a error indicating the caption was not found.
          Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/CaptionsApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Prklg\" // string | The\
            \ unique identifier for the video you want captions for.\n    language\
            \ := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n    \n    res, err := client.Captions.Get(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Captions.Get``: %v\\\n\", err)\n    }\n    // response\
            \ from `Get`: Caption\n    fmt.Fprintf(os.Stdout, \"Response from `Captions.Get`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: |
            // First install the "@api.video/nodejs-client" npm package
            // Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/CaptionsApi.md#get

            const client = new ApiVideoClient({ apiKey: "YOUR_API_KEY" });

            const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for the video you want captions for.
            const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation

            const caption = await client.captions.get(videoId, language);
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/CaptionsApi.md#get

            import apivideo
            from apivideo.api import captions_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.caption import Caption
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = captions_api.CaptionsApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Prklg" # str | The unique identifier for the video you want captions for.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation

                # example passing only required values which don't have defaults set
                try:
                    # Show a caption
                    api_response = api_instance.get(video_id, language)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling CaptionsApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/CaptionsApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.CaptionsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    CaptionsApi apiInstance\
            \ = client.captions();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            ; // The unique identifier for the video you want captions for.\n    String\
            \ language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n    try {\n      Caption result = apiInstance.get(videoId,\
            \ language);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling CaptionsApi#get\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/CaptionsApi.md#get

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want captions for.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
                        var apiCaptionsInstance = apiInstance.Captions();
                        try
                        {
                            // Show a caption
                            Caption result = apiCaptionsInstance.get(videoId, language);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling CaptionsApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/CaptionsApi.md#get\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want captions for.\n$language\
            \ = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n$client->captions()->get($videoId, $language); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/CaptionsAPI.md#get
    patch:
      description: Update caption settings.
      operationId: PATCH_videos-videoId-captions-language
      parameters:
      - description: The unique identifier for the video you want to have automatic
          captions for.
        example: vi4k0jvEUuaTdRAEjQ4Prklg
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/captions-update-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en
                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt
                    srclang: en
                    default: true
              schema:
                $ref: '#/components/schemas/caption'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: string (required)
                    title: string (required)
                    name: string (required)
                    status: integer (required)
                    problems:
                    - null
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: Lorem sit culpa non
                    title: sunt do fugiat tempor
                    name: irure mollit aute
                    status: 85925135
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Update a caption
      tags:
      - Captions
      x-client-description:
        default: 'To have the captions on automatically, use this method to set default:
          true.'
      x-client-action: update
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/CaptionsApi.md#update\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Prklg\" // string | The\
            \ unique identifier for the video you want to have automatic captions\
            \ for.\n    language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n    captionsUpdatePayload := *apivideosdk.NewCaptionsUpdatePayload()\
            \ // CaptionsUpdatePayload | \n\n    \n    res, err := client.Captions.Update(videoId,\
            \ language, captionsUpdatePayload)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `Captions.Update``: %v\\\n\", err)\n    }\n   \
            \ // response from `Update`: Caption\n    fmt.Fprintf(os.Stdout, \"Response\
            \ from `Captions.Update`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/CaptionsApi.md#update\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for\
            \ the video you want to have automatic captions for.\nconst language =\
            \ 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\nconst captionsUpdatePayload = {\n  _default:\
            \ true,\n}; \n \nconst caption = await client.captions.update(videoId,\
            \ language, captionsUpdatePayload);\n        \n"
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/CaptionsApi.md#update\n\
            \nimport apivideo\nfrom apivideo.api import captions_api\nfrom apivideo.model.bad_request\
            \ import BadRequest\nfrom apivideo.model.captions_update_payload import\
            \ CaptionsUpdatePayload\nfrom apivideo.model.not_found import NotFound\n\
            from apivideo.model.caption import Caption\nfrom pprint import pprint\n\
            \n# Enter a context with an instance of the API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\
            \ as api_client:\n    # Create an instance of the API class\n    api_instance\
            \ = captions_api.CaptionsApi(api_client)\n    video_id = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            \ # str | The unique identifier for the video you want to have automatic\
            \ captions for.\n    language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n    captions_update_payload = CaptionsUpdatePayload(\n\
            \        default=True,\n    ) # CaptionsUpdatePayload | \n\n    # example\
            \ passing only required values which don't have defaults set\n    try:\n\
            \        # Update caption\n        api_response = api_instance.update(video_id,\
            \ language, captions_update_payload)\n        pprint(api_response)\n \
            \   except apivideo.ApiException as e:\n        print(\"Exception when\
            \ calling CaptionsApi->update: %s\\\n\" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/CaptionsApi.md#update\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.CaptionsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    CaptionsApi apiInstance\
            \ = client.captions();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            ; // The unique identifier for the video you want to have automatic captions\
            \ for.\n    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n    CaptionsUpdatePayload captionsUpdatePayload\
            \ = new CaptionsUpdatePayload(); // \n    captionsUpdatePayload.setDefault();\
            \ // \n\n\n    try {\n      Caption result = apiInstance.update(videoId,\
            \ language, captionsUpdatePayload);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling CaptionsApi#update\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/CaptionsApi.md#update\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class updateExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the\
            \ video you want to have automatic captions for.\n            var language\
            \ = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n            var captionsUpdatePayload = new\
            \ CaptionsUpdatePayload(); // CaptionsUpdatePayload | \n            var\
            \ apiCaptionsInstance = apiInstance.Captions();\n            try\n   \
            \         {\n                // Update caption\n                Caption\
            \ result = apiCaptionsInstance.update(videoId, language, captionsUpdatePayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling CaptionsApi.update: \" + e.Message );\n       \
            \         Debug.Print(\"Status Code: \"+ e.ErrorCode);\n             \
            \   Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/CaptionsApi.md#update\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want to have automatic captions\
            \ for.\n$language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n$captionsUpdatePayload = (new \\ApiVideo\\\
            Client\\Model\\CaptionsUpdatePayload())\n    ->setDefault(true);\n \n\
            $caption = $client->captions()->update($videoId, $language, $captionsUpdatePayload); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/CaptionsAPI.md#update
    post:
      description: Upload a VTT file to add captions to your video. More information
        can be found [here](https://docs.api.video/reference/captions)
      operationId: POST_videos-videoId-captions-language
      parameters:
      - description: The unique identifier for the video you want to add a caption
          to.
        example: vi4k0jvEUuaTdRAEjQ4Prklg
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid BCP 47 language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/captions-upload-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en
                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt
                    srclang: en
                    default: false
              schema:
                $ref: '#/components/schemas/caption'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a caption
      tags:
      - Captions
      x-client-action: upload
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/CaptionsApi.md#upload\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Prklg\" // string | The\
            \ unique identifier for the video you want to add a caption to.\n    language\
            \ := \"en\" // string | A valid BCP 47 language representation.\n    file\
            \ := os.NewFile(1234, \"some_file\") // *os.File | The video text track\
            \ (VTT) you want to upload.\n\n    \n    res, err := client.Captions.UploadFile(videoId,\
            \ language, file)\n\n    // you can also use a Reader instead of a File:\n\
            \    // client.Captions.Upload(videoId, language, fileName, fileReader)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Captions.Upload``: %v\\\n\", err)\n    }\n    // response from `Upload`:\
            \ Caption\n    fmt.Fprintf(os.Stdout, \"Response from `Captions.Upload`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/CaptionsApi.md#upload\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for\
            \ the video you want to add a caption to.\nconst language = 'en'; // A\
            \ valid BCP 47 language representation.\nconst file = './en.vtt'; // The\
            \ video text track (VTT) you want to upload.\n\nconst caption = await\
            \ client.captions.upload(videoId, language, file); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/CaptionsApi.md#upload

            import apivideo
            from apivideo.api import captions_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from apivideo.model.caption import Caption
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = captions_api.CaptionsApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Prklg" # str | The unique identifier for the video you want to add a caption to.
                language = "en" # str | A valid BCP 47 language representation.
                file = open('/path/to/file', 'rb') # file_type | The video text track (VTT) you want to upload.

                # example passing only required values which don't have defaults set
                try:
                    # Upload a caption
                    api_response = api_instance.upload(video_id, language, file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling CaptionsApi->upload: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/CaptionsApi.md#upload\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.CaptionsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    CaptionsApi apiInstance\
            \ = client.captions();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            ; // The unique identifier for the video you want captions for.\n    String\
            \ language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n    try {\n      Caption result = apiInstance.get(videoId,\
            \ language);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling CaptionsApi#get\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/CaptionsApi.md#upload

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class uploadExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want to add a caption to.
                        var language = en;  // string | A valid BCP 47 language representation.
                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The video text track (VTT) you want to upload.
                        var apiCaptionsInstance = apiInstance.Captions();
                        try
                        {
                            // Upload a caption
                            Caption result = apiCaptionsInstance.upload(videoId, language, file);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling CaptionsApi.upload: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/CaptionsApi.md#upload\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want to add a caption to.\n\
            $language = 'en'; // A valid BCP 47 language representation.\n$file =\
            \ new SplFileObject(__DIR__ . '/en.vtt'); // The video text track (VTT)\
            \ you want to upload.\n\n$caption = $client->captions()->upload($videoId,\
            \ $language, $file); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/CaptionsAPI.md#upload
  /videos/{videoId}/captions:
    get:
      description: Retrieve a list of available captions by video id.
      operationId: GET_videos-videoId-captions
      parameters:
      - description: The unique identifier for the video you want to retrieve a list
          of captions for.
        example: vi4k0jvEUuaTdRAEjQ4Prklg
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en
                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt
                      srclang: en
                      default: false
                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/fr
                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/fr.vtt
                      srclang: fr
                      default: false
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 2
                      links:
                      - rel: self
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1&pageSize=25
                      - rel: first
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1&pageSize=25
                      - rel: last
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/captions-list-response'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: List video captions
      tags:
      - Captions
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/CaptionsApi.md#list\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Prklg\" // string | The\
            \ unique identifier for the video you want captions for.\n    language\
            \ := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n    \n    res, err := client.Captions.Get(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Captions.Get``: %v\\\n\", err)\n    }\n    // response\
            \ from `Get`: Caption\n    fmt.Fprintf(os.Stdout, \"Response from `Captions.Get`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/CaptionsApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const captions = await client.captions.list({\n  videoId 'vi4k0jvEUuaTdRAEjQ4Prklg',\
            \ // The unique identifier for the video you want to retrieve a list of\
            \ captions for.\n  currentPage: 2, // Choose the number of search results\
            \ to return per page. Minimum value: 1\n  pageSize: 30, // Results per\
            \ page. Allowed values 1-100, default is 25.\n); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/CaptionsApi.md#list

            import apivideo
            from apivideo.api import captions_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.caption import Caption
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = captions_api.CaptionsApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Prklg" # str | The unique identifier for the video you want captions for.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation

                # example passing only required values which don't have defaults set
                try:
                    # Show a caption
                    api_response = api_instance.get(video_id, language)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling CaptionsApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/CaptionsApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.CaptionsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    CaptionsApi apiInstance\
            \ = client.captions();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            ; // The unique identifier for the video you want captions for.\n    String\
            \ language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation\n\n    try {\n      Caption result = apiInstance.get(videoId,\
            \ language);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling CaptionsApi#get\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/CaptionsApi.md#list

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want captions for.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
                        var apiCaptionsInstance = apiInstance.Captions();
                        try
                        {
                            // Show a caption
                            Caption result = apiCaptionsInstance.get(videoId, language);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling CaptionsApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/CaptionsApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want to retrieve a list of\
            \ captions for.\n\n$captions = $client->captions()->list($videoId, array(\n\
            \    'currentPage' => 2, // Choose the number of search results to return\
            \ per page. Minimum value: 1)\n    'pageSize' => 30 // Results per page.\
            \ Allowed values 1-100, default is 25.)\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/CaptionsAPI.md#list
  /videos/{videoId}/chapters/{language}:
    delete:
      description: Delete a chapter in a specific language by providing the video
        ID for the video you want to delete the chapter from and the language the
        chapter is in.
      operationId: DELETE_videos-videoId-chapters-language
      parameters:
      - description: The unique identifier for the video you want to delete a chapter
          from.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a chapter
      tags:
      - Chapters
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/ChaptersApi.md#delete\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ unique identifier for the video you want to delete a chapter from.\n\
            \    language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    \n    err := client.Chapters.Delete(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Chapters.Delete``: %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/ChaptersApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for\
            \ the video you want to delete a chapter from.\nconst language = 'en';\
            \ // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\nawait client.chapters.delete(videoId, language); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/ChaptersApi.md#delete

            import apivideo
            from apivideo.api import chapters_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = chapters_api.ChaptersApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the video you want to delete a chapter from.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.

                # example passing only required values which don't have defaults set
                try:
                    # Delete a chapter
                    api_instance.delete(video_id, language)
                except apivideo.ApiException as e:
                    print("Exception when calling ChaptersApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/ChaptersApi.md#delete\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.ChaptersApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    ChaptersApi apiInstance\
            \ = client.chapters();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the video you want to delete a chapter\
            \ from.\n    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    try {\n      apiInstance.delete(videoId,\
            \ language);\n    } catch (ApiException e) {\n      System.err.println(\"\
            Exception when calling ChaptersApi#delete\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/ChaptersApi.md#delete

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to delete a chapter from.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                        var apiChaptersInstance = apiInstance.Chapters();
                        try
                        {
                            // Delete a chapter
                            apiChaptersInstance.delete(videoId, language);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling ChaptersApi.delete: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/ChaptersApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz';\
            \ // The unique identifier for the video you want to delete a chapter\
            \ from.\n$language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n$client->chapters()->delete($videoId, $language); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/ChaptersAPI.md#delete
    get:
      description: 'Retrieve a chapter for by video id in a specific language. '
      operationId: GET_videos-videoId-chapters-language
      parameters:
      - description: The unique identifier for the video you want to show a chapter
          for.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr
                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
                    language: fr
              schema:
                $ref: '#/components/schemas/chapter'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve a chapter
      tags:
      - Chapters
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/ChaptersApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ unique identifier for the video you want to show a chapter for.\n  \
            \  language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    \n    res, err := client.Chapters.Get(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Chapters.Get``: %v\\\n\", err)\n    }\n    // response\
            \ from `Get`: Chapter\n    fmt.Fprintf(os.Stdout, \"Response from `Chapters.Get`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/ChaptersApi.md#get\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for\
            \ the video you want to show a chapter for.\nconst language = 'en'; //\
            \ A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\nconst chapter = await client.chapters.get(videoId,\
            \ language); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/ChaptersApi.md#get

            import apivideo
            from apivideo.api import chapters_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.chapter import Chapter
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = chapters_api.ChaptersApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the video you want to show a chapter for.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.

                # example passing only required values which don't have defaults set
                try:
                    # Show a chapter
                    api_response = api_instance.get(video_id, language)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling ChaptersApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/ChaptersApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.ChaptersApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    ChaptersApi apiInstance\
            \ = client.chapters();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the video you want to show a chapter for.\n\
            \    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    try {\n      Chapter result = apiInstance.get(videoId,\
            \ language);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling ChaptersApi#get\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/ChaptersApi.md#get

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to show a chapter for.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                        var apiChaptersInstance = apiInstance.Chapters();
                        try
                        {
                            // Show a chapter
                            Chapter result = apiChaptersInstance.get(videoId, language);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling ChaptersApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/ChaptersApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz';\
            \ // The unique identifier for the video you want to delete a chapter\
            \ from.\n$language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n$client->chapters()->delete($videoId, $language); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/ChaptersAPI.md#get
    post:
      description: |-
        Upload a VTT file to add chapters to your video.
        Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
      operationId: POST_videos-videoId-chapters-language
      parameters:
      - description: The unique identifier for the video you want to upload a chapter
          for.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)
          language representation.
        example: en
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/chapters-update-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr
                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
                    language: fr
              schema:
                $ref: '#/components/schemas/chapter'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a chapter
      tags:
      - Chapters
      x-client-action: upload
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/ChaptersApi.md#upload\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ unique identifier for the video you want to upload a chapter for.\n\
            \    language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n    file := os.NewFile(1234, \"some_file\"\
            ) // *os.File | The VTT file describing the chapters you want to upload.\n\
            \n    \n    res, err := client.Chapters.UploadFile(videoId, language,\
            \ file)\n\n    // you can also use a Reader instead of a File:\n    //\
            \ client.Chapters.Upload(videoId, language, fileName, fileReader)\n\n\
            \    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Chapters.Upload``: %v\\\n\", err)\n    }\n    // response from `Upload`:\
            \ Chapter\n    fmt.Fprintf(os.Stdout, \"Response from `Chapters.Upload`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/ChaptersApi.md#upload\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for\
            \ the video you want to upload a chapter for.\nconst language = 'en';\
            \ // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\nconst file = './en.vtt'; // The VTT file describing\
            \ the chapters you want to upload.\n\nconst chapter = await client.chapters.upload(videoId,\
            \ language, file); \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/ChaptersApi.md#upload

            import apivideo
            from apivideo.api import chapters_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from apivideo.model.chapter import Chapter
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = chapters_api.ChaptersApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the video you want to upload a chapter for.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                file = open('/path/to/file', 'rb') # file_type | The VTT file describing the chapters you want to upload.

                # example passing only required values which don't have defaults set
                try:
                    # Upload a chapter
                    api_response = api_instance.upload(video_id, language, file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling ChaptersApi->upload: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/ChaptersApi.md#upload\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.ChaptersApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    ChaptersApi apiInstance\
            \ = client.chapters();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the video you want to upload a chapter\
            \ for.\n    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n    File file = new File(\"/path/to/file\"\
            ); // The VTT file describing the chapters you want to upload.\n\n   \
            \ try {\n      Chapter result = apiInstance.upload(videoId, language,\
            \ file);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling ChaptersApi#upload\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/ChaptersApi.md#upload

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class uploadExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to upload a chapter for.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The VTT file describing the chapters you want to upload.
                        var apiChaptersInstance = apiInstance.Chapters();
                        try
                        {
                            // Upload a chapter
                            Chapter result = apiChaptersInstance.upload(videoId, language, file);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling ChaptersApi.upload: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/ChaptersApi.md#upload\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz';\
            \ // The unique identifier for the video you want to upload a chapter\
            \ for.\n$language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n$file = new SplFileObject(__DIR__ . '/en.vtt');\
            \ // The VTT file describing the chapters you want to upload.\n\n$chapter\
            \ = $client->chapters()->upload($videoId, $language, $file); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/ChaptersAPI.md#upload
  /videos/{videoId}/chapters:
    get:
      description: Retrieve a list of all chapters for by video id.
      operationId: GET_videos-videoId-chapters
      parameters:
      - description: The unique identifier for the video you want to retrieve a list
          of chapters for.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr
                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
                      language: fr
                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/en
                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/en.vtt
                      language: en
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 2
                      links:
                      - rel: self
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1&pageSize=25
                      - rel: first
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1&pageSize=25
                      - rel: last
                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/chapters-list-response'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: List video chapters
      tags:
      - Chapters
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/ChaptersApi.md#list\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    videoId := \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" // string | The\
            \ unique identifier for the video you want to show a chapter for.\n  \
            \  language := \"en\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    \n    res, err := client.Chapters.Get(videoId,\
            \ language)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `Chapters.Get``: %v\\\n\", err)\n    }\n    // response\
            \ from `Get`: Chapter\n    fmt.Fprintf(os.Stdout, \"Response from `Chapters.Get`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/ChaptersApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const captions = await client.chapters.list({\n  videoId 'vi4k0jvEUuaTdRAEjQ4Prklg',\
            \ // The unique identifier for the video you want to retrieve a list of\
            \ chapters for.\n  currentPage: 2, // Choose the number of search results\
            \ to return per page. Minimum value: 1\n  pageSize: 30, // Results per\
            \ page. Allowed values 1-100, default is 25.\n);  "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/ChaptersApi.md#list

            import apivideo
            from apivideo.api import chapters_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.chapter import Chapter
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = chapters_api.ChaptersApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the video you want to show a chapter for.
                language = "en" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.

                # example passing only required values which don't have defaults set
                try:
                    # Show a chapter
                    api_response = api_instance.get(video_id, language)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling ChaptersApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/ChaptersApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.ChaptersApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    ChaptersApi apiInstance\
            \ = client.chapters();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the video you want to show a chapter for.\n\
            \    String language = \"en\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\
            \ language representation.\n\n    try {\n      Chapter result = apiInstance.get(videoId,\
            \ language);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling ChaptersApi#get\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/ChaptersApi.md#list

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to show a chapter for.
                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
                        var apiChaptersInstance = apiInstance.Chapters();
                        try
                        {
                            // Show a chapter
                            Chapter result = apiChaptersInstance.get(videoId, language);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling ChaptersApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/ChaptersApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want to retrieve a list of\
            \ chapters for.\n\n$captions = $client->chapters()->list($videoId, array(\n\
            \    'currentPage' => 2, // Choose the number of search results to return\
            \ per page. Minimum value: 1)\n    'pageSize' => 30 // Results per page.\
            \ Allowed values 1-100, default is 25.)\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/ChaptersAPI.md#list
  /players:
    get:
      description: Retrieve a list of all the player themes you created, as well as
        details about each one.
      operationId: GET_players
      parameters:
      - description: createdAt is the time the player was created. updatedAt is the
          time the player was last updated. The time is presented in ISO-8601 format.
        example: createdAt
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - name
          - createdAt
          - updatedAt
          type: string
        style: form
      - description: 'Allowed: asc, desc. Ascending for date and time means that earlier
          values precede later ones. Descending means that later values preced earlier
          ones.'
        example: asc
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - playerId: pl4fgtjy4tjyKDK545DRdfg
                      createdAt: 2020-01-13T10:09:17+00:00
                      updatedAt: 2020-01-13T10:09:17+00:00
                      text: rgba(255, 255, 255, .95)
                      link: rgba(255, 0, 0, .95)
                      linkHover: rgba(255, 255, 255, .75)
                      linkActive: rgba(255, 0, 0, .75)
                      trackPlayed: rgba(255, 255, 255, .95)
                      trackUnplayed: rgba(255, 255, 255, .1)
                      trackBackground: rgba(0, 0, 0, 0)
                      backgroundTop: rgba(72, 4, 45, 1)
                      backgroundBottom: rgba(94, 95, 89, 1)
                      backgroundText: rgba(255, 255, 255, .95)
                      enableApi: false
                      enableControls: false
                      forceAutoplay: false
                      hideTitle: false
                      forceLoop: false
                    - playerId: pl54fgtjy4tjyKDK45DRdfg
                      createdAt: 2020-01-13T10:09:17+00:00
                      updatedAt: 2020-01-13T10:09:17+00:00
                      text: rgba(255, 255, 255, .95)
                      link: rgba(255, 0, 0, .95)
                      linkHover: rgba(255, 255, 255, .75)
                      linkActive: rgba(255, 0, 0, .75)
                      trackPlayed: rgba(255, 255, 255, .95)
                      trackUnplayed: rgba(255, 255, 255, .1)
                      trackBackground: rgba(0, 0, 0, 0)
                      backgroundTop: rgba(72, 4, 45, 1)
                      backgroundBottom: rgba(94, 95, 89, 1)
                      backgroundText: rgba(255, 255, 255, .95)
                      enableApi: true
                      enableControls: true
                      forceAutoplay: true
                      hideTitle: false
                      forceLoop: false
                    pagination:
                      currentPage: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 4
                      currentPageItems: 4
                      links:
                      - rel: self
                        uri: https://ws.api.video/players?currentPage=1
                      - rel: first
                        uri: https://ws.api.video/players?currentPage=1
                      - rel: last
                        uri: https://ws.api.video/players?currentPage=1
              schema:
                $ref: '#/components/schemas/player-themes-list-response'
          description: Success
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    title: This parameter is out of the allowed range of values.
                    name: page
                    status: 400
                    range:
                      min: 1
                    problems:
                    - title: This parameter is out of the allowed range of values.
                      name: page
                      range:
                        min: 1
                    - title: This parameter is out of the allowed range of values.
                      name: pageSize
                      range:
                        min: 10
                        max: 100
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: List all player themes
      tags:
      - Player Themes
      x-client-action: list
      x-group-parameters: true
      x-client-paginated: true
      x-optional-object: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#list\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \    req := apivideosdk.PlayerThemesApiListRequest{}\n    \n    req.SortBy(\"\
            createdAt\") // string | createdAt is the time the player was created.\
            \ updatedAt is the time the player was last updated. The time is presented\
            \ in ISO-8601 format.\n    req.SortOrder(\"asc\") // string | Allowed:\
            \ asc, desc. Ascending for date and time means that earlier values precede\
            \ later ones. Descending means that later values preced earlier ones.\n\
            \    req.CurrentPage(int32(2)) // int32 | Choose the number of search\
            \ results to return per page. Minimum value: 1 (default to 1)\n    req.PageSize(int32(30))\
            \ // int32 | Results per page. Allowed values 1-100, default is 25. (default\
            \ to 25)\n\n    res, err := client.PlayerThemes.List(req)\n    \n\n  \
            \  if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `PlayerThemes.List``: %v\\\n\", err)\n    }\n    // response from `List`:\
            \ PlayerThemesListResponse\n    fmt.Fprintf(os.Stdout, \"Response from\
            \ `PlayerThemes.List`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const sortBy = 'createdAt'; // createdAt is the time the player was created.\
            \ updatedAt is the time the player was last updated. The time is presented\
            \ in ISO-8601 format.\nconst sortOrder = 'asc'; // Allowed: asc, desc.\
            \ Ascending for date and time means that earlier values precede later\
            \ ones. Descending means that later values preced earlier ones.\nconst\
            \ currentPage = 2; // Choose the number of search results to return per\
            \ page. Minimum value: 1\nconst pageSize = 30; // Results per page. Allowed\
            \ values 1-100, default is 25.\n\n// PlayerThemesListResponse\nconst playerThemes\
            \ = await client.playerThemes.list({ sortBy, sortOrder, currentPage, pageSize\
            \ }); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#list

            import apivideo
            from apivideo.api import player_themes_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.player_themes_list_response import PlayerThemesListResponse
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = player_themes_api.PlayerThemesApi(api_client)
                sort_by = "createdAt" # str | createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format. (optional)
                sort_order = "asc" # str | Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. (optional)
                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1
                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # List all players
                    api_response = api_instance.list(sort_by=sort_by, sort_order=sort_order, current_page=current_page, page_size=page_size)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling PlayerThemesApi->list: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String sortBy = \"createdAt\"; //\
            \ createdAt is the time the player was created. updatedAt is the time\
            \ the player was last updated. The time is presented in ISO-8601 format.\n\
            \    String sortOrder = \"asc\"; // Allowed: asc, desc. Ascending for\
            \ date and time means that earlier values precede later ones. Descending\
            \ means that later values preced earlier ones.\n    Integer currentPage\
            \ = 1; // Choose the number of search results to return per page. Minimum\
            \ value: 1\n    Integer pageSize = 25; // Results per page. Allowed values\
            \ 1-100, default is 25.\n\n    try {\n      Page<PlayerTheme> result =\
            \ apiInstance.list()\n            .sortBy(sortBy)\n            .sortOrder(sortOrder)\n\
            \            .currentPage(currentPage)\n            .pageSize(pageSize)\n\
            \            .execute();\n      System.out.println(result);\n    } catch\
            \ (ApiException e) {\n      System.err.println(\"Exception when calling\
            \ PlayerThemesApi#list\");\n      System.err.println(\"Status code: \"\
            \ + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#list\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class listExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var sortBy = createdAt;\
            \  // string | createdAt is the time the player was created. updatedAt\
            \ is the time the player was last updated. The time is presented in ISO-8601\
            \ format. (optional) \n            var sortOrder = asc;  // string | Allowed:\
            \ asc, desc. Ascending for date and time means that earlier values precede\
            \ later ones. Descending means that later values preced earlier ones.\
            \ (optional) \n            var currentPage = 2;  // int? | Choose the\
            \ number of search results to return per page. Minimum value: 1 (optional)\
            \  (default to 1)\n            var pageSize = 30;  // int? | Results per\
            \ page. Allowed values 1-100, default is 25. (optional)  (default to 25)\n\
            \            var apiPlayerThemesInstance = apiInstance.PlayerThemes();\n\
            \            try\n            {\n                // List all players\n\
            \                PlayerThemesListResponse result = apiPlayerThemesInstance.list(sortBy,\
            \ sortOrder, currentPage, pageSize);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling PlayerThemesApi.list:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#list\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerThemes = $client->playerThemes()->list(array(\n\
            \    'sortBy' => 'createdAt', // createdAt is the time the player was\
            \ created. updatedAt is the time the player was last updated. The time\
            \ is presented in ISO-8601 format.\n    'sortOrder' => 'asc', // ->setAllowed(asc,\
            \ desc. Ascending for date and time means that earlier values precede\
            \ later ones. Descending means that later values preced earlier ones.)\n\
            \    'currentPage' => 2, // Choose the number of search results to return\
            \ per page. Minimum ->setvalue(1)\n    'pageSize' => 30 // Results per\
            \ page. Allowed values 1-100, default is 25.\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#list
    post:
      description: Create a player for your video, and customise it.
      operationId: POST_players
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/player-theme-creation-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    playerId: pl45d5vFFGrfdsdsd156dGhh
                    createdAt: 2020-01-13T10:09:17+00:00
                    updatedAt: 2020-01-13T10:09:17+00:00
                    text: rgba(255, 255, 255, .95)
                    link: rgba(255, 0, 0, .95)
                    linkHover: rgba(255, 255, 255, .75)
                    linkActive: rgba(255, 0, 0, .75)
                    trackPlayed: rgba(255, 255, 255, .95)
                    trackUnplayed: rgba(255, 255, 255, .1)
                    trackBackground: rgba(0, 0, 0, 0)
                    backgroundTop: rgba(72, 4, 45, 1)
                    backgroundBottom: rgba(94, 95, 89, 1)
                    backgroundText: rgba(255, 255, 255, .95)
                    enableApi: false
                    enableControls: false
                    forceAutoplay: false
                    hideTitle: false
                    forceLoop: false
              schema:
                $ref: '#/components/schemas/player-theme'
          description: Created
      security:
      - apiKey: []
      summary: Create a player
      tags:
      - Player Themes
      x-client-action: create
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#create\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerThemeCreationPayload := *apivideosdk.NewPlayerThemeCreationPayload()\
            \ // PlayerThemeCreationPayload | \n\n    \n    res, err := client.PlayerThemes.Create(playerThemeCreationPayload)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `PlayerThemes.Create``: %v\\\n\", err)\n    }\n    // response from\
            \ `Create`: PlayerTheme\n    fmt.Fprintf(os.Stdout, \"Response from `PlayerThemes.Create`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#create\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerThemeCreationPayload = {\n  text: \"rgba(255, 255, 255, 1)\"\
            , // RGBA color for timer text. Default: rgba(255, 255, 255, 1)\n  link:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color for all controls. Default:\
            \ rgba(255, 255, 255, 1)\n  linkHover: \"rgba(255, 255, 255, 1)\", //\
            \ RGBA color for all controls when hovered. Default: rgba(255, 255, 255,\
            \ 1)\n  trackPlayed: \"rgba(255, 255, 255, 1)\", // RGBA color playback\
            \ bar: played content. Default: rgba(88, 131, 255, .95)\n  trackUnplayed:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color playback bar: downloaded but\
            \ unplayed (buffered) content. Default: rgba(255, 255, 255, .35)\n  trackBackground:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color playback bar: background.\
            \ Default: rgba(255, 255, 255, .2)\n  backgroundTop: \"rgba(255, 255,\
            \ 255, 1)\", // RGBA color: top 50% of background. Default: rgba(0, 0,\
            \ 0, .7)\n  backgroundBottom: \"rgba(255, 255, 255, 1)\", // RGBA color:\
            \ bottom 50% of background. Default: rgba(0, 0, 0, .7)\n  backgroundText:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color for title text. Default: rgba(255,\
            \ 255, 255, 1)\n  enableApi: true, // enable/disable player SDK access.\
            \ Default: true\n  enableControls: true, // enable/disable player controls.\
            \ Default: true\n  forceAutoplay: true, // enable/disable player autoplay.\
            \ Default: false\n  hideTitle: true, // enable/disable title. Default:\
            \ false\n  forceLoop: true, // enable/disable looping. Default: false\n\
            }; \n \nconst playerTheme = await client.playerThemes.create(playerThemeCreationPayload); "
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#create\n\
            \nimport apivideo\nfrom apivideo.api import player_themes_api\nfrom apivideo.model.player_theme_creation_payload\
            \ import PlayerThemeCreationPayload\nfrom apivideo.model.player_theme\
            \ import PlayerTheme\nfrom pprint import pprint\n\n# Enter a context with\
            \ an instance of the API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\
            \ as api_client:\n    # Create an instance of the API class\n    api_instance\
            \ = player_themes_api.PlayerThemesApi(api_client)\n    player_theme_creation_payload\
            \ = PlayerThemeCreationPayload(\n        text=\"text_example\",\n    \
            \    link=\"link_example\",\n        link_hover=\"link_hover_example\"\
            ,\n        track_played=\"track_played_example\",\n        track_unplayed=\"\
            track_unplayed_example\",\n        track_background=\"track_background_example\"\
            ,\n        background_top=\"background_top_example\",\n        background_bottom=\"\
            background_bottom_example\",\n        background_text=\"background_text_example\"\
            ,\n        enable_api=True,\n        enable_controls=True,\n        force_autoplay=False,\n\
            \        hide_title=False,\n        force_loop=False,\n    ) # PlayerThemeCreationPayload\
            \ | \n\n    # example passing only required values which don't have defaults\
            \ set\n    try:\n        # Create a player\n        api_response = api_instance.create(player_theme_creation_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling PlayerThemesApi->create: %s\\\n\
            \" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#create\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    PlayerThemeCreationPayload playerThemeCreationPayload\
            \ = new PlayerThemeCreationPayload(); // \n    playerThemeCreationPayload.setText(\"\
            \"null\"\"); // RGBA color for timer text. Default: rgba(255, 255, 255,\
            \ 1)\n    playerThemeCreationPayload.setLink(\"\"null\"\"); // RGBA color\
            \ for all controls. Default: rgba(255, 255, 255, 1)\n    playerThemeCreationPayload.setLinkHover(\"\
            \"null\"\"); // RGBA color for all controls when hovered. Default: rgba(255,\
            \ 255, 255, 1)\n    playerThemeCreationPayload.setTrackPlayed(\"\"null\"\
            \"); // RGBA color playback bar: played content. Default: rgba(88, 131,\
            \ 255, .95)\n    playerThemeCreationPayload.setTrackUnplayed(\"\"null\"\
            \"); // RGBA color playback bar: downloaded but unplayed (buffered) content.\
            \ Default: rgba(255, 255, 255, .35)\n    playerThemeCreationPayload.setTrackBackground(\"\
            \"null\"\"); // RGBA color playback bar: background. Default: rgba(255,\
            \ 255, 255, .2)\n    playerThemeCreationPayload.setBackgroundTop(\"\"\
            null\"\"); // RGBA color: top 50% of background. Default: rgba(0, 0, 0,\
            \ .7)\n    playerThemeCreationPayload.setBackgroundBottom(\"\"null\"\"\
            ); // RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\n\
            \    playerThemeCreationPayload.setBackgroundText(\"\"null\"\"); // RGBA\
            \ color for title text. Default: rgba(255, 255, 255, 1)\n    playerThemeCreationPayload.setEnableApi();\
            \ // enable/disable player SDK access. Default: true\n    playerThemeCreationPayload.setEnableControls();\
            \ // enable/disable player controls. Default: true\n    playerThemeCreationPayload.setForceAutoplay();\
            \ // enable/disable player autoplay. Default: false\n    playerThemeCreationPayload.setHideTitle();\
            \ // enable/disable title. Default: false\n    playerThemeCreationPayload.setForceLoop();\
            \ // enable/disable looping. Default: false\n\n\n    try {\n      PlayerTheme\
            \ result = apiInstance.create(playerThemeCreationPayload);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling PlayerThemesApi#create\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#create\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class createExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var playerThemeCreationPayload\
            \ = new PlayerThemeCreationPayload(); // PlayerThemeCreationPayload |\
            \ \n            var apiPlayerThemesInstance = apiInstance.PlayerThemes();\n\
            \            try\n            {\n                // Create a player\n\
            \                PlayerTheme result = apiPlayerThemesInstance.create(playerThemeCreationPayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling PlayerThemesApi.create: \" + e.Message );\n   \
            \             Debug.Print(\"Status Code: \"+ e.ErrorCode);\n         \
            \       Debug.Print(e.StackTrace);\n            }\n        }\n    }\n\
            }\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#create\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerThemeCreationPayload\
            \ = (new \\ApiVideo\\Client\\Model\\PlayerThemeCreationPayload())\n  \
            \  ->setText(\"rgba(255, 255, 255, 1)\") // RGBA color for timer text.\
            \ Default: rgba(255, 255, 255, 1))\n    ->setLink(\"rgba(255, 255, 255,\
            \ 1)\") // RGBA color for all controls. Default: rgba(255, 255, 255, 1))\n\
            \    ->setLinkHover(\"rgba(255, 255, 255, 1)\") // RGBA color for all\
            \ controls when hovered. Default: rgba(255, 255, 255, 1))\n    ->setTrackPlayed(\"\
            rgba(255, 255, 255, 1)\") // RGBA color playback bar: played content.\
            \ Default: rgba(88, 131, 255, .95))\n    ->setTrackUnplayed(\"rgba(255,\
            \ 255, 255, 1)\") // RGBA color playback bar: downloaded but unplayed\
            \ (buffered) content. Default: rgba(255, 255, 255, .35))\n    ->setTrackBackground(\"\
            rgba(255, 255, 255, 1)\") // RGBA color playback bar: background. Default:\
            \ rgba(255, 255, 255, .2))\n    ->setBackgroundTop(\"rgba(255, 255, 255,\
            \ 1)\") // RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7))\n\
            \    ->setBackgroundBottom(\"rgba(255, 255, 255, 1)\") // RGBA color:\
            \ bottom 50% of background. Default: rgba(0, 0, 0, .7))\n    ->setBackgroundText(\"\
            rgba(255, 255, 255, 1)\") // RGBA color for title text. Default: rgba(255,\
            \ 255, 255, 1))\n    ->setEnableApi(true) // enable/disable player SDK\
            \ access. Default: true)\n    ->setEnableControls(true) // enable/disable\
            \ player controls. Default: true)\n    ->setForceAutoplay(true) // enable/disable\
            \ player autoplay. Default: false)\n    ->setHideTitle(true) // enable/disable\
            \ title. Default: false)\n    ->setForceLoop(true); // enable/disable\
            \ looping. Default: false)\n\n$playerTheme = $client->playerThemes()->create($playerThemeCreationPayload); "
        - language: swift
          code: "// First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started\n\
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#create\n\
            \nApiVideoClient.apiKey = \"YOUR_API_KEY\"\n\nlet videoCreationPayload\
            \ = PlayerThemeCreationPayload(\n  text = \"rgba(255, 0, 0, 1)\", // RGBA\
            \ color for timer text. Default: rgba(255, 255, 255, 1)\n  link = \"rgba(0,\
            \ 0, 255, 1)\", // RGBA color for all controls. Default: rgba(255, 255,\
            \ 255, 1)\n  linkHover = \"rgba(0, 255, 255, 1)\", // RGBA color for all\
            \ controls when hovered. Default: rgba(255, 255, 255, 1)\n  trackPlayed\
            \ = \"rgba(255, 0, 255, 1)\", // RGBA color playback bar: played content.\
            \ Default: rgba(88, 131, 255, .95)\n  trackUnplayed = \"rgba(255, 255,\
            \ 255, 1)\", // RGBA color playback bar: downloaded but unplayed (buffered)\
            \ content. Default: rgba(255, 255, 255, .35)\n  trackBackground = \"rgba(255,\
            \ 255, 255, 1)\", // RGBA color playback bar: background. Default: rgba(255,\
            \ 255, 255, .2)\n  backgroundTop = \"rgba(0, 255, 255, 1)\", // RGBA color:\
            \ top 50% of background. Default: rgba(0, 0, 0, .7)\n  backgroundBottom\
            \ = \"rgba(255, 255, 255, 1)\", // RGBA color: bottom 50% of background.\
            \ Default: rgba(0, 0, 0, .7)\n  backgroundText = \"rgba(255, 255, 255,\
            \ 1)\", // RGBA color for title text. Default: rgba(255, 255, 255, 1)\n\
            \  enableApi = true, // enable/disable player SDK access. Default: true\n\
            \  enableControls = true, // enable/disable player controls. Default:\
            \ true\n  forceAutoplay = true, // enable/disable player autoplay. Default:\
            \ false\n  hideTitle = true, // enable/disable title. Default: false\n\
            \  forceLoop = true // enable/disable looping. Default: false\n)\n\n\n\
            PlayerThemesAPI.create(playerThemeCreationPayload: playerThemeCreationPayload)\
            \ { (response, error) in\n    \n}\n"
  /players/{playerId}:
    delete:
      description: Delete a player if you no longer need it. You can delete any player
        that you have the player ID for.
      operationId: DELETE_players-playerId
      parameters:
      - description: The unique identifier for the player you want to delete.
        example: pl45d5vFFGrfdsdsd156dGhh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: playerId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a player
      tags:
      - Player Themes
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#delete\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerId := \"pl45d5vFFGrfdsdsd156dGhh\" // string | The\
            \ unique identifier for the player you want to delete.\n\n    \n    err\
            \ := client.PlayerThemes.Delete(playerId)\n\n    if err != nil {\n   \
            \     fmt.Fprintf(os.Stderr, \"Error when calling `PlayerThemes.Delete``:\
            \ %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique identifier\
            \ for the player you want to delete.\nawait client.playerThemes.delete(playerId); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#delete

            import apivideo
            from apivideo.api import player_themes_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = player_themes_api.PlayerThemesApi(api_client)
                player_id = "pl45d5vFFGrfdsdsd156dGhh" # str | The unique identifier for the player you want to delete.

                # example passing only required values which don't have defaults set
                try:
                    # Delete a player
                    api_instance.delete(player_id)
                except apivideo.ApiException as e:
                    print("Exception when calling PlayerThemesApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#delete\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String playerId = \"pl45d5vFFGrfdsdsd156dGhh\"\
            ; // The unique identifier for the player you want to delete.\n\n    try\
            \ {\n      apiInstance.delete(playerId);\n    } catch (ApiException e)\
            \ {\n      System.err.println(\"Exception when calling PlayerThemesApi#delete\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#delete

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var playerId = pl45d5vFFGrfdsdsd156dGhh;  // string | The unique identifier for the player you want to delete.
                        var apiPlayerThemesInstance = apiInstance.PlayerThemes();
                        try
                        {
                            // Delete a player
                            apiPlayerThemesInstance.delete(playerId);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling PlayerThemesApi.delete: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerId = 'pl45d5vFFGrfdsdsd156dGhh';\
            \ // The unique identifier for the player you want to delete.\n$client->playerThemes()->delete($playerId);\
            \  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#delete
    get:
      description: Retreive a player theme by player id.
      operationId: GET_players-playerId
      parameters:
      - description: 'The unique identifier for the player you want to retrieve. '
        example: pl45d5vFFGrfdsdsd156dGhh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    playerId: pl45d5vFFGrfdsdsd156dGhh
                    createdAt: 2020-01-13T10:09:17+00:00
                    updatedAt: 2020-01-13T11:12:14+00:00
                    text: rgba(255, 255, 255, .95)
                    link: rgba(255, 0, 0, .95)
                    linkHover: rgba(255, 255, 255, .75)
                    linkActive: rgba(255, 0, 0, .75)
                    trackPlayed: rgba(255, 255, 255, .95)
                    trackUnplayed: rgba(255, 255, 255, .1)
                    trackBackground: rgba(0, 0, 0, 0)
                    backgroundTop: rgba(72, 4, 45, 1)
                    backgroundBottom: rgba(94, 95, 89, 1)
                    backgroundText: rgba(255, 255, 255, .95)
                    enableApi: false
                    enableControls: false
                    forceAutoplay: false
                    hideTitle: false
                    forceLoop: false
              schema:
                $ref: '#/components/schemas/player-theme'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: playerId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Retrieve a player
      tags:
      - Player Themes
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerId := \"pl45d5vFFGrfdsdsd156dGhh\" // string | The\
            \ unique identifier for the player you want to retrieve. \n\n    \n  \
            \  res, err := client.PlayerThemes.Get(playerId)\n\n    if err != nil\
            \ {\n        fmt.Fprintf(os.Stderr, \"Error when calling `PlayerThemes.Get``:\
            \ %v\\\n\", err)\n    }\n    // response from `Get`: PlayerTheme\n   \
            \ fmt.Fprintf(os.Stdout, \"Response from `PlayerThemes.Get`: %v\\\n\"\
            , res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#get\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique identifier\
            \ for the player you want to retrieve. \nconst playerTheme = await client.playerThemes.get(playerId); "
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#get\n\
            \nimport apivideo\nfrom apivideo.api import player_themes_api\nfrom apivideo.model.not_found\
            \ import NotFound\nfrom apivideo.model.player_theme import PlayerTheme\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = player_themes_api.PlayerThemesApi(api_client)\n\
            \    player_id = \"pl45d5vFFGrfdsdsd156dGhh\" # str | The unique identifier\
            \ for the player you want to retrieve. \n\n    # example passing only\
            \ required values which don't have defaults set\n    try:\n        # Show\
            \ a player\n        api_response = api_instance.get(player_id)\n     \
            \   pprint(api_response)\n    except apivideo.ApiException as e:\n   \
            \     print(\"Exception when calling PlayerThemesApi->get: %s\\\n\" %\
            \ e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String playerId = \"pl45d5vFFGrfdsdsd156dGhh\"\
            ; // The unique identifier for the player you want to retrieve. \n\n \
            \   try {\n      PlayerTheme result = apiInstance.get(playerId);\n   \
            \   System.out.println(result);\n    } catch (ApiException e) {\n    \
            \  System.err.println(\"Exception when calling PlayerThemesApi#get\");\n\
            \      System.err.println(\"Status code: \" + e.getCode());\n      System.err.println(\"\
            Reason: \" + e.getMessage());\n      System.err.println(\"Response headers:\
            \ \" + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n \
            \ }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#get\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class getExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var playerId =\
            \ pl45d5vFFGrfdsdsd156dGhh;  // string | The unique identifier for the\
            \ player you want to retrieve. \n            var apiPlayerThemesInstance\
            \ = apiInstance.PlayerThemes();\n            try\n            {\n    \
            \            // Show a player\n                PlayerTheme result = apiPlayerThemesInstance.get(playerId);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling PlayerThemesApi.get: \" + e.Message );\n      \
            \          Debug.Print(\"Status Code: \"+ e.ErrorCode);\n            \
            \    Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#get\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerId = 'pl45d5vFFGrfdsdsd156dGhh';\
            \ // The unique identifier for the player you want to retrieve. \n$playerTheme\
            \ = $client->playerThemes()->get($playerId);  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#get
    patch:
      description: "Use a player ID to update specific details for a player. \nNOTE:\
        \ It may take up to 10 min before the new player configuration is available\
        \ from our CDN."
      operationId: PATCH_players-playerId
      parameters:
      - description: The unique identifier for the player.
        example: pl45d5vFFGrfdsdsd156dGhh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/player-theme-update-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    playerId: pl45d5vFFGrfdsdsd156dGhh
                    createdAt: 2020-01-13T10:09:17+00:00
                    updatedAt: 2020-01-13T11:12:14+00:00
                    text: rgba(255, 255, 255, .95)
                    link: rgba(255, 0, 0, .95)
                    linkHover: rgba(255, 255, 255, .75)
                    linkActive: rgba(255, 0, 0, .75)
                    trackPlayed: rgba(255, 255, 255, .95)
                    trackUnplayed: rgba(255, 255, 255, .1)
                    trackBackground: rgba(0, 0, 0, 0)
                    backgroundTop: rgba(72, 4, 45, 1)
                    backgroundBottom: rgba(94, 95, 89, 1)
                    backgroundText: rgba(255, 255, 255, .95)
                    enableApi: false
                    enableControls: false
                    forceAutoplay: false
                    hideTitle: false
                    forceLoop: false
              schema:
                $ref: '#/components/schemas/player-theme'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: playerId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Update a player
      tags:
      - Player Themes
      x-client-action: update
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#update\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerId := \"pl45d5vFFGrfdsdsd156dGhh\" // string | The\
            \ unique identifier for the player.\n    playerThemeUpdatePayload := *apivideosdk.NewPlayerThemeUpdatePayload()\
            \ // PlayerThemeUpdatePayload | \n\n    \n    res, err := client.PlayerThemes.Update(playerId,\
            \ playerThemeUpdatePayload)\n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `PlayerThemes.Update``: %v\\\n\", err)\n    }\n\
            \    // response from `Update`: PlayerTheme\n    fmt.Fprintf(os.Stdout,\
            \ \"Response from `PlayerThemes.Update`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#update\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique identifier\
            \ for the player.\nconst playerThemeUpdatePayload = {\n  text: \"rgba(255,\
            \ 255, 255, 1)\", // RGBA color for timer text. Default: rgba(255, 255,\
            \ 255, 1)\n  link: \"rgba(255, 255, 255, 1)\", // RGBA color for all controls.\
            \ Default: rgba(255, 255, 255, 1)\n  linkHover: \"rgba(255, 255, 255,\
            \ 1)\", // RGBA color for all controls when hovered. Default: rgba(255,\
            \ 255, 255, 1)\n  trackPlayed: \"rgba(255, 255, 255, 1)\", // RGBA color\
            \ playback bar: played content. Default: rgba(88, 131, 255, .95)\n  trackUnplayed:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color playback bar: downloaded but\
            \ unplayed (buffered) content. Default: rgba(255, 255, 255, .35)\n  trackBackground:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color playback bar: background.\
            \ Default: rgba(255, 255, 255, .2)\n  backgroundTop: \"rgba(255, 255,\
            \ 255, 1)\", // RGBA color: top 50% of background. Default: rgba(0, 0,\
            \ 0, .7)\n  backgroundBottom: \"rgba(255, 255, 255, 1)\", // RGBA color:\
            \ bottom 50% of background. Default: rgba(0, 0, 0, .7)\n  backgroundText:\
            \ \"rgba(255, 255, 255, 1)\", // RGBA color for title text. Default: rgba(255,\
            \ 255, 255, 1)\n  enableApi: true, // enable/disable player SDK access.\
            \ Default: true\n  enableControls: true, // enable/disable player controls.\
            \ Default: true\n  forceAutoplay: true, // enable/disable player autoplay.\
            \ Default: false\n  hideTitle: true, // enable/disable title. Default:\
            \ false\n  forceLoop: true, // enable/disable looping. Default: false\n\
            }; \n\nconst playerTheme = await client.playerThemes.update(playerId,\
            \ playerThemeUpdatePayload); "
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#update\n\
            \nimport apivideo\nfrom apivideo.api import player_themes_api\nfrom apivideo.model.not_found\
            \ import NotFound\nfrom apivideo.model.player_theme import PlayerTheme\n\
            from apivideo.model.player_theme_update_payload import PlayerThemeUpdatePayload\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = player_themes_api.PlayerThemesApi(api_client)\n\
            \    player_id = \"pl45d5vFFGrfdsdsd156dGhh\" # str | The unique identifier\
            \ for the player.\n    player_theme_update_payload = PlayerThemeUpdatePayload(\n\
            \        text=\"text_example\",\n        link=\"link_example\",\n    \
            \    link_hover=\"link_hover_example\",\n        track_played=\"track_played_example\"\
            ,\n        track_unplayed=\"track_unplayed_example\",\n        track_background=\"\
            track_background_example\",\n        background_top=\"background_top_example\"\
            ,\n        background_bottom=\"background_bottom_example\",\n        background_text=\"\
            background_text_example\",\n        enable_api=True,\n        enable_controls=True,\n\
            \        force_autoplay=True,\n        hide_title=True,\n        force_loop=True,\n\
            \    ) # PlayerThemeUpdatePayload | \n\n    # example passing only required\
            \ values which don't have defaults set\n    try:\n        # Update a player\n\
            \        api_response = api_instance.update(player_id, player_theme_update_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling PlayerThemesApi->update: %s\\\n\
            \" % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#update\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String playerId = \"pl45d5vFFGrfdsdsd156dGhh\"\
            ; // The unique identifier for the player.\n    PlayerThemeUpdatePayload\
            \ playerThemeUpdatePayload = new PlayerThemeUpdatePayload(); // \n   \
            \ playerThemeUpdatePayload.setText(\"\"null\"\"); // RGBA color for timer\
            \ text. Default: rgba(255, 255, 255, 1)\n    playerThemeUpdatePayload.setLink(\"\
            \"null\"\"); // RGBA color for all controls. Default: rgba(255, 255, 255,\
            \ 1)\n    playerThemeUpdatePayload.setLinkHover(\"\"null\"\"); // RGBA\
            \ color for all controls when hovered. Default: rgba(255, 255, 255, 1)\n\
            \    playerThemeUpdatePayload.setTrackPlayed(\"\"null\"\"); // RGBA color\
            \ playback bar: played content. Default: rgba(88, 131, 255, .95)\n   \
            \ playerThemeUpdatePayload.setTrackUnplayed(\"\"null\"\"); // RGBA color\
            \ playback bar: downloaded but unplayed (buffered) content. Default: rgba(255,\
            \ 255, 255, .35)\n    playerThemeUpdatePayload.setTrackBackground(\"\"\
            null\"\"); // RGBA color playback bar: background. Default: rgba(255,\
            \ 255, 255, .2)\n    playerThemeUpdatePayload.setBackgroundTop(\"\"null\"\
            \"); // RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)\n\
            \    playerThemeUpdatePayload.setBackgroundBottom(\"\"null\"\"); // RGBA\
            \ color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\n    playerThemeUpdatePayload.setBackgroundText(\"\
            \"null\"\"); // RGBA color for title text. Default: rgba(255, 255, 255,\
            \ 1)\n    playerThemeUpdatePayload.setEnableApi(); // enable/disable player\
            \ SDK access. Default: true\n    playerThemeUpdatePayload.setEnableControls();\
            \ // enable/disable player controls. Default: true\n    playerThemeUpdatePayload.setForceAutoplay();\
            \ // enable/disable player autoplay. Default: false\n    playerThemeUpdatePayload.setHideTitle();\
            \ // enable/disable title. Default: false\n    playerThemeUpdatePayload.setForceLoop();\
            \ // enable/disable looping. Default: false\n\n\n    try {\n      PlayerTheme\
            \ result = apiInstance.update(playerId, playerThemeUpdatePayload);\n \
            \     System.out.println(result);\n    } catch (ApiException e) {\n  \
            \    System.err.println(\"Exception when calling PlayerThemesApi#update\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#update\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class updateExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var playerId =\
            \ pl45d5vFFGrfdsdsd156dGhh;  // string | The unique identifier for the\
            \ player.\n            var playerThemeUpdatePayload = new PlayerThemeUpdatePayload();\
            \ // PlayerThemeUpdatePayload | \n            var apiPlayerThemesInstance\
            \ = apiInstance.PlayerThemes();\n            try\n            {\n    \
            \            // Update a player\n                PlayerTheme result =\
            \ apiPlayerThemesInstance.update(playerId, playerThemeUpdatePayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling PlayerThemesApi.update: \" + e.Message );\n   \
            \             Debug.Print(\"Status Code: \"+ e.ErrorCode);\n         \
            \       Debug.Print(e.StackTrace);\n            }\n        }\n    }\n\
            }\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#update\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n\n$playerId = 'pl45d5vFFGrfdsdsd156dGhh';\
            \ // The unique identifier for the player.\n$playerThemeUpdatePayload\
            \ = (new \\ApiVideo\\Client\\Model\\PlayerThemeUpdatePayload())\n    ->setText(\"\
            rgba(255, 255, 255, 1)\") // RGBA color for timer text. Default: rgba(255,\
            \ 255, 255, 1))\n    ->setLink(\"rgba(255, 255, 255, 1)\") // RGBA color\
            \ for all controls. Default: rgba(255, 255, 255, 1))\n    ->setLinkHover(\"\
            rgba(255, 255, 255, 1)\") // RGBA color for all controls when hovered.\
            \ Default: rgba(255, 255, 255, 1))\n    ->setTrackPlayed(\"rgba(255, 255,\
            \ 255, 1)\") // RGBA color playback bar: played content. Default: rgba(88,\
            \ 131, 255, .95))\n    ->setTrackUnplayed(\"rgba(255, 255, 255, 1)\")\
            \ // RGBA color playback bar: downloaded but unplayed (buffered) content.\
            \ Default: rgba(255, 255, 255, .35))\n    ->setTrackBackground(\"rgba(255,\
            \ 255, 255, 1)\") // RGBA color playback bar: background. Default: rgba(255,\
            \ 255, 255, .2))\n    ->setBackgroundTop(\"rgba(255, 255, 255, 1)\") //\
            \ RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7))\n   \
            \ ->setBackgroundBottom(\"rgba(255, 255, 255, 1)\") // RGBA color: bottom\
            \ 50% of background. Default: rgba(0, 0, 0, .7))\n    ->setBackgroundText(\"\
            rgba(255, 255, 255, 1)\") // RGBA color for title text. Default: rgba(255,\
            \ 255, 255, 1))\n    ->setEnableApi(true) // enable/disable player SDK\
            \ access. Default: true)\n    ->setEnableControls(true) // enable/disable\
            \ player controls. Default: true)\n    ->setForceAutoplay(true) // enable/disable\
            \ player autoplay. Default: false)\n    ->setHideTitle(true) // enable/disable\
            \ title. Default: false)\n    ->setForceLoop(true); // enable/disable\
            \ looping. Default: false)\n\n\n$playerTheme = $client->playerThemes()->update($playerId,\
            \ $playerThemeUpdatePayload); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#update
  /players/{playerId}/logo:
    delete:
      description: Delete the logo associated to a player.
      operationId: DELETE_players-playerId-logo
      parameters:
      - description: The unique identifier for the player.
        example: pl14Db6oMJRH6SRVoOwORacK
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: playerId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete logo
      tags:
      - Player Themes
      x-client-action: deleteLogo
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#deleteLogo\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerId := \"pl14Db6oMJRH6SRVoOwORacK\" // string | The\
            \ unique identifier for the player.\n\n    \n    err := client.PlayerThemes.DeleteLogo(playerId)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `PlayerThemes.DeleteLogo``: %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#deleteLogo\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique identifier\
            \ for the player whose logo you want to delete.\nawait client.playerThemes.deleteLogo(playerId); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#deleteLogo

            import apivideo
            from apivideo.api import player_themes_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = player_themes_api.PlayerThemesApi(api_client)
                player_id = "pl14Db6oMJRH6SRVoOwORacK" # str | The unique identifier for the player.

                # example passing only required values which don't have defaults set
                try:
                    # Delete logo
                    api_instance.delete_logo(player_id)
                except apivideo.ApiException as e:
                    print("Exception when calling PlayerThemesApi->delete_logo: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#deleteLogo\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String playerId = \"pl14Db6oMJRH6SRVoOwORacK\"\
            ; // The unique identifier for the player.\n\n    try {\n      apiInstance.deleteLogo(playerId);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling PlayerThemesApi#deleteLogo\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#deleteLogo

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteLogoExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var playerId = pl14Db6oMJRH6SRVoOwORacK;  // string | The unique identifier for the player.
                        var apiPlayerThemesInstance = apiInstance.PlayerThemes();
                        try
                        {
                            // Delete logo
                            apiPlayerThemesInstance.deleteLogo(playerId);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling PlayerThemesApi.deleteLogo: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#deleteLogo\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerId = 'pl45d5vFFGrfdsdsd156dGhh';\
            \ // The unique identifier for the player whose logo you want to delete.\n\
            $client->playerThemes()->deleteLogo($playerId); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#deleteLogo
    post:
      description: Upload an image logo for a player.
      operationId: POST_players-playerId-logo
      parameters:
      - description: The unique identifier for the player.
        example: pl14Db6oMJRH6SRVoOwORacK
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/player-theme-upload-logo-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-theme'
          description: Created
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    status: 400
                    type: https://docs.api.video/docs/fileextension
                    title: Only ['jpg', 'JPG', 'jpeg', 'JPEG', 'png', 'PNG'] extensions
                      are supported.
                    name: file
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: playerId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Upload a logo
      tags:
      - Player Themes
      x-client-action: uploadLogo
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/PlayerThemesApi.md#uploadLogo\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    playerId := \"pl14Db6oMJRH6SRVoOwORacK\" // string | The\
            \ unique identifier for the player.\n    file := os.NewFile(1234, \"some_file\"\
            ) // *os.File | The name of the file you want to use for your logo.\n\
            \    link := \"link_example\" // string | A public link that you want\
            \ to advertise in your player. For example, you could add a link to your\
            \ company. When a viewer clicks on your logo, they will be taken to this\
            \ address.\n\n    \n    res, err := client.PlayerThemes.UploadLogoFile(playerId,\
            \ file)\n\n    // you can also use a Reader instead of a File:\n    //\
            \ client.PlayerThemes.UploadLogo(playerId, fileName, fileReader)\n\n \
            \   if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `PlayerThemes.UploadLogo``: %v\\\n\", err)\n    }\n    // response from\
            \ `UploadLogo`: PlayerTheme\n    fmt.Fprintf(os.Stdout, \"Response from\
            \ `PlayerThemes.UploadLogo`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/PlayerThemesApi.md#uploadLogo\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const playerId = 'pl14Db6oMJRH6SRVoOwORacK'; // The unique identifier\
            \ for the player.\nconst file = './company-logo.jpg'; // The name of the\
            \ file you want to use for your logo.\nconst link = 'https://my-company.org';\
            \ // A public link that you want to advertise in your player. For example,\
            \ you could add a link to your company. When a viewer clicks on your logo,\
            \ they will be taken to this address.\n\nconst playerTheme = await client.playerThemes.uploadLogo(playerId,\
            \ file, link); \n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/PlayerThemesApi.md#uploadLogo

            import apivideo
            from apivideo.api import player_themes_api
            from apivideo.model.bad_request import BadRequest
            from apivideo.model.not_found import NotFound
            from apivideo.model.player_theme import PlayerTheme
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = player_themes_api.PlayerThemesApi(api_client)
                player_id = "pl14Db6oMJRH6SRVoOwORacK" # str | The unique identifier for the player.
                file = open('/path/to/file', 'rb') # file_type | The name of the file you want to use for your logo.
                link = "https://my-company.com" # str | A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address. (optional)

                # example passing only required values which don't have defaults set
                try:
                    # Upload a logo
                    api_response = api_instance.upload_logo(player_id, file)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling PlayerThemesApi->upload_logo: %s\n" % e)

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # Upload a logo
                    api_response = api_instance.upload_logo(player_id, file, link=link)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling PlayerThemesApi->upload_logo: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/PlayerThemesApi.md#uploadLogo\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.PlayerThemesApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    PlayerThemesApi apiInstance\
            \ = client.playerThemes();\n    \n    String playerId = \"pl14Db6oMJRH6SRVoOwORacK\"\
            ; // The unique identifier for the player.\n    File file = new File(\"\
            /path/to/file\"); // The name of the file you want to use for your logo.\n\
            \    String link = \"link_example\"; // A public link that you want to\
            \ advertise in your player. For example, you could add a link to your\
            \ company. When a viewer clicks on your logo, they will be taken to this\
            \ address.\n\n    try {\n      PlayerTheme result = apiInstance.uploadLogo(playerId,\
            \ file, link);\n      System.out.println(result);\n    } catch (ApiException\
            \ e) {\n      System.err.println(\"Exception when calling PlayerThemesApi#uploadLogo\"\
            );\n      System.err.println(\"Status code: \" + e.getCode());\n     \
            \ System.err.println(\"Reason: \" + e.getMessage());\n      System.err.println(\"\
            Response headers: \" + e.getResponseHeaders());\n      e.printStackTrace();\n\
            \    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/PlayerThemesApi.md#uploadLogo\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class uploadLogoExample\n    {\n        public static void\
            \ Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var playerId =\
            \ pl14Db6oMJRH6SRVoOwORacK;  // string | The unique identifier for the\
            \ player.\n            var file = BINARY_DATA_HERE;  // System.IO.Stream\
            \ | The name of the file you want to use for your logo.\n            var\
            \ link = link_example;  // string | A public link that you want to advertise\
            \ in your player. For example, you could add a link to your company. When\
            \ a viewer clicks on your logo, they will be taken to this address. (optional)\
            \ \n            var apiPlayerThemesInstance = apiInstance.PlayerThemes();\n\
            \            try\n            {\n                // Upload a logo\n  \
            \              PlayerTheme result = apiPlayerThemesInstance.uploadLogo(playerId,\
            \ file, link);\n                Debug.WriteLine(result);\n           \
            \ }\n            catch (ApiException  e)\n            {\n            \
            \    Debug.Print(\"Exception when calling PlayerThemesApi.uploadLogo:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/PlayerThemesApi.md#uploadLogo\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$playerId = 'pl14Db6oMJRH6SRVoOwORacK';\
            \ // The unique identifier for the player.\n$file = new SplFileObject(__DIR__\
            \ . '/company-logo.jpg'); // The name of the file you want to use for\
            \ your logo.\n$link = 'https://my-company.org'; // A public link that\
            \ you want to advertise in your player. For example, you could add a link\
            \ to your company. When a viewer clicks on your logo, they will be taken\
            \ to this address.\n\n$playerTheme = $client->playerThemes()->uploadLogo($playerId,\
            \ $file, $link); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/PlayerThemesAPI.md#uploadLogo
  /analytics/videos/plays:
    get:
      description: Retrieve filtered analytics about the number of plays for your
        videos in a project.
      operationId: GET_analytics-videos-plays
      parameters:
      - description: |
          Use this query parameter to set the start date for the time period that you want analytics for.
          - The API returns analytics data including the day you set in `from`.
          - The date you set must be **within the last 30 days**.
          - The value you provide must follow the `YYYY-MM-DD` format.
        example: 2023-06-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          Use this optional query parameter to set the end date for the time period that you want analytics for.
          - If you do not specify a `to` date, the API returns analytics data starting from the `from` date up until today, and excluding today.
          - The date you set must be **within the last 30 days**.
          - The value you provide must follow the `YYYY-MM-DD` format.
        example: 2023-06-10
        explode: true
        in: query
        name: to
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |-
          Use this query parameter to define the dimension that you want analytics for.
          - `videoId`: Returns analytics based on the public video identifiers.
          - `emittedAt`: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in `from` and `to` is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals.
          - `country`: Returns analytics based on the viewers' country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).
          - `deviceType`: Returns analytics based on the type of device used by the viewers during the play event.
          - `operatingSystem`: Returns analytics based on the operating system used by the viewers during the play event.
          - `browser`: Returns analytics based on the browser used by the viewers during the play event.
        example: browser
        explode: false
        in: query
        name: dimension
        required: true
        schema:
          enum:
          - videoId
          - emittedAt
          - country
          - deviceType
          - operatingSystem
          - browser
          type: string
        style: form
      - description: Use this query parameter to filter your results to a specific
          video in a project that you want analytics for. You must use the `videoId:`
          prefix when specifying a video ID.
        example: videoId:vi3q7HxhApxRF1c8F8r6VeaI
        explode: false
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Dimension is videoId:
                  description: Breakdown video-plays by videoId for a project.
                  value:
                    data:
                    - value: vi3q7HxhApxRF1c8F8r6VeaI
                      plays: 100
                    - value: vi3q7HxhApxRF1c8F8r6VeaF
                      plays: 10
                    - value: vi3q7HxhApxRF1c8F8r6VeaH
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 3
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/videos/plays?dimension=videoId&currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/videos/plays?dimension=videoId&currentPage=1&pageSize=25
                      - rel: last
                        uri: /analytics/videos/plays?dimension=videoId&currentPage=1&pageSize=25
                Dimension is country:
                  description: Breakdown video-plays by country for a project, with
                    pagination set.
                  value:
                    data:
                    - value: france
                      plays: 100
                    - value: united states
                      plays: 10
                    - value: spain
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 2
                      pagesTotal: 2
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/videos/plays?dimension=country&currentPage=1&pageSize=2
                      - rel: first
                        uri: /analytics/videos/plays?dimension=country&currentPage=1&pageSize=2
                      - rel: next
                        uri: /analytics/videos/plays?dimension=country&currentPage=2&pageSize=1
                      - rel: last
                        uri: /analytics/videos/plays?dimension=country&currentPage=2&pageSize=1
                Dimension is emittedAt, filtered for a videoId:
                  description: Breakdown video-plays by the time of play events, for
                    a specific video.
                  value:
                    data:
                    - value: 2023-06-10T10:00:00.000Z
                      plays: 100
                    - value: 2023-06-10T11:00:00.000Z
                      plays: 10
                    - value: 2023-06-10T12:00:00.000Z
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 3
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/videos/plays?dimension=videoId&filter=videoId:vi3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/videos/plays?dimension=videoId&filter=videoId:vi3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
                      - rel: last
                        uri: /analytics/videos/plays?dimension=videoId&filter=videoId:vi3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/analytics-plays-response'
          description: Success
        "400":
          content:
            application/json:
              examples:
                Missing parameter:
                  description: This error occurs when a required query-parameter is
                    missing.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value must be of type string.
                    name: dimension
                Invalid parameter:
                  description: This error occurs when a required query-parameter format
                    is invalid.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be of the following structure(s): videoId:{videoId}'
                    name: filter
                Dimension not allowed:
                  description: This error occurs when the dimension you requested
                    is not allowed for the endpoint. For example, the dimension `videoId`
                    is not allowed for the `/live-streams` endpoint.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be part of the following values: emittedAt,videoId,country,deviceType,operatingSystem,browser'
                    name: dimension
                Dimension unknown:
                  description: This error occurs when the dimension you requested
                    is unknown.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be part of the following values: emittedAt,videoId,country,deviceType,operatingSystem,browser'
                    name: dimension
                Invalid filter:
                  description: This error occurs when the format of the filter you
                    requested is invalid.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be of the following structure(s): videoId:{videoId}'
                    name: filter
                Invalid videoId:
                  description: This error occurs when the videoId you requested does
                    not refer to an existing video.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: This value must refer to an existing video
                    name: filter
              schema:
                $ref: '#/components/schemas/analytics-plays-400-error'
          description: Bad request error
        "403":
          content:
            application/json:
              examples:
                Analytics is disabled:
                  value:
                    type: https://docs.api.video/reference/authorization-disabled-analytics
                    title: You cannot get analytics from this project.
                    status: 403
              schema:
                $ref: '#/components/schemas/403-error-schema'
          description: Forbidden - Disabled Analytics
        "404":
          content:
            application/json:
              examples:
                Endpoint not found:
                  value:
                    type: null
                    title: null
                    name: null
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Get play events for video
      tags:
      - Analytics
      x-client-action: getVideosPlays
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\
            \n    \"time\"\n    apivideosdk \"github.com/apivideo/api.video-go-client\"\
            \n)\n\nfunc main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\"\
            ).Build()\n    // if you rather like to use the sandbox environment:\n\
            \    // client := apivideosdk.SandboxClientBuilder(\"YOU_SANDBOX_API_KEY\"\
            ).Build()\n    req := apivideosdk.AnalyticsApiGetVideosPlaysRequest{}\n\
            \n    req.From(time.Now()) // string | Use this query parameter to set\
            \ the start date for the time period that you want analytics for. - The\
            \ API returns analytics data including the day you set in `from`. - The\
            \ date you set must be **within the last 30 days**. - The value you provide\
            \ must follow the `YYYY-MM-DD` format. \n    req.Dimension(\"browser\"\
            ) // string | Use this query parameter to define the dimension that you\
            \ want analytics for. - `videoId`: Returns analytics based on the public\
            \ video identifiers. - `emittedAt`: Returns analytics based on the times\
            \ of the play events. The API returns data in specific interval groups.\
            \ When the date period you set in `from` and `to` is less than or equals\
            \ to 2 days, the response for this dimension is grouped in hourly intervals.\
            \ Otherwise, it is grouped in daily intervals. - `country`: Returns analytics\
            \ based on the viewers' country. The list of supported country names are\
            \ based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    req.To(time.Now()) // string | Use this\
            \ optional query parameter to set the end date for the time period that\
            \ you want analytics for. - If you do not specify a `to` date, the API\
            \ returns analytics data starting from the `from` date up until today,\
            \ and excluding today. - The date you set must be **within the last 30\
            \ days**. - The value you provide must follow the `YYYY-MM-DD` format.\
            \ \n    req.Filter(\"videoId:vi3q7HxhApxRF1c8F8r6VeaI\") // string | Use\
            \ this query parameter to filter your results to a specific video in a\
            \ project that you want analytics for. You must use the `videoId:` prefix\
            \ when specifying a video ID.\n    req.CurrentPage(int32(2)) // int32\
            \ | Choose the number of search results to return per page. Minimum value:\
            \ 1 (default to 1)\n    req.PageSize(int32(30)) // int32 | Results per\
            \ page. Allowed values 1-100, default is 25. (default to 25)\n\n    res,\
            \ err := client.Analytics.GetVideosPlays(req)\n\n\n    if err != nil {\n\
            \        fmt.Fprintf(os.Stderr, \"Error when calling `Analytics.GetVideosPlays``:\
            \ %v\\n\", err)\n    }\n    // response from `GetVideosPlays`: AnalyticsPlaysResponse\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `Analytics.GetVideosPlays`:\
            \ %v\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/AnalyticsApi.md#getVideosPlays\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const from = \"2023-06-01\"; // Use this query parameter to set the start\
            \ date for the time period that you want analytics for. - The API returns\
            \ analytics data including the day you set in `from`. - The date you set\
            \ must be **within the last 30 days**. - The value you provide must follow\
            \ the `YYYY-MM-DD` format. \nconst dimension = \"videoId\"; // Use this\
            \ query parameter to define the dimension that you want analytics for.\
            \ - `videoId`: Returns analytics based on the public video identifiers.\
            \ - `emittedAt`: Returns analytics based on the times of the play events.\
            \ The API returns data in specific interval groups. When the date period\
            \ you set in `from` and `to` is less than or equals to 2 days, the response\
            \ for this dimension is grouped in hourly intervals. Otherwise, it is\
            \ grouped in daily intervals. - `country`: Returns analytics based on\
            \ the viewers' country. The list of supported country names are based\
            \ on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\nconst to = \"2023-06-10\"; // Use this optional\
            \ query parameter to set the end date for the time period that you want\
            \ analytics for. - If you do not specify a `to` date, the API returns\
            \ analytics data starting from the `from` date up until today, and excluding\
            \ today. - The date you set must be **within the last 30 days**. - The\
            \ value you provide must follow the `YYYY-MM-DD` format. \nconst filter\
            \ = \"videoId:vi3q7HxhApxRF1c8F8r6VeaI\"; // Use this query parameter\
            \ to filter your results to a specific video in a project that you want\
            \ analytics for. You must use the `videoId:` prefix when specifying a\
            \ video ID.\nconst currentPage = 1; // Choose the number of search results\
            \ to return per page. Minimum value: 1\nconst pageSize = 25; // Results\
            \ per page. Allowed values 1-100, default is 25.\n\nconst videoPlays =\
            \ await client.analytics.getVideosPlays({\n  from, dimension, to, filter,\
            \ currentPage, pageSize\n});"
        - language: python
          code: "import apivideo\nfrom apivideo.api import analytics_api\nfrom apivideo.model.analytics_plays_response\
            \ import AnalyticsPlaysResponse\nfrom apivideo.model.not_found import\
            \ NotFound\nfrom apivideo.model.analytics_plays400_error import AnalyticsPlays400Error\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = analytics_api.AnalyticsApi(api_client)\n\
            \    _from = dateutil_parser('2023-06-01').date() # date | Use this query\
            \ parameter to set the start date for the time period that you want analytics\
            \ for. - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \n    dimension = \"\
            browser\" # str | Use this query parameter to define the dimension that\
            \ you want analytics for. - `videoId`: Returns analytics based on the\
            \ public video identifiers. - `emittedAt`: Returns analytics based on\
            \ the times of the play events. The API returns data in specific interval\
            \ groups. When the date period you set in `from` and `to` is less than\
            \ or equals to 2 days, the response for this dimension is grouped in hourly\
            \ intervals. Otherwise, it is grouped in daily intervals. - `country`:\
            \ Returns analytics based on the viewers' country. The list of supported\
            \ country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    to = dateutil_parser('2023-06-10').date()\
            \ # date | Use this optional query parameter to set the end date for the\
            \ time period that you want analytics for. - If you do not specify a `to`\
            \ date, the API returns analytics data starting from the `from` date up\
            \ until today, and excluding today. - The date you set must be **within\
            \ the last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format.  (optional)\n    filter = \"videoId:vi3q7HxhApxRF1c8F8r6VeaI\"\
            \ # str | Use this query parameter to filter your results to a specific\
            \ video in a project that you want analytics for. You must use the `videoId:`\
            \ prefix when specifying a video ID. (optional)\n    current_page = 2\
            \ # int | Choose the number of search results to return per page. Minimum\
            \ value: 1 (optional) if omitted the server will use the default value\
            \ of 1\n    page_size = 30 # int | Results per page. Allowed values 1-100,\
            \ default is 25. (optional) if omitted the server will use the default\
            \ value of 25\n\n    # example passing only required values which don't\
            \ have defaults set\n    try:\n        # Get play events for video\n \
            \       api_response = api_instance.get_videos_plays(_from, dimension)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling AnalyticsApi->get_videos_plays:\
            \ %s\\n\" % e)\n\n    # example passing only required values which don't\
            \ have defaults set\n    # and optional values\n    try:\n        # Get\
            \ play events for video\n        api_response = api_instance.get_videos_plays(_from,\
            \ dimension, to=to, filter=filter, current_page=current_page, page_size=page_size)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling AnalyticsApi->get_videos_plays:\
            \ %s\\n\" % e)\n"
        - language: java
          code: "// Import classes:\nimport video.api.client.ApiVideoClient;\nimport\
            \ video.api.client.api.ApiException;\nimport video.api.client.api.models.*;\n\
            import video.api.client.api.clients.AnalyticsApi;\nimport java.util.*;\n\
            \npublic class Example {\n  public static void main(String[] args) {\n\
            \    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\");\n \
            \   // if you rather like to use the sandbox environment:\n    // ApiVideoClient\
            \ client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\", Environment.SANDBOX);\n\
            \n    AnalyticsApi apiInstance = client.analytics();\n\n    LocalDate\
            \ from = LocalDate.parse(\"2023-06-01\"); // Use this query parameter\
            \ to set the start date for the time period that you want analytics for.\
            \ - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \n    String dimension\
            \ = \"videoId\"; // Use this query parameter to define the dimension that\
            \ you want analytics for. - `videoId`: Returns analytics based on the\
            \ public video identifiers. - `emittedAt`: Returns analytics based on\
            \ the times of the play events. The API returns data in specific interval\
            \ groups. When the date period you set in `from` and `to` is less than\
            \ or equals to 2 days, the response for this dimension is grouped in hourly\
            \ intervals. Otherwise, it is grouped in daily intervals. - `country`:\
            \ Returns analytics based on the viewers' country. The list of supported\
            \ country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    LocalDate to = LocalDate.parse(\"2023-06-10\"\
            ); // Use this optional query parameter to set the end date for the time\
            \ period that you want analytics for. - If you do not specify a `to` date,\
            \ the API returns analytics data starting from the `from` date up until\
            \ today, and excluding today. - The date you set must be **within the\
            \ last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format. \n    String filter = \"videoId:vi3q7HxhApxRF1c8F8r6VeaI\";\
            \ // Use this query parameter to filter your results to a specific video\
            \ in a project that you want analytics for. You must use the `videoId:`\
            \ prefix when specifying a video ID.\n    Integer currentPage = 1; //\
            \ Choose the number of search results to return per page. Minimum value:\
            \ 1\n    Integer pageSize = 25; // Results per page. Allowed values 1-100,\
            \ default is 25.\n\n    try {\n      Page<AnalyticsData> result = apiInstance.getVideosPlays(from,\
            \ dimension)\n            .to(to)\n            .filter(filter)\n     \
            \       .currentPage(currentPage)\n            .pageSize(pageSize)\n \
            \           .execute();\n      System.out.println(result);\n    } catch\
            \ (ApiException e) {\n      System.err.println(\"Exception when calling\
            \ AnalyticsApi#getVideosPlays\");\n      System.err.println(\"Status code:\
            \ \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "using System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class getVideosPlaysExample\n    {\n        public static\
            \ void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var from = 2023-06-01;\
            \  // DateTime | Use this query parameter to set the start date for the\
            \ time period that you want analytics for. - The API returns analytics\
            \ data including the day you set in `from`. - The date you set must be\
            \ **within the last 30 days**. - The value you provide must follow the\
            \ `YYYY-MM-DD` format. \n            var dimension = browser;  // string\
            \ | Use this query parameter to define the dimension that you want analytics\
            \ for. - `videoId`: Returns analytics based on the public video identifiers.\
            \ - `emittedAt`: Returns analytics based on the times of the play events.\
            \ The API returns data in specific interval groups. When the date period\
            \ you set in `from` and `to` is less than or equals to 2 days, the response\
            \ for this dimension is grouped in hourly intervals. Otherwise, it is\
            \ grouped in daily intervals. - `country`: Returns analytics based on\
            \ the viewers' country. The list of supported country names are based\
            \ on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n            var to = 2023-06-10;  // DateTime?\
            \ | Use this optional query parameter to set the end date for the time\
            \ period that you want analytics for. - If you do not specify a `to` date,\
            \ the API returns analytics data starting from the `from` date up until\
            \ today, and excluding today. - The date you set must be **within the\
            \ last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format.  (optional) \n            var filter = videoId:vi3q7HxhApxRF1c8F8r6VeaI;\
            \  // string | Use this query parameter to filter your results to a specific\
            \ video in a project that you want analytics for. You must use the `videoId:`\
            \ prefix when specifying a video ID. (optional) \n            var currentPage\
            \ = 2;  // int? | Choose the number of search results to return per page.\
            \ Minimum value: 1 (optional)  (default to 1)\n            var pageSize\
            \ = 30;  // int? | Results per page. Allowed values 1-100, default is\
            \ 25. (optional)  (default to 25)\n            var apiAnalyticsInstance\
            \ = apiInstance.Analytics();\n            try\n            {\n       \
            \         // Get play events for video\n                AnalyticsPlaysResponse\
            \ result = apiAnalyticsInstance.getVideosPlays(from, dimension, to, filter,\
            \ currentPage, pageSize);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling AnalyticsApi.getVideosPlays:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/AnalyticsApi.md#getVideosPlays\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$from = new \\DateTime(\"\
            2023-06-01\"); // Use this query parameter to set the start date for the\
            \ time period that you want analytics for. - The API returns analytics\
            \ data including the day you set in `from`. - The date you set must be\
            \ **within the last 30 days**. - The value you provide must follow the\
            \ `YYYY-MM-DD` format. \n$dimension = \"videoId\"; // Use this query parameter\
            \ to define the dimension that you want analytics for. - `videoId`: Returns\
            \ analytics based on the public video identifiers. - `emittedAt`: Returns\
            \ analytics based on the times of the play events. The API returns data\
            \ in specific interval groups. When the date period you set in `from`\
            \ and `to` is less than or equals to 2 days, the response for this dimension\
            \ is grouped in hourly intervals. Otherwise, it is grouped in daily intervals.\
            \ - `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n\n$plays = $client->analytics()->getVideosPlays($from,\
            \ $dimension, array(\n    'to' => new \\DateTime('2023-06-10'), // Use\
            \ this optional query parameter to set the end date for the time period\
            \ that you want analytics for. - If you do not specify a `to` date, the\
            \ API returns analytics data starting from the `from` date up until today,\
            \ and excluding today. - The date you set must be **within the last 30\
            \ days**. - The value you provide must follow the `YYYY-MM-DD` format.\
            \ \n    'filter' => \"videoId:vi3q7HxhApxRF1c8F8r6VeaI\", // Use this\
            \ query parameter to filter your results to a specific video in a project\
            \ that you want analytics for. You must use the `videoId:` prefix when\
            \ specifying a video ID.\n    'currentPage' => 2, // Choose the number\
            \ of search results to return per page. Minimum ->setvalue(1)\n    'pageSize'\
            \ => 30 // Results per page. Allowed values 1-100, default is 25.\n)); "
        - language: swift
          code: "// The following code samples are still beta. For any issue, please\
            \ report via http://github.com/OpenAPITools/openapi-generator/issues/new\n\
            import ApiVideoClient\n\nlet from = Date() // Date | Use this query parameter\
            \ to set the start date for the time period that you want analytics for.\
            \ - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \nlet dimension = \"\
            dimension_example\" // String | Use this query parameter to define the\
            \ dimension that you want analytics for. - `videoId`: Returns analytics\
            \ based on the public video identifiers. - `emittedAt`: Returns analytics\
            \ based on the times of the play events. The API returns data in specific\
            \ interval groups. When the date period you set in `from` and `to` is\
            \ less than or equals to 2 days, the response for this dimension is grouped\
            \ in hourly intervals. Otherwise, it is grouped in daily intervals. -\
            \ `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\nlet to = Date() // Date | Use this optional\
            \ query parameter to set the end date for the time period that you want\
            \ analytics for. - If you do not specify a `to` date, the API returns\
            \ analytics data starting from the `from` date up until today, and excluding\
            \ today. - The date you set must be **within the last 30 days**. - The\
            \ value you provide must follow the `YYYY-MM-DD` format.  (optional)\n\
            let filter = \"filter_example\" // String | Use this query parameter to\
            \ filter your results to a specific video in a project that you want analytics\
            \ for. You must use the `videoId:` prefix when specifying a video ID.\
            \ (optional)\nlet currentPage = 987 // Int | Choose the number of search\
            \ results to return per page. Minimum value: 1 (optional) (default to\
            \ 1)\nlet pageSize = 987 // Int | Results per page. Allowed values 1-100,\
            \ default is 25. (optional) (default to 25)\n\n// Get play events for\
            \ video\nAnalyticsAPI.getVideosPlays(from: from, dimension: dimension,\
            \ to: to, filter: filter, currentPage: currentPage, pageSize: pageSize)\
            \ { (response, error) in\n    guard error == nil else {\n        print(error)\n\
            \        return\n    }\n\n    if (response) {\n        dump(response)\n\
            \    }\n}\n"
  /analytics/videos/{videoId}:
    get:
      description: Retrieve all available user sessions for a specific video. Tutorials
        that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
      operationId: GET_analytics-videos-videoId
      parameters:
      - description: The unique identifier for the video you want to retrieve session
          information for.
        example: vi4k0jvEUuaTdRAEjQ4Prklg
        explode: false
        in: path
        name: videoId
        required: true
        schema:
          type: string
        style: simple
      - description: "Period must have one of the following formats: \n- For a day\
          \ : 2018-01-01,\n- For a week: 2018-W01, \n- For a month: 2018-01\n- For\
          \ a year: 2018\nFor a range period: \n-  Date range: 2018-01-01/2018-01-15\n"
        explode: true
        in: query
        name: period
        required: true
        schema:
          format: period
          type: string
        style: form
      - description: Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata)
          filter. Send an array of key value pairs you want to filter sessios with.
        example: metadata[Author]=John Doe&metadata[Format]=Tutorial
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: deepObject
        x-is-deep-object: true
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - session:
                        sessionId: psEmFwGQUAXR2lFHj5nDOpy
                        loadedAt: 2019-06-24T11:45:01.109Z
                        endedAt: 2019-06-24T11:49:19.243Z
                      location:
                        country: France
                        city: Paris
                      referrer:
                        url: https://api.video
                        medium: organic
                        source: https://google.com
                        searchTerm: video encoding hosting and delivery
                      device:
                        type: desktop
                        vendor: Dell
                        model: unknown
                      os:
                        name: Microsoft Windows
                        shortname: W10
                        version: Windows10
                      client:
                        type: browser
                        name: Firefox
                        version: "67.0"
                    pagination:
                      currentPage: 1
                      currentPageItems: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 1
                      links:
                      - rel: self
                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1&pageSize=25
                      - rel: last
                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/raw-statistics-list-sessions-response'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: List video player sessions
      tags:
      - Raw statistics
      x-client-action: listVideoSessions
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/RawStatisticsApi.md#listVideoSessions\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \    req := apivideosdk.RawStatisticsApiListVideoSessionsRequest{}\n \
            \   \n    req.VideoId(\"vi4k0jvEUuaTdRAEjQ4Prklg\") // string | The unique\
            \ identifier for the video you want to retrieve session information for.\n\
            \    req.Period(\"period_example\") // string | Period must have one of\
            \ the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,\
            \ - For a month: 2018-01 - For a year: 2018  For a range period: -  Date\
            \ range: 2018-01-01/2018-01-15 \n    req.Metadata(map[string]string{\"\
            key\": \"Inner_example\"}) // map[string]string | Metadata and Dynamic\
            \ Metadata filter. Send an array of key value pairs you want to filter\
            \ sessios with.\n    req.CurrentPage(int32(2)) // int32 | Choose the number\
            \ of search results to return per page. Minimum value: 1 (default to 1)\n\
            \    req.PageSize(int32(30)) // int32 | Results per page. Allowed values\
            \ 1-100, default is 25. (default to 25)\n\n    res, err := client.RawStatistics.ListVideoSessions(videoId\
            \ string, req)\n    \n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `RawStatistics.ListVideoSessions``: %v\\\n\", err)\n\
            \    }\n    // response from `ListVideoSessions`: RawStatisticsListSessionsResponse\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `RawStatistics.ListVideoSessions`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/RawStatisticsApi.md#listVideoSessions\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for\
            \ the video you want to retrieve session information for.\nconst period\
            \ = '2018-01'; // Period must have one of the following formats:  - For\
            \ a day : 2018-01-01, - For a week: 2018-W01, - For a month: 2018-01 -\
            \ For a year: 2018  For a range period: -  Date range: 2018-01-01/2018-01-15\
            \ \nconst metadata = { // Metadata and Dynamic Metadata filter. Send an\
            \ array of key value pairs you want to filter sessios with.\n  metadataKey:\
            \ \"metadataValue\"\n}; \nconst currentPage = 2; // Choose the number\
            \ of search results to return per page. Minimum value: 1\nconst pageSize\
            \ = 30; // Results per page. Allowed values 1-100, default is 25.\n\n\
            const videoSessions = await client.rawStatistics.listVideoSessions({ videoId,\
            \ period, metadata, currentPage, pageSize }); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/RawStatisticsApi.md#listVideoSessions

            import apivideo
            from apivideo.api import raw_statistics_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.raw_statistics_list_sessions_response import RawStatisticsListSessionsResponse
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = raw_statistics_api.RawStatisticsApi(api_client)
                video_id = "vi4k0jvEUuaTdRAEjQ4Prklg" # str | The unique identifier for the video you want to retrieve session information for.
                period = "period_example" # str | Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01, - For a month: 2018-01 - For a year: 2018  For a range period: -  Date range: 2018-01-01/2018-01-15  (optional)
                metadata = {
                    "key": "key_example",
                } # {str: (str,)} | Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)
                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1
                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25

                # example passing only required values which don't have defaults set
                try:
                    # List video player sessions
                    api_response = api_instance.list_video_sessions(video_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_video_sessions: %s\n" % e)

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # List video player sessions
                    api_response = api_instance.list_video_sessions(video_id, period=period, metadata=metadata, current_page=current_page, page_size=page_size)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_video_sessions: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/RawStatisticsApi.md#listVideoSessions\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.RawStatisticsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    RawStatisticsApi apiInstance\
            \ = client.rawStatistics();\n    \n    String videoId = \"vi4k0jvEUuaTdRAEjQ4Prklg\"\
            ; // The unique identifier for the video you want to retrieve session\
            \ information for.\n    String period = \"period_example\"; // Period\
            \ must have one of the following formats:  - For a day : 2018-01-01, -\
            \ For a week: 2018-W01, - For a month: 2018-01 - For a year: 2018  For\
            \ a range period: -  Date range: 2018-01-01/2018-01-15 \n    Map<String,\
            \ String> metadata = new HashMap(); // Metadata and Dynamic Metadata filter.\
            \ Send an array of key value pairs you want to filter sessios with.\n\
            \    Integer currentPage = 1; // Choose the number of search results to\
            \ return per page. Minimum value: 1\n    Integer pageSize = 25; // Results\
            \ per page. Allowed values 1-100, default is 25.\n\n    try {\n      Page<VideoSession>\
            \ result = apiInstance.listVideoSessions(videoId)\n            .period(period)\n\
            \            .metadata(metadata)\n            .currentPage(currentPage)\n\
            \            .pageSize(pageSize)\n            .execute();\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling RawStatisticsApi#listVideoSessions\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/RawStatisticsApi.md#listVideoSessions\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class listVideoSessionsExample\n    {\n        public static\
            \ void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var videoId =\
            \ vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the\
            \ video you want to retrieve session information for.\n            var\
            \ period = period_example;  // string | Period must have one of the following\
            \ formats:  - For a day : 2018-01-01, - For a week: 2018-W01, - For a\
            \ month: 2018-01 - For a year: 2018  For a range period: -  Date range:\
            \ 2018-01-01/2018-01-15  (optional) \n            var metadata = new Dictionary<string,\
            \ string>(); // Dictionary<string, string> | Metadata and Dynamic Metadata\
            \ filter. Send an array of key value pairs you want to filter sessios\
            \ with. (optional) \n            var currentPage = 2;  // int? | Choose\
            \ the number of search results to return per page. Minimum value: 1 (optional)\
            \  (default to 1)\n            var pageSize = 30;  // int? | Results per\
            \ page. Allowed values 1-100, default is 25. (optional)  (default to 25)\n\
            \            var apiRawStatisticsInstance = apiInstance.RawStatistics();\n\
            \            try\n            {\n                // List video player\
            \ sessions\n                RawStatisticsListSessionsResponse result =\
            \ apiRawStatisticsInstance.listVideoSessions(videoId, period, metadata,\
            \ currentPage, pageSize);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling RawStatisticsApi.listVideoSessions:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/RawStatisticsApi.md#listVideoSessions\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg';\
            \ // The unique identifier for the video you want to retrieve session\
            \ information for.\n\n$videoSessions = $client->rawStatistics()->listVideoSessions($videoId,\
            \ array(\n    'period' => '2018-01', // Period must have one of the following\
            \ formats: - For a day : 2018-01-01, - For a week: 2018-W01, - For a month:\
            \ 2018-01 - For a year: 2018  For a range period: -  Date range: 2018-01-01/2018-01-15\
            \ \n    'metadata' => array( // Metadata and Dynamic Metadata filter.\
            \ Send an array of key value pairs you want to filter sessions with.\n\
            \        'key' => 'value'\n    ),\n    'currentPage' => 2, // Choose the\
            \ number of search results to return per page. Minimum ->setvalue(1)\n\
            \    'pageSize' => 30 // Results per page. Allowed values 1-100, default\
            \ is 25.\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/RawStatisticsAPI.md#listVideoSessions
  /analytics/live-streams/plays:
    get:
      description: Retrieve filtered analytics about the number of plays for your
        live streams in a project.
      operationId: GET_analytics-live-streams-plays
      parameters:
      - description: |
          Use this query parameter to set the start date for the time period that you want analytics for.
          - The API returns analytics data including the day you set in `from`.
          - The date you set must be **within the last 30 days**.
          - The value you provide must follow the `YYYY-MM-DD` format.
        example: 2023-06-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          Use this optional query parameter to set the end date for the time period that you want analytics for.
          - If you do not specify a `to` date, the API returns analytics data starting from the `from` date up until today, and excluding today.
          - The date you set must be **within the last 30 days**.
          - The value you provide must follow the `YYYY-MM-DD` format.
        example: 2023-06-10
        explode: true
        in: query
        name: to
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |-
          Use this query parameter to define the dimension that you want analytics for.
          - `liveStreamId`: Returns analytics based on the public live stream identifiers.
          - `emittedAt`: Returns analytics based on the times of the play events. The API returns data in specific interval groups. When the date period you set in `from` and `to` is less than or equals to 2 days, the response for this dimension is grouped in hourly intervals. Otherwise, it is grouped in daily intervals.
          - `country`: Returns analytics based on the viewers' country. The list of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).
          - `deviceType`: Returns analytics based on the type of device used by the viewers during the play event.
          - `operatingSystem`: Returns analytics based on the operating system used by the viewers during the play event.
          - `browser`: Returns analytics based on the browser used by the viewers during the play event.
        example: browser
        explode: false
        in: query
        name: dimension
        required: true
        schema:
          enum:
          - liveStreamId
          - emittedAt
          - country
          - deviceType
          - operatingSystem
          - browser
          type: string
        style: form
      - description: Use this query parameter to filter your results to a specific
          live stream in a project that you want analytics for. You must use the `liveStreamId:`
          prefix when specifying a live stream ID.
        example: liveStreamId:li3q7HxhApxRF1c8F8r6VeaI
        explode: false
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Dimension is liveStreamId:
                  description: Breakdown video-plays by liveStreamId for a project.
                  value:
                    data:
                    - value: li3q7HxhApxRF1c8F8r6VeaI
                      plays: 100
                    - value: li3q7HxhApxRF1c8F8r6VeaB
                      plays: 10
                    - value: li3q7HxhApxRF1c8F8r6VeaD
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 2
                      pagesTotal: 2
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/live-streams/plays?dimension=liveStreamId&currentPage=1&pageSize=2
                      - rel: first
                        uri: /analytics/live-streams/plays?dimension=liveStreamId&currentPage=2&pageSize=1
                      - rel: last
                        uri: /analytics/live-streams/plays?dimension=liveStreamId&currentPage=2&pageSize=1
                Dimension is country, paginated:
                  description: Breakdown video-plays by country for a project, with
                    pagination.
                  value:
                    data:
                    - value: france
                      plays: 100
                    - value: united states
                      plays: 10
                    - value: spain
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 2
                      pageSize: 2
                      pagesTotal: 2
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/live-streams/plays?dimension=country&currentPage=1&pageSize=2
                      - rel: first
                        uri: /analytics/live-streams/plays?dimension=country&currentPage=1&pageSize=2
                      - rel: last
                        uri: /analytics/live-streams/plays?dimension=country&currentPage=2&pageSize=1
                Dimension is emittedAt, filtered for a liveStreamId:
                  description: Breakdown video-plays by the time of play events, for
                    a specific live stream.
                  value:
                    data:
                    - value: 2023-06-10T10:00:00.000Z
                      plays: 100
                    - value: 2023-06-10T11:00:00.000Z
                      plays: 10
                    - value: 2023-06-10T12:00:00.000Z
                      plays: 1
                    pagination:
                      currentPage: 1
                      currentPageItems: 3
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 3
                      links:
                      - rel: self
                        uri: /analytics/live-streams/plays?dimension=videoId&filter=liveStreamId:li3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/live-streams/plays?dimension=videoId&filter=liveStreamId:li3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
                      - rel: last
                        uri: /analytics/live-streams/plays?dimension=videoId&filter=liveStreamId:li3VooPMbQLWdPF26qfmNVX6&currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/analytics-plays-response'
          description: Success
        "400":
          content:
            application/json:
              examples:
                Missing parameter:
                  description: This error occurs when a required query-parameter is
                    missing.
                  value:
                    type: https://docs.api.video/reference/invalid-attribute
                    title: An attribute is invalid.
                    status: 400
                    detail: This value must be of type string.
                    name: dimension
                Invalid parameter:
                  description: This error occurs when a required query-parameter format
                    is invalid.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be of the following structure(s): liveStreamId:{liveStreamId}'
                    name: filter
                Dimension not allowed:
                  description: This error occurs when the dimension you requested
                    is not allowed for the endpoint. For example, the dimension `videoId`
                    is not allowed for the `/live-streams` endpoint.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be part of the following values: emittedAt,liveStreamId,country,deviceType,operatingSystem,browser'
                    name: dimension
                Dimension unknown:
                  description: This error occurs when the dimension you requested
                    is unknown.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be part of the following values: emittedAt,liveStreamId,country,deviceType,operatingSystem,browser'
                    name: dimension
                Invalid filter:
                  description: This error occurs when the format of the filter you
                    requested is invalid.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: 'This value must be of the following structure(s): liveStreamId:{liveStreamId}'
                    name: filter
                Invalid liveStreamId:
                  description: This error occurs when the liveStreamId you requested
                    does not refer to an existing live stream.
                  value:
                    type: https://docs.api.video/reference/request-invalid-query-parameter
                    title: A query parameter is invalid.
                    status: 400
                    detail: This value must refer to an existing live stream
                    name: filter
              schema:
                $ref: '#/components/schemas/analytics-plays-400-error'
          description: Bad request error
        "403":
          content:
            application/json:
              examples:
                Analytics is disabled:
                  value:
                    type: https://docs.api.video/reference/authorization-disabled-analytics
                    title: You cannot get analytics from this project.
                    status: 403
              schema:
                $ref: '#/components/schemas/403-error-schema'
          description: Forbidden - Disabled Analytics
        "404":
          content:
            application/json:
              examples:
                Endpoint not found:
                  value:
                    type: null
                    title: null
                    name: null
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Get play events for live stream
      tags:
      - Analytics
      x-client-action: getLiveStreamsPlays
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\
            \n    \"time\"\n    apivideosdk \"github.com/apivideo/api.video-go-client\"\
            \n)\n\nfunc main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\"\
            ).Build()\n    // if you rather like to use the sandbox environment:\n\
            \    // client := apivideosdk.SandboxClientBuilder(\"YOU_SANDBOX_API_KEY\"\
            ).Build()\n    req := apivideosdk.AnalyticsApiGetLiveStreamsPlaysRequest{}\n\
            \n    req.From(time.Now()) // string | Use this query parameter to set\
            \ the start date for the time period that you want analytics for. - The\
            \ API returns analytics data including the day you set in `from`. - The\
            \ date you set must be **within the last 30 days**. - The value you provide\
            \ must follow the `YYYY-MM-DD` format. \n    req.Dimension(\"browser\"\
            ) // string | Use this query parameter to define the dimension that you\
            \ want analytics for. - `liveStreamId`: Returns analytics based on the\
            \ public live stream identifiers. - `emittedAt`: Returns analytics based\
            \ on the times of the play events. The API returns data in specific interval\
            \ groups. When the date period you set in `from` and `to` is less than\
            \ or equals to 2 days, the response for this dimension is grouped in hourly\
            \ intervals. Otherwise, it is grouped in daily intervals. - `country`:\
            \ Returns analytics based on the viewers' country. The list of supported\
            \ country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    req.To(time.Now()) // string | Use this\
            \ optional query parameter to set the end date for the time period that\
            \ you want analytics for. - If you do not specify a `to` date, the API\
            \ returns analytics data starting from the `from` date up until today,\
            \ and excluding today. - The date you set must be **within the last 30\
            \ days**. - The value you provide must follow the `YYYY-MM-DD` format.\
            \ \n    req.Filter(\"liveStreamId:li3q7HxhApxRF1c8F8r6VeaI\") // string\
            \ | Use this query parameter to filter your results to a specific live\
            \ stream in a project that you want analytics for. You must use the `liveStreamId:`\
            \ prefix when specifying a live stream ID.\n    req.CurrentPage(int32(2))\
            \ // int32 | Choose the number of search results to return per page. Minimum\
            \ value: 1 (default to 1)\n    req.PageSize(int32(30)) // int32 | Results\
            \ per page. Allowed values 1-100, default is 25. (default to 25)\n\n \
            \   res, err := client.Analytics.GetLiveStreamsPlays(req)\n\n\n    if\
            \ err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `Analytics.GetLiveStreamsPlays``:\
            \ %v\\n\", err)\n    }\n    // response from `GetLiveStreamsPlays`: AnalyticsPlaysResponse\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `Analytics.GetLiveStreamsPlays`:\
            \ %v\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/AnalyticsApi.md#getLiveStreamsPlays\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const from = \"2023-06-01\"; // Use this query parameter to set the start\
            \ date for the time period that you want analytics for. - The API returns\
            \ analytics data including the day you set in `from`. - The date you set\
            \ must be **within the last 30 days**. - The value you provide must follow\
            \ the `YYYY-MM-DD` format. \nconst dimension = \"liveStreamId\"; // Use\
            \ this query parameter to define the dimension that you want analytics\
            \ for. - `liveStreamId`: Returns analytics based on the public live stream\
            \ identifiers. - `emittedAt`: Returns analytics based on the times of\
            \ the play events. The API returns data in specific interval groups. When\
            \ the date period you set in `from` and `to` is less than or equals to\
            \ 2 days, the response for this dimension is grouped in hourly intervals.\
            \ Otherwise, it is grouped in daily intervals. - `country`: Returns analytics\
            \ based on the viewers' country. The list of supported country names are\
            \ based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\nconst to = \"2023-06-10\"; // Use this optional\
            \ query parameter to set the end date for the time period that you want\
            \ analytics for. - If you do not specify a `to` date, the API returns\
            \ analytics data starting from the `from` date up until today, and excluding\
            \ today. - The date you set must be **within the last 30 days**. - The\
            \ value you provide must follow the `YYYY-MM-DD` format. \nconst filter\
            \ = \"liveStreamId:li3q7HxhApxRF1c8F8r6VeaI\"; // Use this query parameter\
            \ to filter your results to a specific live stream in a project that you\
            \ want analytics for. You must use the `liveStreamId:` prefix when specifying\
            \ a live stream ID.\nconst currentPage = 1; // Choose the number of search\
            \ results to return per page. Minimum value: 1\nconst pageSize = 25; //\
            \ Results per page. Allowed values 1-100, default is 25.\n\nconst liveStreamsPlays\
            \ = await client.analytics.getLiveStreamsPlays({\n  from, dimension, to,\
            \ filter, currentPage, pageSize\n});"
        - language: python
          code: "import apivideo\nfrom apivideo.api import analytics_api\nfrom apivideo.model.analytics_plays_response\
            \ import AnalyticsPlaysResponse\nfrom apivideo.model.not_found import\
            \ NotFound\nfrom apivideo.model.analytics_plays400_error import AnalyticsPlays400Error\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = analytics_api.AnalyticsApi(api_client)\n\
            \    _from = dateutil_parser('2023-06-01').date() # date | Use this query\
            \ parameter to set the start date for the time period that you want analytics\
            \ for. - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \n    dimension = \"\
            browser\" # str | Use this query parameter to define the dimension that\
            \ you want analytics for. - `liveStreamId`: Returns analytics based on\
            \ the public live stream identifiers. - `emittedAt`: Returns analytics\
            \ based on the times of the play events. The API returns data in specific\
            \ interval groups. When the date period you set in `from` and `to` is\
            \ less than or equals to 2 days, the response for this dimension is grouped\
            \ in hourly intervals. Otherwise, it is grouped in daily intervals. -\
            \ `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    to = dateutil_parser('2023-06-10').date()\
            \ # date | Use this optional query parameter to set the end date for the\
            \ time period that you want analytics for. - If you do not specify a `to`\
            \ date, the API returns analytics data starting from the `from` date up\
            \ until today, and excluding today. - The date you set must be **within\
            \ the last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format.  (optional)\n    filter = \"liveStreamId:li3q7HxhApxRF1c8F8r6VeaI\"\
            \ # str | Use this query parameter to filter your results to a specific\
            \ live stream in a project that you want analytics for. You must use the\
            \ `liveStreamId:` prefix when specifying a live stream ID. (optional)\n\
            \    current_page = 2 # int | Choose the number of search results to return\
            \ per page. Minimum value: 1 (optional) if omitted the server will use\
            \ the default value of 1\n    page_size = 30 # int | Results per page.\
            \ Allowed values 1-100, default is 25. (optional) if omitted the server\
            \ will use the default value of 25\n\n    # example passing only required\
            \ values which don't have defaults set\n    try:\n        # Get play events\
            \ for live stream\n        api_response = api_instance.get_live_streams_plays(_from,\
            \ dimension)\n        pprint(api_response)\n    except apivideo.ApiException\
            \ as e:\n        print(\"Exception when calling AnalyticsApi->get_live_streams_plays:\
            \ %s\\n\" % e)\n\n    # example passing only required values which don't\
            \ have defaults set\n    # and optional values\n    try:\n        # Get\
            \ play events for live stream\n        api_response = api_instance.get_live_streams_plays(_from,\
            \ dimension, to=to, filter=filter, current_page=current_page, page_size=page_size)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling AnalyticsApi->get_live_streams_plays:\
            \ %s\\n\" % e)\n"
        - language: java
          code: "// Import classes:\nimport video.api.client.ApiVideoClient;\nimport\
            \ video.api.client.api.ApiException;\nimport video.api.client.api.models.*;\n\
            import video.api.client.api.clients.AnalyticsApi;\nimport java.util.*;\n\
            \npublic class Example {\n  public static void main(String[] args) {\n\
            \    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\");\n \
            \   // if you rather like to use the sandbox environment:\n    // ApiVideoClient\
            \ client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\", Environment.SANDBOX);\n\
            \n    AnalyticsApi apiInstance = client.analytics();\n\n    LocalDate\
            \ from = LocalDate.parse(\"2023-06-01\"); // Use this query parameter\
            \ to set the start date for the time period that you want analytics for.\
            \ - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \n    String dimension\
            \ = \"liveStreamId\"; // Use this query parameter to define the dimension\
            \ that you want analytics for. - `liveStreamId`: Returns analytics based\
            \ on the public live stream identifiers. - `emittedAt`: Returns analytics\
            \ based on the times of the play events. The API returns data in specific\
            \ interval groups. When the date period you set in `from` and `to` is\
            \ less than or equals to 2 days, the response for this dimension is grouped\
            \ in hourly intervals. Otherwise, it is grouped in daily intervals. -\
            \ `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n    LocalDate to = LocalDate.parse(\"2023-06-10\"\
            ); // Use this optional query parameter to set the end date for the time\
            \ period that you want analytics for. - If you do not specify a `to` date,\
            \ the API returns analytics data starting from the `from` date up until\
            \ today, and excluding today. - The date you set must be **within the\
            \ last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format. \n    String filter = \"liveStreamId:li3q7HxhApxRF1c8F8r6VeaI\"\
            ; // Use this query parameter to filter your results to a specific live\
            \ stream in a project that you want analytics for. You must use the `liveStreamId:`\
            \ prefix when specifying a live stream ID.\n    Integer currentPage =\
            \ 1; // Choose the number of search results to return per page. Minimum\
            \ value: 1\n    Integer pageSize = 25; // Results per page. Allowed values\
            \ 1-100, default is 25.\n\n    try {\n      Page<AnalyticsData> result\
            \ = apiInstance.getLiveStreamsPlays(from, dimension)\n            .to(to)\n\
            \            .filter(filter)\n            .currentPage(currentPage)\n\
            \            .pageSize(pageSize)\n            .execute();\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling AnalyticsApi#getLiveStreamsPlays\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: "using System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class getLiveStreamsPlaysExample\n    {\n        public\
            \ static void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var from = 2023-06-01;\
            \  // DateTime | Use this query parameter to set the start date for the\
            \ time period that you want analytics for. - The API returns analytics\
            \ data including the day you set in `from`. - The date you set must be\
            \ **within the last 30 days**. - The value you provide must follow the\
            \ `YYYY-MM-DD` format. \n            var dimension = browser;  // string\
            \ | Use this query parameter to define the dimension that you want analytics\
            \ for. - `liveStreamId`: Returns analytics based on the public live stream\
            \ identifiers. - `emittedAt`: Returns analytics based on the times of\
            \ the play events. The API returns data in specific interval groups. When\
            \ the date period you set in `from` and `to` is less than or equals to\
            \ 2 days, the response for this dimension is grouped in hourly intervals.\
            \ Otherwise, it is grouped in daily intervals. - `country`: Returns analytics\
            \ based on the viewers' country. The list of supported country names are\
            \ based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n            var to = 2023-06-10;  // DateTime?\
            \ | Use this optional query parameter to set the end date for the time\
            \ period that you want analytics for. - If you do not specify a `to` date,\
            \ the API returns analytics data starting from the `from` date up until\
            \ today, and excluding today. - The date you set must be **within the\
            \ last 30 days**. - The value you provide must follow the `YYYY-MM-DD`\
            \ format.  (optional) \n            var filter = liveStreamId:li3q7HxhApxRF1c8F8r6VeaI;\
            \  // string | Use this query parameter to filter your results to a specific\
            \ live stream in a project that you want analytics for. You must use the\
            \ `liveStreamId:` prefix when specifying a live stream ID. (optional)\
            \ \n            var currentPage = 2;  // int? | Choose the number of search\
            \ results to return per page. Minimum value: 1 (optional)  (default to\
            \ 1)\n            var pageSize = 30;  // int? | Results per page. Allowed\
            \ values 1-100, default is 25. (optional)  (default to 25)\n         \
            \   var apiAnalyticsInstance = apiInstance.Analytics();\n            try\n\
            \            {\n                // Get play events for live stream\n \
            \               AnalyticsPlaysResponse result = apiAnalyticsInstance.getLiveStreamsPlays(from,\
            \ dimension, to, filter, currentPage, pageSize);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling AnalyticsApi.getLiveStreamsPlays:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/AnalyticsApi.md#getLiveStreamsPlays\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$from = new \\DateTime(\"\
            2023-06-01\"); // Use this query parameter to set the start date for the\
            \ time period that you want analytics for. - The API returns analytics\
            \ data including the day you set in `from`. - The date you set must be\
            \ **within the last 30 days**. - The value you provide must follow the\
            \ `YYYY-MM-DD` format. \n$dimension = \"liveStreamId\"; // Use this query\
            \ parameter to define the dimension that you want analytics for. - `liveStreamId`:\
            \ Returns analytics based on the public live stream identifiers. - `emittedAt`:\
            \ Returns analytics based on the times of the play events. The API returns\
            \ data in specific interval groups. When the date period you set in `from`\
            \ and `to` is less than or equals to 2 days, the response for this dimension\
            \ is grouped in hourly intervals. Otherwise, it is grouped in daily intervals.\
            \ - `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\n\n$plays = $client->analytics()->getLiveStreamsPlays($from,\
            \ $dimension, array(\n    'to' => new \\DateTime('2023-06-10'), // Use\
            \ this optional query parameter to set the end date for the time period\
            \ that you want analytics for. - If you do not specify a `to` date, the\
            \ API returns analytics data starting from the `from` date up until today,\
            \ and excluding today. - The date you set must be **within the last 30\
            \ days**. - The value you provide must follow the `YYYY-MM-DD` format.\
            \ \n    'filter' => \"liveStreamId:li3q7HxhApxRF1c8F8r6VeaI\", // Use\
            \ this query parameter to filter your results to a specific live stream\
            \ in a project that you want analytics for. You must use the `liveStreamId:`\
            \ prefix when specifying a live stream ID.\n    'currentPage' => 2, //\
            \ Choose the number of search results to return per page. Minimum value:\
            \ 1\n    'pageSize' => 30 // Results per page. Allowed values 1-100, default\
            \ is 25.\n));"
        - language: swift
          code: "// The following code samples are still beta. For any issue, please\
            \ report via http://github.com/OpenAPITools/openapi-generator/issues/new\n\
            import ApiVideoClient\n\nlet from = Date() // Date | Use this query parameter\
            \ to set the start date for the time period that you want analytics for.\
            \ - The API returns analytics data including the day you set in `from`.\
            \ - The date you set must be **within the last 30 days**. - The value\
            \ you provide must follow the `YYYY-MM-DD` format. \nlet dimension = \"\
            dimension_example\" // String | Use this query parameter to define the\
            \ dimension that you want analytics for. - `liveStreamId`: Returns analytics\
            \ based on the public live stream identifiers. - `emittedAt`: Returns\
            \ analytics based on the times of the play events. The API returns data\
            \ in specific interval groups. When the date period you set in `from`\
            \ and `to` is less than or equals to 2 days, the response for this dimension\
            \ is grouped in hourly intervals. Otherwise, it is grouped in daily intervals.\
            \ - `country`: Returns analytics based on the viewers' country. The list\
            \ of supported country names are based on the [GeoNames public database](https://www.geonames.org/countries/).\
            \ - `deviceType`: Returns analytics based on the type of device used by\
            \ the viewers during the play event. - `operatingSystem`: Returns analytics\
            \ based on the operating system used by the viewers during the play event.\
            \ - `browser`: Returns analytics based on the browser used by the viewers\
            \ during the play event.\nlet to = Date() // Date | Use this optional\
            \ query parameter to set the end date for the time period that you want\
            \ analytics for. - If you do not specify a `to` date, the API returns\
            \ analytics data starting from the `from` date up until today, and excluding\
            \ today. - The date you set must be **within the last 30 days**. - The\
            \ value you provide must follow the `YYYY-MM-DD` format.  (optional)\n\
            let filter = \"filter_example\" // String | Use this query parameter to\
            \ filter your results to a specific live stream in a project that you\
            \ want analytics for. You must use the `liveStreamId:` prefix when specifying\
            \ a live stream ID. (optional)\nlet currentPage = 987 // Int | Choose\
            \ the number of search results to return per page. Minimum value: 1 (optional)\
            \ (default to 1)\nlet pageSize = 987 // Int | Results per page. Allowed\
            \ values 1-100, default is 25. (optional) (default to 25)\n\n// Get play\
            \ events for live stream\nAnalyticsAPI.getLiveStreamsPlays(from: from,\
            \ dimension: dimension, to: to, filter: filter, currentPage: currentPage,\
            \ pageSize: pageSize) { (response, error) in\n    guard error == nil else\
            \ {\n        print(error)\n        return\n    }\n\n    if (response)\
            \ {\n        dump(response)\n    }\n}\n"
  /analytics/live-streams/{liveStreamId}:
    get:
      operationId: GET_analytics-live-streams-liveStreamId
      parameters:
      - description: The unique identifier for the live stream you want to retrieve
          analytics for.
        example: vi4k0jvEUuaTdRAEjQ4Jfrgz
        explode: false
        in: path
        name: liveStreamId
        required: true
        schema:
          type: string
        style: simple
      - description: "Period must have one of the following formats: \n- For a day\
          \ : \"2018-01-01\",\n- For a week: \"2018-W01\", \n- For a month: \"2018-01\"\
          \n- For a year: \"2018\"\nFor a range period: \n-  Date range: \"2018-01-01/2018-01-15\"\
          \n"
        example: 2019-01-01T00:00:00.000Z
        explode: true
        in: query
        name: period
        required: true
        schema:
          format: period
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - session:
                        sessionId: ps4zRWVOv2If2vzKJLMr3jQo
                        loadedAt: 2018-09-11T13:04:37.890Z
                        endedAt: 2018-09-11T14:47:22.186Z
                      location:
                        country: France
                        city: Paris
                      referrer:
                        url: unknown
                        medium: unknown
                        source: unknown
                        searchTerm: unknown
                      device:
                        type: desktop
                        vendor: unknown
                        model: unknown
                      os:
                        name: unknown
                        shortname: unknown
                        version: unknown
                      client:
                        type: browser
                        name: Firefox
                        version: "61.0"
                    pagination:
                      currentPage: 1
                      currentPageItems: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 1
                      links:
                      - rel: self
                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1&pageSize=25
                      - rel: last
                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1&pageSize=25
              schema:
                $ref: '#/components/schemas/raw-statistics-list-live-stream-analytics-response'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: liveStreamId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: List live stream player sessions
      tags:
      - Raw statistics
      x-client-action: listLiveStreamSessions
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/RawStatisticsApi.md#listLiveStreamSessions\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \    req := apivideosdk.RawStatisticsApiListLiveStreamSessionsRequest{}\n\
            \    \n    req.LiveStreamId(\"vi4k0jvEUuaTdRAEjQ4Jfrgz\") // string |\
            \ The unique identifier for the live stream you want to retrieve analytics\
            \ for.\n    req.Period(\"2019-01-01\") // string | Period must have one\
            \ of the following formats:  - For a day : \"2018-01-01\", - For a week:\
            \ \"2018-W01\", - For a month: \"2018-01\" - For a year: \"2018\"  For\
            \ a range period: -  Date range: \"2018-01-01/2018-01-15\" \n    req.CurrentPage(int32(2))\
            \ // int32 | Choose the number of search results to return per page. Minimum\
            \ value: 1 (default to 1)\n    req.PageSize(int32(30)) // int32 | Results\
            \ per page. Allowed values 1-100, default is 25. (default to 25)\n\n \
            \   res, err := client.RawStatistics.ListLiveStreamSessions(liveStreamId\
            \ string, req)\n    \n\n    if err != nil {\n        fmt.Fprintf(os.Stderr,\
            \ \"Error when calling `RawStatistics.ListLiveStreamSessions``: %v\\\n\
            \", err)\n    }\n    // response from `ListLiveStreamSessions`: RawStatisticsListLiveStreamAnalyticsResponse\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `RawStatistics.ListLiveStreamSessions`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/RawStatisticsApi.md#listLiveStreamSessions\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier\
            \ for the live stream you want to retrieve analytics for.\nconst period\
            \ = '2019-01-01'; // Period must have one of the following formats:  -\
            \ For a day : \"2018-01-01\", - For a week: \"2018-W01\", - For a month:\
            \ \"2018-01\" - For a year: \"2018\"  For a range period: -  Date range:\
            \ \"2018-01-01/2018-01-15\" \nconst currentPage = 2; // Choose the number\
            \ of search results to return per page. Minimum value: 1\nconst pageSize\
            \ = 30; // Results per page. Allowed values 1-100, default is 25.\n \n\
            const liveStreamSessions = await client.rawStatistics.listLiveStreamSessions({\
            \ liveStreamId, period, currentPage, pageSize })\n"
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/RawStatisticsApi.md#listLiveStreamSessions

            import apivideo
            from apivideo.api import raw_statistics_api
            from apivideo.model.raw_statistics_list_live_stream_analytics_response import RawStatisticsListLiveStreamAnalyticsResponse
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = raw_statistics_api.RawStatisticsApi(api_client)
                live_stream_id = "vi4k0jvEUuaTdRAEjQ4Jfrgz" # str | The unique identifier for the live stream you want to retrieve analytics for.
                period = "2019-01-01" # str | Period must have one of the following formats:  - For a day : "2018-01-01", - For a week: "2018-W01", - For a month: "2018-01" - For a year: "2018"  For a range period: -  Date range: "2018-01-01/2018-01-15"  (optional)
                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1
                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25

                # example passing only required values which don't have defaults set
                try:
                    # List live stream player sessions
                    api_response = api_instance.list_live_stream_sessions(live_stream_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_live_stream_sessions: %s\n" % e)

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # List live stream player sessions
                    api_response = api_instance.list_live_stream_sessions(live_stream_id, period=period, current_page=current_page, page_size=page_size)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_live_stream_sessions: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/RawStatisticsApi.md#listLiveStreamSessions\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.RawStatisticsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    RawStatisticsApi apiInstance\
            \ = client.rawStatistics();\n    \n    String liveStreamId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"\
            ; // The unique identifier for the live stream you want to retrieve analytics\
            \ for.\n    String period = \"2019-01-01\"; // Period must have one of\
            \ the following formats:  - For a day : \"2018-01-01\", - For a week:\
            \ \"2018-W01\", - For a month: \"2018-01\" - For a year: \"2018\"  For\
            \ a range period: -  Date range: \"2018-01-01/2018-01-15\" \n    Integer\
            \ currentPage = 1; // Choose the number of search results to return per\
            \ page. Minimum value: 1\n    Integer pageSize = 25; // Results per page.\
            \ Allowed values 1-100, default is 25.\n\n    try {\n      Page<LiveStreamSession>\
            \ result = apiInstance.listLiveStreamSessions(liveStreamId)\n        \
            \    .period(period)\n            .currentPage(currentPage)\n        \
            \    .pageSize(pageSize)\n            .execute();\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling RawStatisticsApi#listLiveStreamSessions\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/RawStatisticsApi.md#listLiveStreamSessions\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class listLiveStreamSessionsExample\n    {\n        public\
            \ static void Main()\n        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var liveStreamId\
            \ = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the\
            \ live stream you want to retrieve analytics for.\n            var period\
            \ = 2019-01-01;  // string | Period must have one of the following formats:\
            \  - For a day : \"2018-01-01\", - For a week: \"2018-W01\", - For a month:\
            \ \"2018-01\" - For a year: \"2018\"  For a range period: -  Date range:\
            \ \"2018-01-01/2018-01-15\"  (optional) \n            var currentPage\
            \ = 2;  // int? | Choose the number of search results to return per page.\
            \ Minimum value: 1 (optional)  (default to 1)\n            var pageSize\
            \ = 30;  // int? | Results per page. Allowed values 1-100, default is\
            \ 25. (optional)  (default to 25)\n            var apiRawStatisticsInstance\
            \ = apiInstance.RawStatistics();\n            try\n            {\n   \
            \             // List live stream player sessions\n                RawStatisticsListLiveStreamAnalyticsResponse\
            \ result = apiRawStatisticsInstance.listLiveStreamSessions(liveStreamId,\
            \ period, currentPage, pageSize);\n                Debug.WriteLine(result);\n\
            \            }\n            catch (ApiException  e)\n            {\n \
            \               Debug.Print(\"Exception when calling RawStatisticsApi.listLiveStreamSessions:\
            \ \" + e.Message );\n                Debug.Print(\"Status Code: \"+ e.ErrorCode);\n\
            \                Debug.Print(e.StackTrace);\n            }\n        }\n\
            \    }\n}\n"
        - language: php
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/RawStatisticsApi.md#listLiveStreamSessions\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const liveStreamId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier\
            \ for the live stream you want to retrieve analytics for.\nconst period\
            \ = '2019-01-01'; // Period must have one of the following formats:  -\
            \ For a day : \"2018-01-01\", - For a week: \"2018-W01\", - For a month:\
            \ \"2018-01\" - For a year: \"2018\"  For a range period: -  Date range:\
            \ \"2018-01-01/2018-01-15\" \nconst currentPage = 2; // Choose the number\
            \ of search results to return per page. Minimum value: 1\nconst pageSize\
            \ = 30; // Results per page. Allowed values 1-100, default is 25.\n\n\
            // RawStatisticsListLiveStreamAnalyticsResponse\nconst liveStreamSessions\
            \ = await client.rawStatistics.listLiveStreamSessions({ liveStreamId,\
            \ period, currentPage, pageSize })\n"
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/RawStatisticsAPI.md#listLiveStreamSessions
  /analytics/sessions/{sessionId}/events:
    get:
      description: Useful to track and measure video's engagement.
      operationId: GET_analytics-sessions-sessionId-events
      parameters:
      - description: A unique identifier you can use to reference and track a session
          with.
        example: psEmFwGQUAXR2lFHj5nDOpy
        explode: false
        in: path
        name: sessionId
        required: true
        schema:
          type: string
        style: simple
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - type: ready
                      emittedAt: 2020-09-15T09:47:42.000Z
                      at: 0
                    - type: play
                      emittedAt: 2020-09-15T21:35:57.000Z
                      at: 0
                    - type: pause
                      emittedAt: 2020-09-15T21:36:05.000Z
                      at: 7
                    - type: resume
                      emittedAt: 2020-09-15T21:36:19.000Z
                      at: 21
                    - type: seek.forward
                      emittedAt: 2020-09-15T21:36:19.000Z
                      from: 7
                      to: 21
                    - type: end
                      emittedAt: 2020-09-15T21:36:28.000Z
                      at: 30
                    - type: play
                      emittedAt: 2020-09-15T21:36:29.000Z
                      at: 0
                    - type: seek.backward
                      emittedAt: 2020-09-15T21:36:29.000Z
                      from: 30
                      to: 0
                    - type: pause
                      emittedAt: 2020-09-15T21:36:29.000Z
                      at: 21
                    - type: resume
                      emittedAt: 2020-09-15T21:36:30.000Z
                      at: 21
                    - type: seek.forward
                      emittedAt: 2020-09-15T21:36:30.000Z
                      from: 0
                      to: 21
                    - type: pause
                      emittedAt: 2020-09-15T21:36:33.000Z
                      at: 20
                    - type: resume
                      emittedAt: 2020-09-15T21:36:33.000Z
                      at: 20
                    - type: seek.backward
                      emittedAt: 2020-09-15T21:36:33.000Z
                      from: 24
                      to: 20
                    - type: pause
                      emittedAt: 2020-09-15T21:36:39.000Z
                      at: 17
                    - type: resume
                      emittedAt: 2020-09-15T21:36:39.000Z
                      at: 17
                    - type: seek.forward
                      emittedAt: 2020-09-15T21:36:39.000Z
                      from: 17
                      to: 17
                    - type: pause
                      emittedAt: 2020-09-15T21:36:41.000Z
                      at: 19
                    - type: ready
                      emittedAt: 2020-09-17T09:20:47.000Z
                      at: 0
                    - type: ready
                      emittedAt: 2020-09-17T09:41:01.000Z
                      at: 0
                    - type: ready
                      emittedAt: 2020-09-17T09:41:08.000Z
                      at: 0
                    - type: play
                      emittedAt: 2020-09-17T09:41:10.000Z
                      at: 0
                    - type: pause
                      emittedAt: 2020-09-17T09:41:12.000Z
                      at: 1
                    - type: resume
                      emittedAt: 2020-09-17T09:41:13.000Z
                      at: 1
                    - type: pause
                      emittedAt: 2020-09-17T09:41:15.000Z
                      at: 3
                    pagination:
                      currentPage: 1
                      currentPageItems: 25
                      pageSize: 25
                      pagesTotal: 2
                      itemsTotal: 30
                      links:
                      - rel: self
                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1&pageSize=25
                      - rel: first
                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1&pageSize=25
                      - rel: next
                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2&pageSize=25
                      - rel: last
                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2&pageSize=25
              schema:
                $ref: '#/components/schemas/raw-statistics-list-player-session-events-response'
          description: Success
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: videoId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: List player session events
      tags:
      - Raw statistics
      x-client-action: listSessionEvents
      x-group-parameters: true
      x-client-paginated: true
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/RawStatisticsApi.md#listSessionEvents\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \    req := apivideosdk.RawStatisticsApiListSessionEventsRequest{}\n \
            \   \n    req.SessionId(\"psEmFwGQUAXR2lFHj5nDOpy\") // string | A unique\
            \ identifier you can use to reference and track a session with.\n    req.CurrentPage(int32(2))\
            \ // int32 | Choose the number of search results to return per page. Minimum\
            \ value: 1 (default to 1)\n    req.PageSize(int32(30)) // int32 | Results\
            \ per page. Allowed values 1-100, default is 25. (default to 25)\n\n \
            \   res, err := client.RawStatistics.ListSessionEvents(sessionId string,\
            \ req)\n    \n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"\
            Error when calling `RawStatistics.ListSessionEvents``: %v\\\n\", err)\n\
            \    }\n    // response from `ListSessionEvents`: RawStatisticsListPlayerSessionEventsResponse\n\
            \    fmt.Fprintf(os.Stdout, \"Response from `RawStatistics.ListSessionEvents`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/RawStatisticsApi.md#listSessionEvents\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const sessionId = 'psEmFwGQUAXR2lFHj5nDOpy'; // A unique identifier you\
            \ can use to reference and track a session with.\nconst currentPage =\
            \ 2; // Choose the number of search results to return per page. Minimum\
            \ value: 1\nconst pageSize = 30; // Results per page. Allowed values 1-100,\
            \ default is 25.\n\nconst sessionEvents = await client.rawStatistics.listSessionEvents({\
            \ sessionId, currentPage, pageSize }) "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/RawStatisticsApi.md#listSessionEvents

            import apivideo
            from apivideo.api import raw_statistics_api
            from apivideo.model.not_found import NotFound
            from apivideo.model.raw_statistics_list_player_session_events_response import RawStatisticsListPlayerSessionEventsResponse
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = raw_statistics_api.RawStatisticsApi(api_client)
                session_id = "psEmFwGQUAXR2lFHj5nDOpy" # str | A unique identifier you can use to reference and track a session with.
                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1
                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25

                # example passing only required values which don't have defaults set
                try:
                    # List player session events
                    api_response = api_instance.list_session_events(session_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_session_events: %s\n" % e)

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # List player session events
                    api_response = api_instance.list_session_events(session_id, current_page=current_page, page_size=page_size)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling RawStatisticsApi->list_session_events: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/RawStatisticsApi.md#listSessionEvents\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.RawStatisticsApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    RawStatisticsApi apiInstance\
            \ = client.rawStatistics();\n    \n    String sessionId = \"psEmFwGQUAXR2lFHj5nDOpy\"\
            ; // A unique identifier you can use to reference and track a session\
            \ with.\n    Integer currentPage = 1; // Choose the number of search results\
            \ to return per page. Minimum value: 1\n    Integer pageSize = 25; //\
            \ Results per page. Allowed values 1-100, default is 25.\n\n    try {\n\
            \      Page<PlayerSessionEvent> result = apiInstance.listSessionEvents(sessionId)\n\
            \            .currentPage(currentPage)\n            .pageSize(pageSize)\n\
            \            .execute();\n      System.out.println(result);\n    } catch\
            \ (ApiException e) {\n      System.err.println(\"Exception when calling\
            \ RawStatisticsApi#listSessionEvents\");\n      System.err.println(\"\
            Status code: \" + e.getCode());\n      System.err.println(\"Reason: \"\
            \ + e.getMessage());\n      System.err.println(\"Response headers: \"\
            \ + e.getResponseHeaders());\n      e.printStackTrace();\n    }\n  }\n\
            }\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/RawStatisticsApi.md#listSessionEvents

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class listSessionEventsExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var sessionId = psEmFwGQUAXR2lFHj5nDOpy;  // string | A unique identifier you can use to reference and track a session with.
                        var currentPage = 2;  // int? | Choose the number of search results to return per page. Minimum value: 1 (optional)  (default to 1)
                        var pageSize = 30;  // int? | Results per page. Allowed values 1-100, default is 25. (optional)  (default to 25)
                        var apiRawStatisticsInstance = apiInstance.RawStatistics();
                        try
                        {
                            // List player session events
                            RawStatisticsListPlayerSessionEventsResponse result = apiRawStatisticsInstance.listSessionEvents(sessionId, currentPage, pageSize);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling RawStatisticsApi.listSessionEvents: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/RawStatisticsApi.md#listSessionEvents\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$sessionId = 'psEmFwGQUAXR2lFHj5nDOpy';\
            \ // A unique identifier you can use to reference and track a session\
            \ with.\n\n$sessionEvents = $client->rawStatistics()->listSessionEvents($sessionId,\
            \ array(\n    'currentPage' => 2, // Choose the number of search results\
            \ to return per page. Minimum ->setvalue(1)\n    'pageSize' => 30 // Results\
            \ per page. Allowed values 1-100, default is 25.\n)); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/RawStatisticsAPI.md#listSessionEvents
  /webhooks:
    get:
      description: Retrieve a list of all webhooks configured for the current workspace.
      operationId: LIST-webhooks
      parameters:
      - description: The webhook event that you wish to filter on.
        example: video.encoding.quality.completed
        explode: true
        in: query
        name: events
        required: false
        schema:
          type: string
        style: form
      - description: 'Choose the number of search results to return per page. Minimum
          value: 1'
        example: 2
        explode: true
        in: query
        name: currentPage
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: Results per page. Allowed values 1-100, default is 25.
        example: 30
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                    - webhookId: webhook_XXXXXXXXXXXXXXX
                      createdAt: 2021-01-08T14:12:18.000Z
                      events:
                      - video.encoding.quality.completed
                      url: http://clientnotificationserver.com/notif?myquery=query
                    - webhookId: webhook_XXXXXXXXXYYYYYY
                      createdAt: 2021-01-12T12:12:12.000Z
                      events:
                      - video.encoding.quality.completed
                      url: http://clientnotificationserver.com/notif?myquery=query2
                    pagination:
                      currentPage: 1
                      pageSize: 25
                      pagesTotal: 1
                      itemsTotal: 11
                      currentPageItems: 11
                      links:
                      - rel: self
                        uri: https://ws.api.video/webhooks?currentPage=1
                      - rel: first
                        uri: https://ws.api.video/webhooks?currentPage=1
                      - rel: last
                        uri: https://ws.api.video/webhooks?currentPage=1
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
          description: Success
      security:
      - apiKey: []
      summary: List all webhooks
      tags:
      - Webhooks
      x-client-description:
        default: "Thie method returns a list of your webhooks (with all their details).\
          \ \nYou can filter what the webhook list that the API returns using the\
          \ parameters described below."
      x-group-parameters: true
      x-client-paginated: true
      x-optional-object: true
      x-client-action: list
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WebhooksApi.md#list\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \    req := apivideosdk.WebhooksApiListRequest{}\n    \n    req.Events(\"\
            video.encoding.quality.completed\") // string | The webhook event that\
            \ you wish to filter on.\n    req.CurrentPage(int32(2)) // int32 | Choose\
            \ the number of search results to return per page. Minimum value: 1 (default\
            \ to 1)\n    req.PageSize(int32(30)) // int32 | Results per page. Allowed\
            \ values 1-100, default is 25. (default to 25)\n\n    res, err := client.Webhooks.List(req)\n\
            \    \n\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when\
            \ calling `Webhooks.List``: %v\\\n\", err)\n    }\n    // response from\
            \ `List`: WebhooksListResponse\n    fmt.Fprintf(os.Stdout, \"Response\
            \ from `Webhooks.List`: %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WebhooksApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const events = 'video.encoding.quality.completed'; // The webhook event\
            \ that you wish to filter on.\nconst currentPage = 2; // Choose the number\
            \ of search results to return per page. Minimum value: 1\nconst pageSize\
            \ = 30; // Results per page. Allowed values 1-100, default is 25.\n \n\
            const webhooks = await client.webhooks.list({ events, currentPage, pageSize\
            \ }); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WebhooksApi.md#list

            import apivideo
            from apivideo.api import webhooks_api
            from apivideo.model.webhooks_list_response import WebhooksListResponse
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = webhooks_api.WebhooksApi(api_client)
                events = "video.encoding.quality.completed" # str | The webhook event that you wish to filter on. (optional)
                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1
                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25

                # example passing only required values which don't have defaults set
                # and optional values
                try:
                    # List all webhooks
                    api_response = api_instance.list(events=events, current_page=current_page, page_size=page_size)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling WebhooksApi->list: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WebhooksApi.md#list\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.WebhooksApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    WebhooksApi apiInstance\
            \ = client.webhooks();\n    \n    String events = \"video.encoding.quality.completed\"\
            ; // The webhook event that you wish to filter on.\n    Integer currentPage\
            \ = 1; // Choose the number of search results to return per page. Minimum\
            \ value: 1\n    Integer pageSize = 25; // Results per page. Allowed values\
            \ 1-100, default is 25.\n\n    try {\n      Page<Webhook> result = apiInstance.list()\n\
            \            .events(events)\n            .currentPage(currentPage)\n\
            \            .pageSize(pageSize)\n            .execute();\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling WebhooksApi#list\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WebhooksApi.md#list\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class listExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var events = video.encoding.quality.completed;\
            \  // string | The webhook event that you wish to filter on. (optional)\
            \ \n            var currentPage = 2;  // int? | Choose the number of search\
            \ results to return per page. Minimum value: 1 (optional)  (default to\
            \ 1)\n            var pageSize = 30;  // int? | Results per page. Allowed\
            \ values 1-100, default is 25. (optional)  (default to 25)\n         \
            \   var apiWebhooksInstance = apiInstance.Webhooks();\n            try\n\
            \            {\n                // List all webhooks\n               \
            \ WebhooksListResponse result = apiWebhooksInstance.list(events, currentPage,\
            \ pageSize);\n                Debug.WriteLine(result);\n            }\n\
            \            catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling WebhooksApi.list: \" + e.Message );\n         \
            \       Debug.Print(\"Status Code: \"+ e.ErrorCode);\n               \
            \ Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n"
        - language: php
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WebhooksApi.md#list\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const events = 'video.encoding.quality.completed'; // The webhook event\
            \ that you wish to filter on.\nconst currentPage = 2; // Choose the number\
            \ of search results to return per page. Minimum value: 1\nconst pageSize\
            \ = 30; // Results per page. Allowed values 1-100, default is 25.\n\n\
            // WebhooksListResponse\nconst webhooks = await client.webhooks.list({\
            \ events, currentPage, pageSize }); "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WebhooksAPI.md#list
    post:
      description: "Webhooks can push notifications to your server, rather than polling\
        \ api.video for changes. We currently offer four events: \n* ```video.encoding.quality.completed```\
        \ Occurs when a new video is uploaded into your account, it will be encoded\
        \ into several different HLS and mp4 qualities. When each version is encoded,\
        \ your webhook will get a notification.  It will look like ```{ \"type\":\
        \ \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\"\
        , \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"720p\"\
        } ```. This request says that the 720p HLS encoding was completed.\n* ```live-stream.broadcast.started```\
        \  When a live stream begins broadcasting, the broadcasting parameter changes\
        \ from false to true, and this webhook fires.\n* ```live-stream.broadcast.ended```\
        \  This event fires when a live stream has finished broadcasting.\n* ```video.source.recorded```\
        \  This event occurs when a live stream is recorded and submitted for encoding."
      operationId: POST-webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-creation-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    webhookId: webhook_XXXXXXXXXXXXXXX
                    createdAt: 2021-01-08T14:12:18.000Z
                    events:
                    - video.encoding.quality.completed
                    url: http://clientnotificationserver.com/notif?myquery=query
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created
        "400":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/attributerequired
                    events: This attribute is required.
                    name: events
                    status: 400
                    problems:
                    - type: https://docs.api.video/docs/attributerequired
                      title: This attribute is required.
                      name: events
                    - type: https://docs.api.video/docs/attributerequired
                      title: This attribute is required.
                      name: url
                    - type: https://docs.api.video/docs/attributeinvalid
                      title: This attribute must be an array.
                      name: events
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      security:
      - apiKey: []
      summary: Create Webhook
      tags:
      - Webhooks
      x-client-action: create
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WebhooksApi.md#create\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    webhooksCreationPayload := *apivideosdk.NewWebhooksCreationPayload([]string{\"\
            Events_example\"}, \"https://example.com/webhooks\") // WebhooksCreationPayload\
            \ | \n\n    \n    res, err := client.Webhooks.Create(webhooksCreationPayload)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Webhooks.Create``: %v\\\n\", err)\n    }\n    // response from `Create`:\
            \ Webhook\n    fmt.Fprintf(os.Stdout, \"Response from `Webhooks.Create`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WebhooksApi.md#create\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const webhooksCreationPayload = {\n  events: [\"video.encoding.quality.completed\"\
            ], // A list of the webhooks that you are subscribing to. There are Currently\
            \ four webhook options: * ```video.encoding.quality.completed```  Occurs\
            \ when a new video is uploaded into your account, it will be encoded into\
            \ several different HLS and mp4 qualities. When each version is encoded,\
            \ your webhook will get a notification.  It will look like ```{ \"type\"\
            : \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\"\
            , \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"\
            720p\"} ```. This request says that the 720p HLS encoding was completed.\
            \ * ```live-stream.broadcast.started```  When a lives tream begins broadcasting,\
            \ the broadcasting parameter changes from false to true, and this webhook\
            \ fires. * ```live-stream.broadcast.ended```  This event fires when the\
            \ live stream has finished broadcasting, and the broadcasting parameter\
            \ flips from false to true. * ```video.source.recorded```  Occurs when\
            \ a live stream is recorded and submitted for encoding.\n  url: \"https://example.com/webhooks\"\
            , // The url to which HTTP notifications are sent. It could be any http\
            \ or https URL.\n}; \n\nconst webhook = await client.webhooks.create(webhooksCreationPayload); "
        - language: python
          code: "# First install the api client with \"pip install api.video\"\n#\
            \ Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WebhooksApi.md#create\n\
            \nimport apivideo\nfrom apivideo.api import webhooks_api\nfrom apivideo.model.bad_request\
            \ import BadRequest\nfrom apivideo.model.webhook import Webhook\nfrom\
            \ apivideo.model.webhooks_creation_payload import WebhooksCreationPayload\n\
            from pprint import pprint\n\n# Enter a context with an instance of the\
            \ API client\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n\
            \    # Create an instance of the API class\n    api_instance = webhooks_api.WebhooksApi(api_client)\n\
            \    webhooks_creation_payload = WebhooksCreationPayload(\n        events=[\"\
            video.encoding.quality.completed\"],\n        url=\"https://example.com/webhooks\"\
            ,\n    ) # WebhooksCreationPayload | \n\n    # example passing only required\
            \ values which don't have defaults set\n    try:\n        # Create Webhook\n\
            \        api_response = api_instance.create(webhooks_creation_payload)\n\
            \        pprint(api_response)\n    except apivideo.ApiException as e:\n\
            \        print(\"Exception when calling WebhooksApi->create: %s\\\n\"\
            \ % e)\n"
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WebhooksApi.md#create\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.WebhooksApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    WebhooksApi apiInstance\
            \ = client.webhooks();\n    \n    WebhooksCreationPayload webhooksCreationPayload\
            \ = new WebhooksCreationPayload(); // \n    webhooksCreationPayload.setEvents(Arrays.asList(\"\
            video.encoding.quality.completed\")); \n    webhooksCreationPayload.setUrl(\"\
            https://example.com/webhooks\"); // The the url to which HTTP notifications\
            \ are sent. It could be any http or https URL.\n\n\n    try {\n      Webhook\
            \ result = apiInstance.create(webhooksCreationPayload);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling WebhooksApi#create\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: "// First add the \"ApiVideo\" NuGet package to your project\n// Documentation:\
            \ https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WebhooksApi.md#create\n\
            \nusing System.Diagnostics;\nusing ApiVideo.Client;\n\nnamespace Example\n\
            {\n    public class createExample\n    {\n        public static void Main()\n\
            \        {\n            var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n\
            \            var apiKey = \"YOUR_API_KEY\";\n\n            var apiInstance\
            \ = new ApiVideoClient(apiKey,basePath);\n\n            var webhooksCreationPayload\
            \ = new WebhooksCreationPayload(); // WebhooksCreationPayload | \n   \
            \         var apiWebhooksInstance = apiInstance.Webhooks();\n        \
            \    try\n            {\n                // Create Webhook\n         \
            \       Webhook result = apiWebhooksInstance.create(webhooksCreationPayload);\n\
            \                Debug.WriteLine(result);\n            }\n           \
            \ catch (ApiException  e)\n            {\n                Debug.Print(\"\
            Exception when calling WebhooksApi.create: \" + e.Message );\n       \
            \         Debug.Print(\"Status Code: \"+ e.ErrorCode);\n             \
            \   Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n"
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WebhooksApi.md#create\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$webhooksCreationPayload\
            \ = (new \\ApiVideo\\Client\\Model\\WebhooksCreationPayload())\n    ->setEvents(['video.encoding.quality.completed'])\
            \ // A list of the webhooks that you are subscribing to. There are Currently\
            \ four webhook options: * ```video.encoding.quality.completed```  Occurs\
            \ when a new video is uploaded into your account, it will be encoded into\
            \ several different HLS and mp4 qualities. When each version is encoded,\
            \ your webhook will get a notification.  It will look like ```{ \"type\"\
            : \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\"\
            , \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"\
            720p\"} ```. This request says that the 720p HLS encoding was completed.\
            \ * ```live-stream.broadcast.started```  When a lives tream begins broadcasting,\
            \ the broadcasting parameter changes from false to true, and this webhook\
            \ fires. * ```live-stream.broadcast.ended```  This event fires when the\
            \ live stream has finished broadcasting, and the broadcasting parameter\
            \ flips from false to true. * ```video.source.recorded```  Occurs when\
            \ a live stream is recorded and submitted for encoding.)\n    ->setUrl(\"\
            https://example.com/webhooks\"); // The url to which HTTP notifications\
            \ are sent. It could be any http or https URL.)\n\n$webhook = $client->webhooks()->create($webhooksCreationPayload); "
        - language: swift
          code: "// First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started\n\
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WebhooksAPI.md#create\n\
            \nApiVideoClient.apiKey = \"YOUR_API_KEY\"\n\nlet webhooksCreationPayload\
            \ = webhooks-creation-payload(events: [\"events_example\"], url: \"url_example\"\
            )\n\nWebhooksAPI.create(webhooksCreationPayload: webhooksCreationPayload)\
            \ { (response, error) in\n \n}\n"
  /webhooks/{webhookId}:
    delete:
      description: This endpoint will delete the indicated webhook.
      operationId: DELETE-webhook
      parameters:
      - description: The webhook you wish to delete.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No Content
        "404":
          content:
            application/json:
              examples:
                response:
                  value:
                    type: https://docs.api.video/docs/resourcenot_found
                    title: The requested resource was not found.
                    name: webhookId
                    status: 404
              schema:
                $ref: '#/components/schemas/not-found'
          description: Not Found
      security:
      - apiKey: []
      summary: Delete a Webhook
      tags:
      - Webhooks
      x-client-description:
        default: This method will delete the indicated webhook.
      x-client-action: delete
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WebhooksApi.md#delete\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    webhookId := \"webhookId_example\" // string | The webhook\
            \ you wish to delete.\n\n    \n    err := client.Webhooks.Delete(webhookId)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Webhooks.Delete``: %v\\\n\", err)\n    }\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WebhooksApi.md#delete\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const webhookId = 'webhookId_example'; // The webhook you wish to delete.\n\
            await client.webhooks.delete(webhookId); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WebhooksApi.md#delete

            import apivideo
            from apivideo.api import webhooks_api
            from apivideo.model.not_found import NotFound
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = webhooks_api.WebhooksApi(api_client)
                webhook_id = "webhookId_example" # str | The webhook you wish to delete.

                # example passing only required values which don't have defaults set
                try:
                    # Delete a Webhook
                    api_instance.delete(webhook_id)
                except apivideo.ApiException as e:
                    print("Exception when calling WebhooksApi->delete: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WebhooksApi.md#delete\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.WebhooksApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    WebhooksApi apiInstance\
            \ = client.webhooks();\n    \n    String webhookId = \"webhookId_example\"\
            ; // The webhook you wish to delete.\n\n    try {\n      apiInstance.delete(webhookId);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling WebhooksApi#delete\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WebhooksApi.md#delete

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class deleteExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var webhookId = webhookId_example;  // string | The webhook you wish to delete.
                        var apiWebhooksInstance = apiInstance.Webhooks();
                        try
                        {
                            // Delete a Webhook
                            apiWebhooksInstance.delete(webhookId);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling WebhooksApi.delete: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WebhooksApi.md#delete\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$webhookId = 'webhookId_example';\
            \ // The webhook you wish to delete.\n$client->webhooks()->delete($webhookId);\
            \  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WebhooksAPI.md#delete
    get:
      description: Retrieve webhook details by id.
      operationId: GET-Webhook
      parameters:
      - description: The unique webhook you wish to retreive details on.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    webhookId: webhook_XXXXXXXXXXXXXXX
                    createdAt: 2021-01-08T14:12:18.000Z
                    events:
                    - video.encoding.quality.completed
                    url: http://clientnotificationserver.com/notif?myquery=query
              schema:
                $ref: '#/components/schemas/webhook'
          description: Success
      security:
      - apiKey: []
      summary: Retrieve Webhook details
      tags:
      - Webhooks
      x-client-action: get
      x-readme:
        code-samples:
        - language: go
          code: "// First install the go client with \"go get github.com/apivideo/api.video-go-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/WebhooksApi.md#get\n\
            \npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\
            \    apivideosdk \"github.com/apivideo/api.video-go-client\"\n)\n\nfunc\
            \ main() {\n    client := apivideosdk.ClientBuilder(\"YOUR_API_KEY\").Build()\n\
            \    // if you rather like to use the sandbox environment:\n    // client\
            \ := apivideosdk.SandboxClientBuilder(\"YOUR_SANDBOX_API_KEY\").Build()\n\
            \        \n    webhookId := \"webhookId_example\" // string | The unique\
            \ webhook you wish to retreive details on.\n\n    \n    res, err := client.Webhooks.Get(webhookId)\n\
            \n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling\
            \ `Webhooks.Get``: %v\\\n\", err)\n    }\n    // response from `Get`:\
            \ Webhook\n    fmt.Fprintf(os.Stdout, \"Response from `Webhooks.Get`:\
            \ %v\\\n\", res)\n}\n"
        - language: node
          code: "// First install the \"@api.video/nodejs-client\" npm package\n//\
            \ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/WebhooksApi.md#get\n\
            \nconst client = new ApiVideoClient({ apiKey: \"YOUR_API_KEY\" });\n\n\
            const webhookId = 'webhookId_example'; // The unique webhook you wish\
            \ to retreive details on.\n\nconst webhook = await client.webhooks.get(webhookId); "
        - language: python
          code: |
            # First install the api client with "pip install api.video"
            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/WebhooksApi.md#get

            import apivideo
            from apivideo.api import webhooks_api
            from apivideo.model.webhook import Webhook
            from pprint import pprint

            # Enter a context with an instance of the API client
            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:
                # Create an instance of the API class
                api_instance = webhooks_api.WebhooksApi(api_client)
                webhook_id = "webhookId_example" # str | The unique webhook you wish to retreive details on.

                # example passing only required values which don't have defaults set
                try:
                    # Show Webhook details
                    api_response = api_instance.get(webhook_id)
                    pprint(api_response)
                except apivideo.ApiException as e:
                    print("Exception when calling WebhooksApi->get: %s\n" % e)
        - language: java
          code: "// First add the \"video.api:java-api-client\" maven dependency to\
            \ your project\n// Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/WebhooksApi.md#get\n\
            \nimport video.api.client.ApiVideoClient;\nimport video.api.client.api.ApiException;\n\
            import video.api.client.api.models.*;\nimport video.api.client.api.clients.WebhooksApi;\n\
            import java.util.*;\n\npublic class Example {\n  public static void main(String[]\
            \ args) {\n    ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\"\
            );\n    // if you rather like to use the sandbox environment:\n    //\
            \ ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\"\
            , ApiVideoClient.Environment.SANDBOX);\n\n    WebhooksApi apiInstance\
            \ = client.webhooks();\n    \n    String webhookId = \"webhookId_example\"\
            ; // The unique webhook you wish to retreive details on.\n\n    try {\n\
            \      Webhook result = apiInstance.get(webhookId);\n      System.out.println(result);\n\
            \    } catch (ApiException e) {\n      System.err.println(\"Exception\
            \ when calling WebhooksApi#get\");\n      System.err.println(\"Status\
            \ code: \" + e.getCode());\n      System.err.println(\"Reason: \" + e.getMessage());\n\
            \      System.err.println(\"Response headers: \" + e.getResponseHeaders());\n\
            \      e.printStackTrace();\n    }\n  }\n}\n"
        - language: csharp
          code: |
            // First add the "ApiVideo" NuGet package to your project
            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/WebhooksApi.md#get

            using System.Diagnostics;
            using ApiVideo.Client;

            namespace Example
            {
                public class getExample
                {
                    public static void Main()
                    {
                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;
                        var apiKey = "YOUR_API_KEY";

                        var apiInstance = new ApiVideoClient(apiKey,basePath);

                        var webhookId = webhookId_example;  // string | The unique webhook you wish to retreive details on.
                        var apiWebhooksInstance = apiInstance.Webhooks();
                        try
                        {
                            // Show Webhook details
                            Webhook result = apiWebhooksInstance.get(webhookId);
                            Debug.WriteLine(result);
                        }
                        catch (ApiException  e)
                        {
                            Debug.Print("Exception when calling WebhooksApi.get: " + e.Message );
                            Debug.Print("Status Code: "+ e.ErrorCode);
                            Debug.Print(e.StackTrace);
                        }
                    }
                }
            }
        - language: php
          code: "<?php\n// First install the api client: \"composer require api-video/php-api-client\"\
            \n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/WebhooksApi.md#get\n\
            \nrequire __DIR__ . '/vendor/autoload.php';\n\n$webhookId = 'webhookId_example';\
            \ // The unique webhook you wish to retreive details on.\n\n$webhook =\
            \ $client->webhooks()->get($webhookId);  "
        - language: swift
          code: |
            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started
            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/WebhooksAPI.md#get
components:
  examples:
    live-stream-response-example:
      value:
        liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5
        createdAt: 2020-07-29T10:45:35.000Z
        updatedAt: 2020-07-29T10:45:35.000Z
        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
        restreams:
        - name: YouTube
          serverUrl: rtmp://youtube.broadcast.example.com
          streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
        - name: Twitch
          serverUrl: rtmp://twitch.broadcast.example.com
          streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135
        name: Live From New York
        public: true
        record: true
        broadcasting: false
        assets:
          iframe: <iframe src="https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5"
            width="100%" height="100%" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
          player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5
          hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
          thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg
  parameters:
    current-page:
      description: 'Choose the number of search results to return per page. Minimum
        value: 1'
      example: 2
      explode: true
      in: query
      name: currentPage
      required: false
      schema:
        default: 1
        type: integer
      style: form
    page-size:
      description: Results per page. Allowed values 1-100, default is 25.
      example: 30
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        default: 25
        type: integer
      style: form
  schemas:
    link:
      properties:
        rel:
          type: string
        uri:
          type: string
      type: object
    access-token:
      example:
        access_token: est
        token_type: qui nulla l
        refresh_token: cillum
        expires_in: 3600
      properties:
        access_token:
          description: The access token containing security credentials allowing you
            to acccess the API. The token lasts for one hour.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA
          type: string
        token_type:
          default: bearer
          description: The type of token you have.
          type: string
        refresh_token:
          description: A token you can use to get the next access token when your
            current access token expires.
          example: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962
          type: string
        expires_in:
          description: Lists the time in seconds when your access token expires. It
            lasts for one hour.
          type: integer
      title: AccessToken
      type: object
    pagination:
      example:
        itemsTotal: 123
        pagesTotal: 7
        pageSize: 20
        currentPage: 3
        currentPageItems: 20
        links:
          first:
            rel: first
            uri: /videos/search?currentPage=1&pageSize=20
          previous:
            rel: previous
            uri: /videos/search?currentPage=2&pageSize=20
          next:
            rel: next
            uri: /videos/search?currentPage=4&pageSize=20
          last:
            rel: last
            uri: /videos/search?currentPage=6&pageSize=20
      properties:
        itemsTotal:
          description: Total number of items that exist.
          readOnly: true
          type: integer
        pagesTotal:
          description: Number of items listed in the current page.
          readOnly: true
          type: integer
        pageSize:
          description: Maximum number of item per page.
          readOnly: true
          type: integer
        currentPage:
          description: The current page index.
          readOnly: true
          type: integer
        currentPageItems:
          description: The number of items on the current page.
          readOnly: true
          type: integer
        links:
          items:
            $ref: '#/components/schemas/pagination-link'
          type: array
      required:
      - links
      title: Pagination
      type: object
    bad-request:
      properties:
        type:
          description: A link to the error documentation.
          type: string
        title:
          description: A description of the error that occurred.
          type: string
        name:
          description: The name of the parameter that caused the error.
          type: string
        status:
          description: The HTTP status code.
          type: integer
        problems:
          description: Returns any additional problems in the request in an array
            of objects.
          items:
            $ref: '#/components/schemas/additional-bad-request-errors'
          type: array
          uniqueItems: true
      title: BadRequest
      type: object
    additional-bad-request-errors:
      properties:
        type:
          description: A link to the error documentation.
          type: string
        title:
          description: A description of the error that occurred.
          type: string
        name:
          description: The name of the parameter that caused the error.
          type: string
        status:
          description: The HTTP status code.
          type: integer
      title: BadRequest
      type: object
    not-found:
      properties:
        type:
          type: string
        title:
          type: string
        name:
          type: string
        status:
          type: integer
      title: NotFound
      type: object
    "403-error-schema":
      properties:
        type:
          description: A link to the error documentation.
          type: string
        title:
          description: A description of the error that occurred.
          type: string
        name:
          description: The name of the parameter that caused the error.
          nullable: true
          type: string
        status:
          description: The HTTP status code.
          type: integer
      title: 403 Forbidden
      type: object
    video:
      example:
        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz
        title: Maths video
        description: An amazing video explaining the string theory
        tags:
        - maths
        - string theory
        - video
        metadata:
        - key: Author
          value: John Doe
        - key: Format
          value: Tutorial
        createdAt: 4251-03-03T12:52:03.085Z
        publishedAt: 4665-07-14T23:36:18.598Z
        actions:
        - video_delete
        - video_download
        - video_update
      properties:
        videoId:
          description: The unique identifier of the video object.
          example: vi4k0jvEUuaTdRAEjQ4Prklg
          type: string
        createdAt:
          description: When a video was created, presented in ISO-8601 format.
          format: date-time
          type: string
        title:
          description: |
            The title of the video content.
          example: Maths video
          type: string
        description:
          description: |
            A description for the video content.
          example: An amazing video explaining string theory.
          type: string
        publishedAt:
          description: The date and time the API created the video. Date and time
            are provided using ISO-8601 UTC format.
          example: 2019-12-16T08:25:51Z
          format: date-time
          type: string
        updatedAt:
          description: The date and time the video was updated. Date and time are
            provided using ISO-8601 UTC format.
          example: 2019-12-16T08:15:51Z
          format: date-time
          type: string
        tags:
          description: "One array of tags (each tag is a string) in order to categorize\
            \ a video. Tags may include spaces. \n"
          example: '"tags": ["maths", "string theory", "video"]'
          items:
            type: string
          type: array
        metadata:
          description: |
            Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
          example: '[{"key":"Author", "value":"John Doe"}, {"key":"Format", "value":"Tutorial"}]'
          items:
            $ref: '#/components/schemas/metadata'
          type: array
        source:
          $ref: '#/components/schemas/video-source'
        assets:
          $ref: '#/components/schemas/video-assets'
        playerId:
          description: |
            The id of the player that will be applied on the video.
          example: pl45KFKdlddgk654dspkze
          type: string
        public:
          description: |
            Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
          example: false
          type: boolean
        panoramic:
          description: |
            Defines if video is panoramic.
          example: false
          type: boolean
        mp4Support:
          description: |
            This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.
          example: true
          type: boolean
      required:
      - videoId
      title: Video
      type: object
    watermark:
      example:
        watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i
        createdAt: 2000-01-23T04:56:07.000+00:00
      properties:
        watermarkId:
          description: The unique identifier of the watermark.
          example: watermark_1BWr2L5MTQwxGkuxKjzh6i
          type: string
        createdAt:
          description: When the watermark was created, presented in ISO-8601 format.
          format: date-time
          type: string
      title: Watermark
      type: object
    watermarks-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i
          createdAt: 2000-01-23T04:56:07.000+00:00
        - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i
          createdAt: 2000-01-23T04:56:07.000+00:00
      properties:
        data:
          items:
            $ref: '#/components/schemas/watermark'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: Watermarks
      type: object
    watermark-upload-payload:
      properties:
        file:
          description: The `.jpg` or `.png` image to be added as a watermark.
          format: binary
          type: string
      required:
      - file
      title: WatermarkUploadPayload
      type: object
    player-theme:
      example:
        trackUnplayed: trackUnplayed
        backgroundTop: backgroundTop
        link: link
        trackPlayed: trackPlayed
        linkHover: linkHover
        backgroundBottom: backgroundBottom
        enableControls: true
        backgroundText: backgroundText
        enableApi: true
        forceAutoplay: true
        trackBackground: trackBackground
        createdAt: 2020-01-31T10:17:47Z
        assets:
          link: path/to/my/logo/mylogo.jpg
          logo: mylogo.jpg
        hideTitle: true
        name: name
        text: text
        linkActive: linkActive
        forceLoop: true
        playerId: pl45KFKdlddgk654dspkze
        updatedAt: 2020-01-31T10:18:47Z
      properties:
        name:
          description: The name of the player theme
          type: string
        text:
          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'
          type: string
        link:
          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,
            1)'
          type: string
        linkHover:
          description: 'RGBA color for all controls when hovered. Default: rgba(255,
            255, 255, 1)'
          type: string
        linkActive:
          description: RGBA color for the play button when hovered.
          type: string
        trackPlayed:
          description: 'RGBA color playback bar: played content. Default: rgba(88,
            131, 255, .95)'
          type: string
        trackUnplayed:
          description: 'RGBA color playback bar: downloaded but unplayed (buffered)
            content. Default: rgba(255, 255, 255, .35)'
          type: string
        trackBackground:
          description: 'RGBA color playback bar: background. Default: rgba(255, 255,
            255, .2)'
          type: string
        backgroundTop:
          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,
            .7)'
          type: string
        backgroundBottom:
          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,
            0, .7)'
          type: string
        backgroundText:
          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'
          type: string
        enableApi:
          description: 'enable/disable player SDK access. Default: true'
          type: boolean
        enableControls:
          description: 'enable/disable player controls. Default: true'
          type: boolean
        forceAutoplay:
          description: 'enable/disable player autoplay. Default: false'
          type: boolean
        hideTitle:
          description: 'enable/disable title. Default: false'
          type: boolean
        forceLoop:
          description: 'enable/disable looping. Default: false'
          type: boolean
        playerId:
          example: pl45KFKdlddgk654dspkze
          type: string
        createdAt:
          description: When the player was created, presented in ISO-8601 format.
          example: 2020-01-31T10:17:47Z
          format: date-time
          type: string
        updatedAt:
          description: When the player was last updated, presented in ISO-8601 format.
          example: 2020-01-31T10:18:47Z
          format: date-time
          type: string
        assets:
          $ref: '#/components/schemas/player_theme_assets'
      required:
      - playerId
      title: PlayerTheme
      type: object
    player-theme-creation-payload:
      example:
        name: My nice theme
        assets:
          logo: https://cdn.api.video/player/pl14Db6oMJRH6SRVoOwORacK/logo.png
          link: https://api.video
        shapeMargin: 10
        shapeRadius: 3
        shapeAspect: flat
        shapeBackgroundTop: rgba(50, 50, 50, .7)
        shapeBackgroundBottom: rgba(50, 50, 50, .8)
        text: rgba(255, 255, 255, .95)
        link: rgba(255, 0, 0, .95)
        linkHover: rgba(255, 255, 255, .75)
        linkActive: rgba(255, 0, 0, .75)
        trackPlayed: rgba(255, 255, 255, .95)
        trackUnplayed: rgba(255, 255, 255, .1)
        trackBackground: rgba(0, 0, 0, 0)
        backgroundTop: rgba(72, 4, 45, 1)
        backgroundBottom: rgba(94, 95, 89, 1)
        backgroundText: rgba(255, 255, 255, .95)
        language: en
        enableApi: true
        enableControls: true
        forceAutoplay: false
        hideTitle: false
        forceLoop: false
      properties:
        name:
          description: Add a name for your player theme here.
          maxLength: 100
          type: string
        text:
          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'
          type: string
        link:
          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,
            1)'
          type: string
        linkHover:
          description: 'RGBA color for all controls when hovered. Default: rgba(255,
            255, 255, 1)'
          type: string
        linkActive:
          description: RGBA color for the play button when hovered.
          type: string
        trackPlayed:
          description: 'RGBA color playback bar: played content. Default: rgba(88,
            131, 255, .95)'
          type: string
        trackUnplayed:
          description: 'RGBA color playback bar: downloaded but unplayed (buffered)
            content. Default: rgba(255, 255, 255, .35)'
          type: string
        trackBackground:
          description: 'RGBA color playback bar: background. Default: rgba(255, 255,
            255, .2)'
          type: string
        backgroundTop:
          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,
            .7)'
          type: string
        backgroundBottom:
          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,
            0, .7)'
          type: string
        backgroundText:
          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'
          type: string
        enableApi:
          default: true
          description: 'enable/disable player SDK access. Default: true'
          type: boolean
        enableControls:
          default: true
          description: 'enable/disable player controls. Default: true'
          type: boolean
        forceAutoplay:
          default: false
          description: 'enable/disable player autoplay. Default: false'
          type: boolean
        hideTitle:
          default: false
          description: 'enable/disable title. Default: false'
          type: boolean
        forceLoop:
          default: false
          description: 'enable/disable looping. Default: false'
          type: boolean
      title: PlayerThemeCreationPayload
      type: object
    player-theme-update-payload:
      properties:
        name:
          description: Add a name for your player theme here.
          maxLength: 100
          type: string
        text:
          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'
          type: string
        link:
          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,
            1)'
          type: string
        linkHover:
          description: 'RGBA color for all controls when hovered. Default: rgba(255,
            255, 255, 1)'
          type: string
        linkActive:
          description: RGBA color for the play button when hovered.
          type: string
        trackPlayed:
          description: 'RGBA color playback bar: played content. Default: rgba(88,
            131, 255, .95)'
          type: string
        trackUnplayed:
          description: 'RGBA color playback bar: downloaded but unplayed (buffered)
            content. Default: rgba(255, 255, 255, .35)'
          type: string
        trackBackground:
          description: 'RGBA color playback bar: background. Default: rgba(255, 255,
            255, .2)'
          type: string
        backgroundTop:
          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,
            .7)'
          type: string
        backgroundBottom:
          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,
            0, .7)'
          type: string
        backgroundText:
          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'
          type: string
        enableApi:
          description: 'enable/disable player SDK access. Default: true'
          type: boolean
        enableControls:
          description: 'enable/disable player controls. Default: true'
          type: boolean
        forceAutoplay:
          description: 'enable/disable player autoplay. Default: false'
          type: boolean
        hideTitle:
          description: 'enable/disable title. Default: false'
          type: boolean
        forceLoop:
          description: 'enable/disable looping. Default: false'
          type: boolean
      title: PlayerThemeUpdatePayload
      type: object
    caption:
      example:
        default: false
        src: src
        srclang: srclang
        uri: uri
      properties:
        uri:
          type: string
        src:
          type: string
        srclang:
          type: string
        default:
          default: false
          description: Whether you will have subtitles or not. True for yes you will
            have subtitles, false for no you will not have subtitles.
          example: false
          type: boolean
      title: Caption
      type: object
    video-session:
      example:
        session:
          sessionId: psEmFwGQUAXR2lFHj5nDOpy
          loadedAt: 2019-06-24T11:45:01.109Z
          endedAt: 2019-06-24T11:49:19.243Z
        location:
          country: France
          city: Paris
        referrer:
          url: https://api.video
          medium: organic
          source: https://google.com
          searchTerm: video encoding hosting and delivery
        device:
          type: desktop
          vendor: Dell
          model: unknown
        os:
          name: Microsoft Windows
          shortname: W10
          version: Windows10
        client:
          type: browser
          name: Firefox
          version: "67.0"
      properties:
        session:
          $ref: '#/components/schemas/video-session-session'
        location:
          $ref: '#/components/schemas/video-session-location'
        referrer:
          $ref: '#/components/schemas/video-session-referrer'
        device:
          $ref: '#/components/schemas/video-session-device'
        os:
          $ref: '#/components/schemas/video-session-os'
        client:
          $ref: '#/components/schemas/video-session-client'
      title: VideoSession
      type: object
    live-stream:
      example:
        streamKey: dw-dew8-q6w9-k67w-1ws8
        createdAt: 2020-01-31T10:17:47Z
        assets:
          thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
          iframe: <iframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"
            width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>
          hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
          player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
        public: true
        restreams:
        - streamKey: dw-dew8-q6w9-k67w-1ws8
          serverUrl: rtmp://my.broadcast.example.com/app
          name: My RTMP server
        - streamKey: dw-dew8-q6w9-k67w-1ws8
          serverUrl: rtmp://my.broadcast.example.com/app
          name: My RTMP server
        liveStreamId: li400mYKSgQ6xs7taUeSaEKr
        record: true
        name: My Live Stream
        playerId: pl45d5vFFGrfdsdsd156dGhh
        broadcasting: true
        updatedAt: 2020-01-31T10:18:47Z
      properties:
        liveStreamId:
          description: The unique identifier for the live stream. Live stream IDs
            begin with "li."
          example: li400mYKSgQ6xs7taUeSaEKr
          type: string
        name:
          description: The name of your live stream.
          example: My Live Stream
          type: string
        streamKey:
          description: The unique, private stream key that you use to begin streaming.
          example: dw-dew8-q6w9-k67w-1ws8
          type: string
        record:
          description: Whether you are recording or not.
          example: true
          type: boolean
        public:
          description: Whether your video can be viewed by everyone, or requires authentication
            to see it. A setting of false will require a unique token for each view.
            Learn more about the Private Video feature [here](https://docs.api.video/docs/private-videos).
          example: true
          type: boolean
        assets:
          $ref: '#/components/schemas/live-stream-assets'
        playerId:
          description: The unique identifier for the player.
          example: pl45d5vFFGrfdsdsd156dGhh
          type: string
        broadcasting:
          description: Whether or not you are broadcasting the live video you recorded
            for others to see. True means you are broadcasting to viewers, false means
            you are not.
          example: true
          type: boolean
        restreams:
          description: Returns the list of RTMP restream destinations.
          items:
            $ref: '#/components/schemas/restreams-response-object'
          nullable: false
          type: array
        createdAt:
          description: When the player was created, presented in ISO-8601 format.
          example: 2020-01-31T10:17:47Z
          format: date-time
          type: string
        updatedAt:
          description: When the player was last updated, presented in ISO-8601 format.
          example: 2020-01-31T10:18:47Z
          format: date-time
          type: string
      required:
      - liveStreamId
      - restreams
      title: LiveStream
      type: object
    live-stream-session:
      example:
        referrer:
          searchTerm: video stream
          medium: organic
          source: https://google.com
          url: https://api.video
        os:
          name: Microsoft Windows
          shortname: W10
          version: Windows 10
        session:
          loadedAt: 2019-06-24T11:45:01.109Z
          endedAt: 2019-06-24T12:45:01.109Z
          sessionId: sessionId
        client:
          name: Firefox
          type: browser
          version: "67.0"
        location:
          country: France
          city: Paris
        device:
          vendor: Dell
          model: unknown
          type: desktop
      properties:
        session:
          $ref: '#/components/schemas/live-stream-session-session'
        location:
          $ref: '#/components/schemas/live-stream-session-location'
        referrer:
          $ref: '#/components/schemas/live-stream-session-referrer'
        device:
          $ref: '#/components/schemas/live-stream-session-device'
        os:
          $ref: '#/components/schemas/video-session-os'
        client:
          $ref: '#/components/schemas/live-stream-session-client'
      title: LiveStreamSession
      type: object
    player-session-event:
      example:
        emittedAt: 2019-06-24T11:45:01.109Z
        at: 0
        from: 6
        to: 1
        type: play
      properties:
        type:
          description: 'Possible values are: ready, play, pause, resume, seek.backward,
            seek.forward, end'
          example: play
          type: string
        emittedAt:
          description: When an event occurred, presented in ISO-8601 format.
          example: 2019-06-24T11:45:01.109Z
          format: date-time
          type: string
        at:
          type: integer
        from:
          type: integer
        to:
          type: integer
      title: PlayerSessionEvent
      type: object
    webhook:
      example:
        createdAt: 2019-06-24T11:45:01.109Z
        webhookId: webhook_XXXXXXXXXXXXXXX
        events: '["video.encoding.quality.completed"]'
        url: http://clientnotificationserver.com/notif?myquery=query
      properties:
        webhookId:
          description: Unique identifier of the webhook
          example: webhook_XXXXXXXXXXXXXXX
          type: string
        createdAt:
          description: When an webhook was created, presented in ISO-8601 format.
          example: 2019-06-24T11:45:01.109Z
          format: date-time
          type: string
        events:
          description: A list of events that will trigger the webhook.
          example: '["video.encoding.quality.completed"]'
          items:
            type: string
          type: array
        url:
          description: URL of the webhook
          example: http://clientnotificationserver.com/notif?myquery=query
          type: string
      title: Webhook
      type: object
    video-status:
      example:
        ingest:
          status: uploaded
          filesize: 273579401
          receivedBytes:
          - to: 134217727
            from: 0
            total: 273579401
          - to: 268435455
            from: 134217728
            total: 273579401
          - to: 273579400
            from: 268435456
            total: 273579401
        encoding:
          playable: true
          qualities:
          - quality: 240p
            status: encoded
          - quality: 360p
            status: encoded
          - quality: 480p
            status: encoded
          - quality: 720p
            status: encoded
          - quality: 1080p
            status: encoding
          - quality: 2160p
            status: waiting
          metadata:
            width: 424
            height: 240
            bitrate: 411.218
            duration: 4176
            framerate: 24
            samplerate: 48000
            videoCodec: h264
            audioCodec: aac
            aspectRatio: 16/9
      properties:
        ingest:
          $ref: '#/components/schemas/video-status-ingest'
        encoding:
          $ref: '#/components/schemas/video-status-encoding'
      title: VideoStatus
      type: object
    quality:
      properties:
        type:
          description: The type of video (hls or mp4).
          enum:
          - hls
          - mp4
          example: hls
          type: string
        quality:
          description: The quality of the video you have, in pixels. Choices include
            360p, 480p, 720p, 1080p, and 2160p.
          enum:
          - 240p
          - 360p
          - 480p
          - 720p
          - 1080p
          - 2160p
          example: 720p
          type: string
        status:
          description: The status of your video. Statuses include waiting - the video
            is waiting to be encoded. encoding - the video is in the process of being
            encoded. encoded - the video was successfully encoded. failed - the video
            failed to be encoded.
          enum:
          - waiting
          - encoding
          - encoded
          - failed
          type: string
      title: Quality
      type: object
    bytes-range:
      properties:
        from:
          description: The starting point for the range of bytes for a chunk of a
            video.
          example: 0
          type: integer
        to:
          description: The ending point for the range of bytes for a chunk of a video.
          example: 9999
          type: integer
        total:
          description: The total number of expected bytes.
          example: 10000
          type: integer
      title: BytesRange
      type: object
    chapter:
      example:
        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
        language: language
        uri: uri
      properties:
        uri:
          type: string
        src:
          description: The link to your VTT file, which contains your chapters information
            for the video.
          example: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
          type: string
        language:
          type: string
      title: Chapter
      type: object
    upload-token:
      example:
        createdAt: 2019-12-16T08:25:51Z
        ttl: 171976544
        expiresAt: 2019-12-16T09:25:51Z
        token: to1tcmSFHeYY5KzyhOqVKMKb
      properties:
        token:
          description: The unique identifier for the token you will use to authenticate
            an upload.
          example: to1tcmSFHeYY5KzyhOqVKMKb
          type: string
        ttl:
          description: Time-to-live - how long the upload token is valid for.
          maximum: 2147483647
          minimum: 0
          type: integer
        createdAt:
          description: When the token was created, displayed in ISO-8601 format.
          example: 2019-12-16T08:25:51Z
          format: date-time
          type: string
        expiresAt:
          description: When the token expires, displayed in ISO-8601 format.
          example: 2019-12-16T09:25:51Z
          format: date-time
          nullable: true
          type: string
      title: UploadToken
      type: object
    authenticate-payload:
      example:
        apiKey: 9VxMaPgsaFg7EBqmuspSzF7
      properties:
        apiKey:
          description: Your account API key. You can use your sandbox API key, or
            you can use your production API key.
          type: string
      required:
      - apiKey
      title: ApiKey
      type: object
    refresh-token-payload:
      example:
        refreshToken: def502005346d9cc2bd79a7793ab5bdabfefcaabfbb8c253f14733f1262077e1a3f38c4751d6d20f590c3784e531a82adc11f05fc1949aa46d5575aaa99cb84b9334ba66ac773576b5d7a418937ae337de62811d086dd42ad1164b12f87d67be6ffea18f2d50be9b95697b21c4d3c4372849bdb2287259cb80541570e913691a08b2fa33c85885930de15cebea627fc09f0255562ab3d39d87d4ff8fc02b00e252afcd480421dec7de9d1411176bcf669c527762e22294b453bc9ea06e9fa8ba5b873feb2ee14ce0a6a6ddd4b78c580631e210e9b9387265dc2bec9478a66a09dcdce1c40d2f856689e9d81742c9628a0b87b359e0b218ea1f07427eef89f999e47af89792f598e05847bd008fddc32ee63f4a601ffb4cd2ad08977f1c854ec358238322c918f05aa5a41f8a171dee497218408abc8283473f6112aeed7310815416a0fa36c63667e0ed014fa40b8992891bf58bae400d901c01450101c88f4978938ad138adc19cfe5698d60fd82cb27c586f6a8f70f4393c7c9e579df8739d46d249fb76d7
      properties:
        refreshToken:
          description: |
            The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.
          type: string
      required:
      - refreshToken
      title: RefreshToken
      type: object
    videos-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz
          title: Maths video
          description: An amazing video explaining the string theory
          tags:
          - maths
          - string theory
          - video
          metadata:
          - key: Author
            value: John Doe
          - key: Format
            value: Tutorial
          createdAt: 4251-03-03T12:52:03.085Z
          publishedAt: 4665-07-14T23:36:18.598Z
          actions:
          - video_delete
          - video_download
          - video_update
        - videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz
          title: Maths video
          description: An amazing video explaining the string theory
          tags:
          - maths
          - string theory
          - video
          metadata:
          - key: Author
            value: John Doe
          - key: Format
            value: Tutorial
          createdAt: 4251-03-03T12:52:03.085Z
          publishedAt: 4665-07-14T23:36:18.598Z
          actions:
          - video_delete
          - video_download
          - video_update
      properties:
        data:
          items:
            $ref: '#/components/schemas/video'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: Videos
      type: object
    metadata:
      properties:
        key:
          description: The constant that defines the data set.
          example: Color
          type: string
        value:
          description: A variable which belongs to the data set.
          example: Green
          type: string
      title: Metadata
      type: object
      x-client-all-args-constructor: true
    video-creation-payload:
      example:
        title: Maths video
        description: An amazing video explaining string theory.
        public: false
        panoramic: false
        mp4Support: true
        playerId: pl45KFKdlddgk654dspkze
        tags:
        - maths
        - string theory
        - video
        metadata:
        - key: Author
          value: John Doe
        - key: Format
          value: Tutorial
        watermark:
          id: watermark_1BWr2L5MTQwxGkuxKjzh6i
          bottom: 10px
          right: 10px
          width: 50%
          opacity: 70%
      properties:
        title:
          description: The title of your new video.
          example: Maths video
          type: string
        description:
          description: A brief description of your video.
          example: A video about string theory.
          type: string
        source:
          description: You can either add a video already on the web, by entering
            the URL of the video, or you can also enter the `videoId` of one of the
            videos you already have on your api.video acccount, and this will generate
            a copy of your video. Creating a copy of a video can be especially useful
            if you want to keep your original video and trim or apply a watermark
            onto the copy you would create.
          example: https://www.myvideo.url.com/video.mp4 OR vi4k0jvEUuaTdRAEjQ4JfOyl
          type: string
        public:
          default: true
          description: 'Default: True. If set to `false` the video will become private.
            More information on private videos can be found [here](https://docs.api.video/docs/private-videos)'
          example: true
          type: boolean
        panoramic:
          default: false
          description: Indicates if your video is a 360/immersive video.
          example: false
          type: boolean
        mp4Support:
          default: true
          description: Enables mp4 version in addition to streamed version.
          example: true
          type: boolean
        playerId:
          description: The unique identification number for your video player.
          example: pl45KFKdlddgk654dspkze
          type: string
        tags:
          description: A list of tags you want to use to describe your video.
          example: '["maths", "string theory", "video"]'
          items:
            type: string
          type: array
        metadata:
          description: A list of key value pairs that you use to provide metadata
            for your video. These pairs can be made dynamic, allowing you to segment
            your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).
          example: '[{"key": "Author", "value": "John Doe"}]'
          items:
            $ref: '#/components/schemas/metadata'
          type: array
        clip:
          $ref: '#/components/schemas/video-clip'
        watermark:
          $ref: '#/components/schemas/video-watermark'
      required:
      - title
      title: VideoCreationPayload
      type: object
    video-upload-payload:
      properties:
        file:
          description: The path to the video you would like to upload. The path must
            be local. If you want to use a video from an online source, you must use
            the "/videos" endpoint and add the "source" parameter when you create
            a new video.
          format: binary
          type: string
          x-client-chunk-upload: "true"
      required:
      - file
      type: object
    video-thumbnail-pick-payload:
      example:
        timecode: 00:00:00.000
      properties:
        timecode:
          description: "Frame in video to be used as a placeholder before the video\
            \ plays. \nExample: '\"00:01:00.000\" for 1 minute into the video.'\n\
            Valid Patterns: \n\"hh:mm:ss.ms\"\n\"hh:mm:ss:frameNumber\"\n\"124\" (integer\
            \ value is reported as seconds) \nIf selection is out of range, \"00:00:00.00\"\
            \ will be chosen."
          pattern: \d{2}:\d{2}:\d{2}(\.\d{2})?
          type: string
      required:
      - timecode
      title: ThumbnailPickPayload
      type: object
    video-thumbnail-upload-payload:
      properties:
        file:
          description: The image to be added as a thumbnail. The mime type should
            be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
          format: binary
          type: string
      required:
      - file
      title: VideoThumbnailUploadPayload
      type: object
    video-update-payload:
      example:
        playerId: pl45KFKdlddgk654dspkze
        title: String theory
        description: An amazing video explaining the string theory
        public: false
        panoramic: false
        mp4Support: true
        tags:
        - maths
        - string theory
        - video
        metadata:
        - key: Author
          value: John Doe
        - key: Format
          value: Tutorial
      properties:
        playerId:
          description: The unique ID for the player you want to associate with your
            video.
          example: pl4k0jvEUuaTdRAEjQ4Jfrgz
          type: string
          x-optional-nullable: true
        title:
          description: The title you want to use for your video.
          type: string
        description:
          description: A brief description of the video.
          example: A film about good books.
          type: string
        public:
          description: Whether the video is publicly available or not. False means
            it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
          example: true
          type: boolean
        panoramic:
          description: Whether the video is a 360 degree or immersive video.
          example: false
          type: boolean
        mp4Support:
          description: Whether the player supports the mp4 format.
          example: true
          type: boolean
        tags:
          description: A list of terms or words you want to tag the video with. Make
            sure the list includes all the tags you want as whatever you send in this
            list will overwrite the existing list for the video.
          example: '["maths", "string theory", "video"]'
          items:
            type: string
          type: array
        metadata:
          description: A list (array) of dictionaries where each dictionary contains
            a key value pair that describes the video. As with tags, you must send
            the complete list of metadata you want as whatever you send here will
            overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata)
            allows you to define a key that allows any value pair.
          items:
            $ref: '#/components/schemas/metadata'
          type: array
      title: VideoUpdatePayload
      type: object
    token-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - createdAt: 2019-12-16T08:25:51Z
          ttl: 171976544
          expiresAt: 2019-12-16T09:25:51Z
          token: to1tcmSFHeYY5KzyhOqVKMKb
        - createdAt: 2019-12-16T08:25:51Z
          ttl: 171976544
          expiresAt: 2019-12-16T09:25:51Z
          token: to1tcmSFHeYY5KzyhOqVKMKb
      properties:
        data:
          items:
            $ref: '#/components/schemas/upload-token'
          title: uploadToken
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: UploadTokens
      type: object
    token-creation-payload:
      example:
        ttl: 3600
      properties:
        ttl:
          default: 0
          description: Time in seconds that the token will be active. A value of 0
            means that the token has no exipration date. The default is to have no
            expiration.
          maximum: 2147483647
          minimum: 0
          type: integer
      title: TokenCreationPayload
      type: object
    token-upload-payload:
      properties:
        file:
          description: The path to the video you want to upload.
          format: binary
          type: string
          x-client-chunk-upload: "true"
        videoId:
          description: The video id returned by the first call to this endpoint in
            a large video upload scenario.
          type: string
          x-client-ignore: true
          x-client-copy-from-response: true
      required:
      - file
      title: tokenUploadPayload
      type: object
    live-stream-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - streamKey: dw-dew8-q6w9-k67w-1ws8
          createdAt: 2020-01-31T10:17:47Z
          assets:
            thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
            iframe: <iframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"
              width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>
            hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
            player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
          public: true
          restreams:
          - streamKey: dw-dew8-q6w9-k67w-1ws8
            serverUrl: rtmp://my.broadcast.example.com/app
            name: My RTMP server
          - streamKey: dw-dew8-q6w9-k67w-1ws8
            serverUrl: rtmp://my.broadcast.example.com/app
            name: My RTMP server
          liveStreamId: li400mYKSgQ6xs7taUeSaEKr
          record: true
          name: My Live Stream
          playerId: pl45d5vFFGrfdsdsd156dGhh
          broadcasting: true
          updatedAt: 2020-01-31T10:18:47Z
        - streamKey: dw-dew8-q6w9-k67w-1ws8
          createdAt: 2020-01-31T10:17:47Z
          assets:
            thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
            iframe: <iframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"
              width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>
            hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
            player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
          public: true
          restreams:
          - streamKey: dw-dew8-q6w9-k67w-1ws8
            serverUrl: rtmp://my.broadcast.example.com/app
            name: My RTMP server
          - streamKey: dw-dew8-q6w9-k67w-1ws8
            serverUrl: rtmp://my.broadcast.example.com/app
            name: My RTMP server
          liveStreamId: li400mYKSgQ6xs7taUeSaEKr
          record: true
          name: My Live Stream
          playerId: pl45d5vFFGrfdsdsd156dGhh
          broadcasting: true
          updatedAt: 2020-01-31T10:18:47Z
      properties:
        data:
          items:
            $ref: '#/components/schemas/live-stream'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: LiveStreams
      type: object
    live-stream-creation-payload:
      example:
        name: Test live
        record: true
        playerId: pl4f4ferf5erfr5zed4fsdd
        restreams:
        - name: YouTube
          serverUrl: rtmp://youtube.broadcast.example.com
          streamKey: dw-dew8-q6w9-k67w-1ws8
        - name: Twitch
          serverUrl: rtmp://twitch.broadcast.example.com
          streamKey: dw-dew8-q6w9-k67w-1ws8
      properties:
        name:
          description: Add a name for your live stream here.
          example: My Live Stream Video
          type: string
        record:
          default: false
          description: Whether you are recording or not. True for record, false for
            not record.
          example: true
          type: boolean
        public:
          description: Whether your video can be viewed by everyone, or requires authentication
            to see it. A setting of false will require a unique token for each view.
            Learn more about the Private Video feature [here](https://docs.api.video/docs/private-videos).
          type: boolean
        playerId:
          description: The unique identifier for the player.
          example: pl4f4ferf5erfr5zed4fsdd
          type: string
        restreams:
          description: Use this parameter to add, edit, or remove RTMP services where
            you want to restream a live stream. The list can only contain up to 5
            destinations.
          items:
            $ref: '#/components/schemas/restreams-request-object'
          maxItems: 5
          nullable: false
          type: array
      required:
      - name
      title: LiveStreamCreationPayload
      type: object
    live-stream-update-payload:
      properties:
        name:
          description: The name you want to use for your live stream.
          example: My Live Stream Video
          type: string
        public:
          description: Whether your video can be viewed by everyone, or requires authentication
            to see it. A setting of false will require a unique token for each view.
            Learn more about the Private Video feature [here](https://docs.api.video/docs/private-videos).
          type: boolean
        record:
          description: Use this to indicate whether you want the recording on or off.
            On is true, off is false.
          example: true
          type: boolean
        playerId:
          description: The unique ID for the player associated with a live stream
            that you want to update.
          example: pl45KFKdlddgk654dspkze
          type: string
        restreams:
          description: Use this parameter to add, edit, or remove RTMP services where
            you want to restream a live stream. The list can only contain up to 5
            destinations. This operation updates all restream destinations in the
            same request. If you do not want to modify an existing restream destination,
            you need to include it in your request, otherwise it is removed.
          items:
            $ref: '#/components/schemas/restreams-request-object'
          maxItems: 5
          nullable: false
          type: array
      title: LiveStreamUpdatePayload
      type: object
    restreams-request-object:
      description: Adding restream destinations is optional. However, if you set a
        restream destination, you must provide all attributes for each destination.
      properties:
        name:
          description: Use this parameter to define a name for the restream destination.
          example: My RTMP server
          nullable: false
          type: string
        serverUrl:
          description: Use this parameter to set the RTMP URL of the restream destination.
          example: rtmp://my.broadcast.example.com/app
          nullable: false
          type: string
        streamKey:
          description: Use this parameter to provide the unique key of the live stream
            that you want to restream.
          example: dw-dew8-q6w9-k67w-1ws8
          nullable: false
          type: string
      required:
      - name
      - serverUrl
      - streamKey
      title: Restreams request object
      type: object
    restreams-response-object:
      example:
        streamKey: dw-dew8-q6w9-k67w-1ws8
        serverUrl: rtmp://my.broadcast.example.com/app
        name: My RTMP server
      properties:
        name:
          description: Returns the name of a restream destination.
          example: My RTMP server
          type: string
        serverUrl:
          description: Returns the RTMP URL of a restream destination.
          example: rtmp://my.broadcast.example.com/app
          type: string
        streamKey:
          description: Returns the unique key of the live stream that is set up for
            restreaming.
          example: dw-dew8-q6w9-k67w-1ws8
          type: string
      title: Restreams response object
      type: object
    captions-upload-payload:
      properties:
        file:
          description: The video text track (VTT) you want to upload.
          format: binary
          type: string
      required:
      - file
      title: CaptionsUploadPayload
      type: object
    live-stream-thumbnail-upload-payload:
      properties:
        file:
          description: The image to be added as a thumbnail. The mime type should
            be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
          format: binary
          type: string
      required:
      - file
      title: LiveStreamThumbnailUploadPayload
      type: object
    captions-update-payload:
      properties:
        default:
          type: boolean
      title: CaptionsUpdatePayload
      type: object
    captions-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - default: false
          src: src
          srclang: srclang
          uri: uri
        - default: false
          src: src
          srclang: srclang
          uri: uri
      properties:
        data:
          items:
            $ref: '#/components/schemas/caption'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: VideoCaptions
      type: object
    chapters-update-payload:
      properties:
        file:
          description: The VTT file describing the chapters you want to upload.
          format: binary
          type: string
      required:
      - file
      title: ChaptersUpdatePayload
      type: object
    chapters-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
          language: language
          uri: uri
        - src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt
          language: language
          uri: uri
      properties:
        data:
          items:
            $ref: '#/components/schemas/chapter'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: VideoChapters
      type: object
    player-themes-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - trackUnplayed: trackUnplayed
          backgroundTop: backgroundTop
          link: link
          trackPlayed: trackPlayed
          linkHover: linkHover
          backgroundBottom: backgroundBottom
          enableControls: true
          backgroundText: backgroundText
          enableApi: true
          forceAutoplay: true
          trackBackground: trackBackground
          createdAt: 2020-01-31T10:17:47Z
          assets:
            link: path/to/my/logo/mylogo.jpg
            logo: mylogo.jpg
          hideTitle: true
          name: name
          text: text
          linkActive: linkActive
          forceLoop: true
          playerId: pl45KFKdlddgk654dspkze
          updatedAt: 2020-01-31T10:18:47Z
        - trackUnplayed: trackUnplayed
          backgroundTop: backgroundTop
          link: link
          trackPlayed: trackPlayed
          linkHover: linkHover
          backgroundBottom: backgroundBottom
          enableControls: true
          backgroundText: backgroundText
          enableApi: true
          forceAutoplay: true
          trackBackground: trackBackground
          createdAt: 2020-01-31T10:17:47Z
          assets:
            link: path/to/my/logo/mylogo.jpg
            logo: mylogo.jpg
          hideTitle: true
          name: name
          text: text
          linkActive: linkActive
          forceLoop: true
          playerId: pl45KFKdlddgk654dspkze
          updatedAt: 2020-01-31T10:18:47Z
      properties:
        data:
          items:
            $ref: '#/components/schemas/player-theme'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: PlayerThemes
      type: object
    player-theme-upload-logo-payload:
      properties:
        file:
          description: The name of the file you want to use for your logo.
          format: binary
          type: string
        link:
          description: A public link that you want to advertise in your player. For
            example, you could add a link to your company. When a viewer clicks on
            your logo, they will be taken to this address.
          example: https://my-company.com
          format: string
          type: string
      required:
      - file
      title: PlayerThemeUploadLogoPayload
      type: object
    analytics-plays-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - plays: 100
          value: vi3q7HxhApxRF1c8F8r6VeaI
        - plays: 100
          value: vi3q7HxhApxRF1c8F8r6VeaI
      properties:
        data:
          items:
            $ref: '#/components/schemas/analytics-data'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: Play event analytics response
      type: object
    analytics-data:
      example:
        plays: 100
        value: vi3q7HxhApxRF1c8F8r6VeaI
      properties:
        value:
          description: Shows a value for the property you have specified for `dimension`
            in your request. For example, if you requested `dimension=videoId`, each
            `value` field in the response returns a different videoId.
          example: vi3q7HxhApxRF1c8F8r6VeaI
          type: string
        plays:
          description: Shows the number of play events for one specific `value`.
          example: 100
          type: integer
      required:
      - plays
      - value
      title: Play event analytics data
      type: object
    analytics-plays-400-error:
      properties:
        type:
          description: A link to the error documentation.
          type: string
        title:
          description: A description of the error that occurred.
          type: string
        status:
          description: The HTTP status code.
          type: integer
        detail:
          description: A solution for the error.
          type: string
        name:
          description: The name of the parameter that caused the error.
          type: string
      type: object
    raw-statistics-list-sessions-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - session:
            sessionId: psEmFwGQUAXR2lFHj5nDOpy
            loadedAt: 2019-06-24T11:45:01.109Z
            endedAt: 2019-06-24T11:49:19.243Z
          location:
            country: France
            city: Paris
          referrer:
            url: https://api.video
            medium: organic
            source: https://google.com
            searchTerm: video encoding hosting and delivery
          device:
            type: desktop
            vendor: Dell
            model: unknown
          os:
            name: Microsoft Windows
            shortname: W10
            version: Windows10
          client:
            type: browser
            name: Firefox
            version: "67.0"
        - session:
            sessionId: psEmFwGQUAXR2lFHj5nDOpy
            loadedAt: 2019-06-24T11:45:01.109Z
            endedAt: 2019-06-24T11:49:19.243Z
          location:
            country: France
            city: Paris
          referrer:
            url: https://api.video
            medium: organic
            source: https://google.com
            searchTerm: video encoding hosting and delivery
          device:
            type: desktop
            vendor: Dell
            model: unknown
          os:
            name: Microsoft Windows
            shortname: W10
            version: Windows10
          client:
            type: browser
            name: Firefox
            version: "67.0"
      properties:
        data:
          items:
            $ref: '#/components/schemas/video-session'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: VideoSessions
      type: object
    raw-statistics-list-live-stream-analytics-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - referrer:
            searchTerm: video stream
            medium: organic
            source: https://google.com
            url: https://api.video
          os:
            name: Microsoft Windows
            shortname: W10
            version: Windows 10
          session:
            loadedAt: 2019-06-24T11:45:01.109Z
            endedAt: 2019-06-24T12:45:01.109Z
            sessionId: sessionId
          client:
            name: Firefox
            type: browser
            version: "67.0"
          location:
            country: France
            city: Paris
          device:
            vendor: Dell
            model: unknown
            type: desktop
        - referrer:
            searchTerm: video stream
            medium: organic
            source: https://google.com
            url: https://api.video
          os:
            name: Microsoft Windows
            shortname: W10
            version: Windows 10
          session:
            loadedAt: 2019-06-24T11:45:01.109Z
            endedAt: 2019-06-24T12:45:01.109Z
            sessionId: sessionId
          client:
            name: Firefox
            type: browser
            version: "67.0"
          location:
            country: France
            city: Paris
          device:
            vendor: Dell
            model: unknown
            type: desktop
      properties:
        data:
          items:
            $ref: '#/components/schemas/live-stream-session'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: LiveStreamSessions
      type: object
    raw-statistics-list-player-session-events-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - emittedAt: 2019-06-24T11:45:01.109Z
          at: 0
          from: 6
          to: 1
          type: play
        - emittedAt: 2019-06-24T11:45:01.109Z
          at: 0
          from: 6
          to: 1
          type: play
      properties:
        data:
          items:
            $ref: '#/components/schemas/player-session-event'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: PlayerSessionEvents
      type: object
    webhooks-list-response:
      example:
        pagination:
          itemsTotal: 123
          pagesTotal: 7
          pageSize: 20
          currentPage: 3
          currentPageItems: 20
          links:
            first:
              rel: first
              uri: /videos/search?currentPage=1&pageSize=20
            previous:
              rel: previous
              uri: /videos/search?currentPage=2&pageSize=20
            next:
              rel: next
              uri: /videos/search?currentPage=4&pageSize=20
            last:
              rel: last
              uri: /videos/search?currentPage=6&pageSize=20
        data:
        - createdAt: 2019-06-24T11:45:01.109Z
          webhookId: webhook_XXXXXXXXXXXXXXX
          events: '["video.encoding.quality.completed"]'
          url: http://clientnotificationserver.com/notif?myquery=query
        - createdAt: 2019-06-24T11:45:01.109Z
          webhookId: webhook_XXXXXXXXXXXXXXX
          events: '["video.encoding.quality.completed"]'
          url: http://clientnotificationserver.com/notif?myquery=query
      properties:
        data:
          items:
            $ref: '#/components/schemas/webhook'
          type: array
        pagination:
          $ref: '#/components/schemas/pagination'
      required:
      - data
      - pagination
      title: Webhooks
      type: object
    webhooks-creation-payload:
      example:
        events:
        - video.encoding.quality.completed
        url: http://clientnotificationserver.com/notif?myquery=query
      properties:
        events:
          description: |-
            A list of the webhooks that you are subscribing to. There are Currently four webhook options:
            * ```video.encoding.quality.completed```  Occurs when a new video is uploaded into your account, it will be encoded into several different HLS and mp4 qualities. When each version is encoded, your webhook will get a notification.  It will look like ```{ \"type\": \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\", \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"720p\"} ```. This request says that the 720p HLS encoding was completed.
            * ```live-stream.broadcast.started```  When a live stream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.
            * ```live-stream.broadcast.ended```  This event fires when a live stream has finished broadcasting.
            * ```video.source.recorded```  Occurs when a live stream is recorded and submitted for encoding.
          example:
          - video.encoding.quality.completed
          items:
            type: string
          type: array
        url:
          description: The the url to which HTTP notifications are sent. It could
            be any http or https URL.
          example: https://example.com/webhooks
          type: string
      required:
      - events
      - url
      title: WebhooksCreationPayload
      type: object
    pagination-link:
      properties:
        rel:
          type: string
        uri:
          format: uri
          type: string
      title: PaginationLink
      type: object
    video-watermark:
      properties:
        id:
          description: id of the watermark
          example: watermark_1BWr2L5MTQwxGkuxKjzh6i
          type: string
        top:
          description: Distance expressed in px or % between the top-border of the
            video and the watermark-image.
          example: 10px
          type: string
        left:
          description: Distance expressed in px or % between the left-border of the
            video and the watermark-image.
          example: 10px
          type: string
        bottom:
          description: Distance expressed in px or % between the bottom-border of
            the video and the watermark-image.
          example: 10px
          type: string
        right:
          description: Distance expressed in px or % between the right-border of the
            video and the watermark-image.
          example: 10px
          type: string
        width:
          description: 'Width of the watermark-image relative to the video if expressed
            in %. Otherwise a fixed width. NOTE: To keep intrinsic watermark-image
            width use `initial`.'
          example: initial
          type: string
        height:
          description: 'Height of the watermark-image relative to the video if expressed
            in %. Otherwise a fixed height. NOTE: To keep intrinsic watermark-image
            height use `initial`.'
          example: initial
          type: string
        opacity:
          description: Opacity expressed in % only to specify the degree of the watermark-image
            transparency with the video.
          example: 70%
          type: string
      type: object
    video-clip:
      properties:
        startTimecode:
          pattern: ^(?:\d{2,3}:[0-5]\d:[0-5]\d(?:\.\d{1,3}|\:\d{1,2})?|\d{1,7})$
          type: string
        endTimecode:
          pattern: ^(?:\d{2,3}:[0-5]\d:[0-5]\d(?:\.\d{1,3}|\:\d{1,2})?|\d{1,7})$
          type: string
      type: object
    video-source-live-stream-link:
      properties:
        rel:
          type: string
        uri:
          type: string
      type: object
    video-source-live-stream:
      description: This appears if the video is from a Live Record.
      properties:
        liveStreamId:
          description: The unique identifier for the live stream.
          example: li400mYKSgQ6xs7taUeSaEKr
          type: string
        links:
          items:
            $ref: '#/components/schemas/video-source-live-stream-link'
          type: array
      type: object
    video-source:
      description: Source information about the video.
      properties:
        uri:
          description: The URL where the video is stored.
          example: /videos/vi4k0jvEUuaTdRAEjQ4Prklg/source
          type: string
        type:
          type: string
        liveStream:
          $ref: '#/components/schemas/video-source-live-stream'
      title: VideoSource
      type: object
    video-assets:
      description: Collection of details about the video object that you can use to
        work with the video object.
      properties:
        hls:
          description: This is the manifest URL. For HTTP Live Streaming (HLS), when
            a HLS video stream is initiated, the first file to download is the manifest.
            This file has the extension M3U8, and provides the video player with information
            about the various bitrates available for streaming.
          format: uri
          type: string
        iframe:
          description: Code to use video from a third party website
          example: <iframe src="//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae"
            width="100%" height="100%" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
          type: string
        player:
          description: Raw url of the player.
          example: https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae
          format: uri
          type: string
        thumbnail:
          description: Poster of the video.
          example: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg
          format: uri
          type: string
        mp4:
          description: Available only if mp4Support is enabled. Raw mp4 url.
          example: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/source.mp4
          format: uri
          type: string
      title: VideoAssets
      type: object
    video-session-session:
      properties:
        sessionId:
          description: The unique identifier for the session that you can use to track
            what happens during it.
          example: psEmFwGQUAXR2lFHj5nDOpy
          type: string
        loadedAt:
          description: When the video session started, presented in ISO-8601 format.
          example: 2019-06-24T11:45:01.109Z
          format: date-time
          type: string
        endedAt:
          description: When the video session ended, presented in ISO-8601 format.
          example: 2019-06-24T12:45:01.109Z
          format: date-time
          type: string
        metadata:
          description: A list of key value pairs that you use to provide metadata
            for your video. These pairs can be made dynamic, allowing you to segment
            your audience. You can also just use the pairs as another way to tag and
            categorize your videos.
          example: '[{"key": "Author", "value": "John Doe"}]'
          items:
            $ref: '#/components/schemas/metadata'
          type: array
      title: VideoSessionSession
      type: object
    video-session-location:
      description: The location of the viewer.
      properties:
        country:
          description: The country of the viewer.
          example: France
          type: string
        city:
          description: The city of the viewer.
          example: Paris
          nullable: true
          type: string
      title: VideoSessionLocation
      type: object
    video-session-referrer:
      properties:
        url:
          description: The link the viewer used to reach the video session.
          example: https://api.video
          nullable: true
          type: string
        medium:
          description: How they arrived at the site, for example organic or paid.
            Organic meaning they found it themselves and paid meaning they followed
            a link from an advertisement.
          example: organic
          type: string
        source:
          description: The source the referrer came from to the video session. For
            example if they searched through google to find the stream.
          example: https://google.com
          type: string
        searchTerm:
          description: The search term they typed to arrive at the video session.
          type: string
      title: VideoSessionReferrer
      type: object
    video-session-device:
      description: What type of device the user is on when in the video session.
      properties:
        type:
          description: What the type is like desktop, laptop, mobile.
          example: desktop
          type: string
        vendor:
          description: If known, what the brand of the device is, like Apple, Dell,
            etc.
          example: Dell
          type: string
        model:
          description: The specific model of the device, if known.
          example: unknown
          type: string
      title: VideoSessionDevice
      type: object
    video-session-os:
      description: The operating system the viewer is on.
      example:
        name: Microsoft Windows
        shortname: W10
        version: Windows 10
      properties:
        name:
          description: The name of the operating system.
          example: Microsoft Windows
          type: string
        shortname:
          description: The nickname for the operating system, often representing the
            version.
          example: W10
          type: string
        version:
          description: The version of the operating system.
          example: Windows 10
          type: string
      title: VideoSessionOs
      type: object
    video-session-client:
      description: What kind of browser the viewer is using for the video session.
      properties:
        name:
          description: The name of the browser used to view the video session.
          example: Firefox
          type: string
        version:
          description: The version of the browser used to view the video session.
          example: "67.0"
          type: string
        type:
          description: The type of client used to view the video session.
          example: browser
          type: string
      title: VideoSessionClient
      type: object
    live-stream-assets:
      example:
        thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
        iframe: <iframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"
          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>
        hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
        player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
      properties:
        hls:
          description: The http live streaming (HLS) link for your live video stream.
          example: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8
          format: uri
          type: string
        iframe:
          description: The embed code for the iframe containing your live video stream.
          example: <iframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"
            width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>
          type: string
        player:
          description: A link to the video player that is playing your live stream.
          example: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr
          format: uri
          type: string
        thumbnail:
          description: A link to the thumbnail for your video.
          example: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg
          format: uri
          type: string
      title: LiveStreamAssets
      type: object
    live-stream-session-session:
      example:
        loadedAt: 2019-06-24T11:45:01.109Z
        endedAt: 2019-06-24T12:45:01.109Z
        sessionId: sessionId
      properties:
        sessionId:
          description: A unique identifier for your session. You can use this to track
            what happens during a specific session.
          type: string
        loadedAt:
          description: When the session started, with the date and time presented
            in ISO-8601 format.
          example: 2019-06-24T11:45:01.109Z
          format: date-time
          type: string
        endedAt:
          description: When the session ended, with the date and time presented in
            ISO-8601 format.
          example: 2019-06-24T12:45:01.109Z
          format: date-time
          type: string
      title: LiveStreamSessionSession
      type: object
    live-stream-session-location:
      description: The location of the viewer of the live stream.
      example:
        country: France
        city: Paris
      properties:
        country:
          description: The country of the viewer of the live stream.
          example: France
          type: string
        city:
          description: The city of the viewer of the live stream.
          example: Paris
          type: string
      title: LiveStreamSessionLocation
      type: object
    live-stream-session-referrer:
      example:
        searchTerm: video stream
        medium: organic
        source: https://google.com
        url: https://api.video
      properties:
        url:
          description: The website the viewer of the live stream was referred to in
            order to view the live stream.
          example: https://api.video
          type: string
        medium:
          description: The type of search that brought the viewer to the live stream.
            Organic would be they found it on their own, paid would be they found
            it via an advertisement.
          example: organic
          type: string
        source:
          description: Where the viewer came from to see the live stream (usually
            where they searched from).
          example: https://google.com
          type: string
        searchTerm:
          description: What term they searched for that led them to the live stream.
          example: video stream
          type: string
      title: LiveStreamSessionReferrer
      type: object
    live-stream-session-device:
      description: What type of device the user is on when in the live stream session.
      example:
        vendor: Dell
        model: unknown
        type: desktop
      properties:
        type:
          description: What the type is like desktop, laptop, mobile.
          example: desktop
          type: string
        vendor:
          description: If known, what the brand of the device is, like Apple, Dell,
            etc.
          example: Dell
          type: string
        model:
          description: The specific model of the device, if known.
          example: unknown
          type: string
      title: LiveStreamSessionDevice
      type: object
    live-stream-session-client:
      description: What kind of browser the viewer is using for the live stream session.
      example:
        name: Firefox
        type: browser
        version: "67.0"
      properties:
        name:
          description: The name of the browser used to view the live stream session.
          example: Firefox
          type: string
        version:
          description: The version of the browser used to view the live stream session.
          example: "67.0"
          type: string
        type:
          description: The type of client used to view the live stream session.
          example: browser
          type: string
      title: LiveStreamSessionClient
      type: object
    video-status-ingest:
      description: Details about the capturing, transferring, and storing of your
        video for use immediately or in the future.
      properties:
        status:
          description: There are three possible ingest statuses. missing - you are
            missing information required to ingest the video. uploading - the video
            is in the process of being uploaded. uploaded - the video is ready for
            use.
          enum:
          - missing
          - uploading
          - uploaded
          example: uploaded
          type: string
        filesize:
          description: The size of your file in bytes.
          example: 200000
          nullable: true
          type: integer
        receivedBytes:
          description: The total number of bytes received, listed for each chunk of
            the upload.
          items:
            $ref: '#/components/schemas/bytes-range'
          type: array
        receivedParts:
          $ref: '#/components/schemas/video_status_ingest_receivedParts'
      title: VideoStatusIngest
      type: object
    video-status-encoding-metadata:
      properties:
        width:
          description: The width of the video in pixels.
          nullable: true
          type: integer
        height:
          description: The height of the video in pixels.
          nullable: true
          type: integer
        bitrate:
          description: The number of bits processed per second.
          nullable: true
          type: number
        duration:
          description: The length of the video.
          nullable: true
          type: integer
        framerate:
          description: The frequency with which consecutive images or frames appear
            on a display. Shown in this API as frames per second (fps).
          example: 60
          nullable: true
          type: integer
        samplerate:
          description: How many samples per second a digital audio system uses to
            record an audio signal. The higher the rate, the higher the frequencies
            that can be recorded. They are presented in this API using hertz.
          example: 48000
          nullable: true
          type: integer
        videoCodec:
          description: 'The method used to compress and decompress digital video.
            API Video supports all codecs in the libavcodec library. '
          nullable: true
          type: string
        audioCodec:
          description: The method used to compress and decompress digital audio for
            your video.
          nullable: true
          type: string
        aspectRatio:
          nullable: true
          type: string
      title: VideoStatusEncodingMetadata
      type: object
    video-status-encoding:
      properties:
        playable:
          description: Whether the video is playable or not.
          example: true
          type: boolean
        qualities:
          description: Available qualities the video can be viewed in.
          items:
            $ref: '#/components/schemas/quality'
          type: array
        metadata:
          $ref: '#/components/schemas/video-status-encoding-metadata'
      title: VideoStatusEncoding
      type: object
    player_theme_assets:
      example:
        link: path/to/my/logo/mylogo.jpg
        logo: mylogo.jpg
      properties:
        logo:
          description: The name of the file containing the logo you want to use.
          example: mylogo.jpg
          type: string
        link:
          description: The path to the file containing your logo.
          example: path/to/my/logo/mylogo.jpg
          type: string
      type: object
    video_status_ingest_receivedParts:
      properties:
        parts:
          description: The parts that have been uploaded, ordered. For example, if
            part 2 was sent before part 1, and both have been uploaded, the output
            will be [1, 2].
          example: '[1, 2, 3]'
          items:
            type: integer
          type: array
        total:
          description: Contains the number of expected parts. The total will be listed
            as "null" until the total number of parts is known.
          example: 3
          nullable: true
          type: integer
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
    apiKey:
      scheme: basic
      type: http
x-stoplight:
  id: ybzk39fiws46g
x-client-base-paths:
  production: https://ws.api.video
  sandbox: https://sandbox.api.video
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
  - curl
  - go
  - node
  - php
  - python
