/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type SummariesApiListRequest struct {
	videoId      *string
	origin       *string
	sourceStatus *string
	sortBy       *string
	sortOrder    *string
	currentPage  *int32
	pageSize     *int32
}

func (r SummariesApiListRequest) VideoId(videoId string) SummariesApiListRequest {
	r.videoId = &videoId
	return r
}
func (r SummariesApiListRequest) Origin(origin string) SummariesApiListRequest {
	r.origin = &origin
	return r
}
func (r SummariesApiListRequest) SourceStatus(sourceStatus string) SummariesApiListRequest {
	r.sourceStatus = &sourceStatus
	return r
}
func (r SummariesApiListRequest) SortBy(sortBy string) SummariesApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r SummariesApiListRequest) SortOrder(sortOrder string) SummariesApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r SummariesApiListRequest) CurrentPage(currentPage int32) SummariesApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r SummariesApiListRequest) PageSize(pageSize int32) SummariesApiListRequest {
	r.pageSize = &pageSize
	return r
}

type SummariesServiceI interface {
	/*
	 * Create Generate video summary
	 * @return SummariesApiCreateRequest
	 */

	Create(summaryCreationPayload SummaryCreationPayload) (*Summary, error)

	/*
	 * Create Generate video summary
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return SummariesApiCreateRequest
	 */

	CreateWithContext(ctx context.Context, summaryCreationPayload SummaryCreationPayload) (*Summary, error)

	/*
	 * Update Update summary details
	 * @param summaryId The unique identifier of the summary source you want to update.
	 * @return SummariesApiUpdateRequest
	 */

	Update(summaryId string, summaryUpdatePayload SummaryUpdatePayload) (*SummarySource, error)

	/*
	 * Update Update summary details
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param summaryId The unique identifier of the summary source you want to update.
	 * @return SummariesApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, summaryId string, summaryUpdatePayload SummaryUpdatePayload) (*SummarySource, error)

	/*
	 * Delete Delete video summary
	 * @param summaryId The unique identifier of the summary you want to delete.
	 * @return SummariesApiDeleteRequest
	 */

	Delete(summaryId string) error

	/*
	 * Delete Delete video summary
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param summaryId The unique identifier of the summary you want to delete.
	 * @return SummariesApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, summaryId string) error

	/*
	 * List List summaries
	 * @return SummariesApiListRequest
	 */

	List(r SummariesApiListRequest) (*SummariesListResponse, error)

	/*
	 * List List summaries
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return SummariesApiListRequest
	 */

	ListWithContext(ctx context.Context, r SummariesApiListRequest) (*SummariesListResponse, error)

	/*
	 * GetSummarySource Get summary details
	 * @param summaryId The unique identifier of the summary source you want to retrieve.
	 * @return SummariesApiGetSummarySourceRequest
	 */

	GetSummarySource(summaryId string) (*SummarySource, error)

	/*
	 * GetSummarySource Get summary details
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param summaryId The unique identifier of the summary source you want to retrieve.
	 * @return SummariesApiGetSummarySourceRequest
	 */

	GetSummarySourceWithContext(ctx context.Context, summaryId string) (*SummarySource, error)
}

// SummariesService communicating with the Summaries
// endpoints of the api.video API
type SummariesService struct {
	client *Client
}

/*
 * Create Generate video summary
 * Generate a title, abstract, and key takeaways for a video.

 * @return SummariesApiCreateRequest
 */

func (s *SummariesService) Create(summaryCreationPayload SummaryCreationPayload) (*Summary, error) {

	return s.CreateWithContext(context.Background(), summaryCreationPayload)

}

/*
 * Create Generate video summary
 * Generate a title, abstract, and key takeaways for a video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return SummariesApiCreateRequest
 */

func (s *SummariesService) CreateWithContext(ctx context.Context, summaryCreationPayload SummaryCreationPayload) (*Summary, error) {
	var localVarPostBody interface{}

	localVarPath := "/summaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = summaryCreationPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Summary)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update summary details
 * Update details for a summary. Note that this operation is only allowed for summary objects where `sourceStatus` is `missing`.

 * @param summaryId The unique identifier of the summary source you want to update.
 * @return SummariesApiUpdateRequest
 */

func (s *SummariesService) Update(summaryId string, summaryUpdatePayload SummaryUpdatePayload) (*SummarySource, error) {

	return s.UpdateWithContext(context.Background(), summaryId, summaryUpdatePayload)

}

/*
 * Update Update summary details
 * Update details for a summary. Note that this operation is only allowed for summary objects where `sourceStatus` is `missing`.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param summaryId The unique identifier of the summary source you want to update.
 * @return SummariesApiUpdateRequest
 */

func (s *SummariesService) UpdateWithContext(ctx context.Context, summaryId string, summaryUpdatePayload SummaryUpdatePayload) (*SummarySource, error) {
	var localVarPostBody interface{}

	localVarPath := "/summaries/{summaryId}/source"
	localVarPath = strings.Replace(localVarPath, "{"+"summaryId"+"}", url.PathEscape(parameterToString(summaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = summaryUpdatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(SummarySource)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete video summary
 * Delete a summary tied to a video.

 * @param summaryId The unique identifier of the summary you want to delete.
 * @return SummariesApiDeleteRequest
 */

func (s *SummariesService) Delete(summaryId string) error {

	return s.DeleteWithContext(context.Background(), summaryId)

}

/*
 * Delete Delete video summary
 * Delete a summary tied to a video.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param summaryId The unique identifier of the summary you want to delete.
 * @return SummariesApiDeleteRequest
 */

func (s *SummariesService) DeleteWithContext(ctx context.Context, summaryId string) error {
	var localVarPostBody interface{}

	localVarPath := "/summaries/{summaryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"summaryId"+"}", url.PathEscape(parameterToString(summaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List summaries
 * List all summarries for your videos in a project.

 * @return SummariesApiListRequest
 */

func (s *SummariesService) List(r SummariesApiListRequest) (*SummariesListResponse, error) {

	return s.ListWithContext(context.Background(), r)

}

/*
 * List List summaries
 * List all summarries for your videos in a project.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return SummariesApiListRequest
 */

func (s *SummariesService) ListWithContext(ctx context.Context, r SummariesApiListRequest) (*SummariesListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/summaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.videoId != nil {
		localVarQueryParams.Add("videoId", parameterToString(*r.videoId, ""))
	}
	if r.origin != nil {
		localVarQueryParams.Add("origin", parameterToString(*r.origin, ""))
	}
	if r.sourceStatus != nil {
		localVarQueryParams.Add("sourceStatus", parameterToString(*r.sourceStatus, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(SummariesListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * GetSummarySource Get summary details
 * Get all details for a summary.

 * @param summaryId The unique identifier of the summary source you want to retrieve.
 * @return SummariesApiGetSummarySourceRequest
 */

func (s *SummariesService) GetSummarySource(summaryId string) (*SummarySource, error) {

	return s.GetSummarySourceWithContext(context.Background(), summaryId)

}

/*
 * GetSummarySource Get summary details
 * Get all details for a summary.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param summaryId The unique identifier of the summary source you want to retrieve.
 * @return SummariesApiGetSummarySourceRequest
 */

func (s *SummariesService) GetSummarySourceWithContext(ctx context.Context, summaryId string) (*SummarySource, error) {
	var localVarPostBody interface{}

	localVarPath := "/summaries/{summaryId}/source"
	localVarPath = strings.Replace(localVarPath, "{"+"summaryId"+"}", url.PathEscape(parameterToString(summaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(SummarySource)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
