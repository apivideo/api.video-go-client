/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
//"encoding/json"
)

// SummarySource struct for SummarySource
type SummarySource struct {
	// A video title, based on the contents of the video.
	Title *string `json:"title,omitempty"`
	// A short outline of the contents of the video. The length of an `abstract` depends on the amount of content in a video that can be transcribed. The API condenses the contents into minimum 20, maximum 300 words.
	Abstract *string `json:"abstract,omitempty"`
	// A list of 3 key points from the video, in chronological order.
	Takeaways *[]string `json:"takeaways,omitempty"`
}

// NewSummarySource instantiates a new SummarySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummarySource() *SummarySource {
	this := SummarySource{}
	return &this
}

// NewSummarySourceWithDefaults instantiates a new SummarySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummarySourceWithDefaults() *SummarySource {
	this := SummarySource{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SummarySource) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySource) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SummarySource) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SummarySource) SetTitle(v string) {
	o.Title = &v
}

// GetAbstract returns the Abstract field value if set, zero value otherwise.
func (o *SummarySource) GetAbstract() string {
	if o == nil || o.Abstract == nil {
		var ret string
		return ret
	}
	return *o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySource) GetAbstractOk() (*string, bool) {
	if o == nil || o.Abstract == nil {
		return nil, false
	}
	return o.Abstract, true
}

// HasAbstract returns a boolean if a field has been set.
func (o *SummarySource) HasAbstract() bool {
	if o != nil && o.Abstract != nil {
		return true
	}

	return false
}

// SetAbstract gets a reference to the given string and assigns it to the Abstract field.
func (o *SummarySource) SetAbstract(v string) {
	o.Abstract = &v
}

// GetTakeaways returns the Takeaways field value if set, zero value otherwise.
func (o *SummarySource) GetTakeaways() []string {
	if o == nil || o.Takeaways == nil {
		var ret []string
		return ret
	}
	return *o.Takeaways
}

// GetTakeawaysOk returns a tuple with the Takeaways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarySource) GetTakeawaysOk() (*[]string, bool) {
	if o == nil || o.Takeaways == nil {
		return nil, false
	}
	return o.Takeaways, true
}

// HasTakeaways returns a boolean if a field has been set.
func (o *SummarySource) HasTakeaways() bool {
	if o != nil && o.Takeaways != nil {
		return true
	}

	return false
}

// SetTakeaways gets a reference to the given []string and assigns it to the Takeaways field.
func (o *SummarySource) SetTakeaways(v []string) {
	o.Takeaways = &v
}

type NullableSummarySource struct {
	value *SummarySource
	isSet bool
}

func (v NullableSummarySource) Get() *SummarySource {
	return v.value
}

func (v *NullableSummarySource) Set(val *SummarySource) {
	v.value = val
	v.isSet = true
}

func (v NullableSummarySource) IsSet() bool {
	return v.isSet
}

func (v *NullableSummarySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummarySource(val *SummarySource) *NullableSummarySource {
	return &NullableSummarySource{value: val, isSet: true}
}
