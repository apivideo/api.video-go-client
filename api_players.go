/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type PlayersApiListRequest struct {
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r PlayersApiListRequest) SortBy(sortBy string) PlayersApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r PlayersApiListRequest) SortOrder(sortOrder string) PlayersApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r PlayersApiListRequest) CurrentPage(currentPage int32) PlayersApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r PlayersApiListRequest) PageSize(pageSize int32) PlayersApiListRequest {
	r.pageSize = &pageSize
	return r
}

type PlayersServiceI interface {
	/*
	 * Delete Delete a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player you want to delete.
	 * @return PlayersApiDeleteRequest
	 */

	Delete(playerId string) error
	/*
	 * DeleteLogo Delete logo
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayersApiDeleteLogoRequest
	 */

	DeleteLogo(playerId string) error
	/*
	 * List List all players
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlayersApiListRequest
	 */

	List(r PlayersApiListRequest) (*PlayersListResponse, error)

	/*
	 * Get Show a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player you want to retrieve.
	 * @return PlayersApiGetRequest
	 */

	Get(playerId string) (*Player, error)
	/*
	 * Update Update a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayersApiUpdateRequest
	 */

	Update(playerId string, playerUpdatePayload PlayerUpdatePayload) (*Player, error)
	/*
	 * Create Create a player
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return PlayersApiCreateRequest
	 */

	Create(playerCreationPayload PlayerCreationPayload) (*Player, error)
	/*
	 * UploadLogo Upload a logo
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param playerId The unique identifier for the player.
	 * @return PlayersApiUploadLogoRequest
	 */
	UploadLogo(playerId string, link string, fileName string, fileReader io.Reader) (*Player, error)

	/*
	 * UploadLogo Upload a logo
	 * @param playerId The unique identifier for the player.
	 * @return PlayersApiUploadLogoRequest
	 */
	UploadLogoFile(playerId string, file *os.File, link string) (*Player, error)
}

// PlayersService communicating with the Players
// endpoints of the api.video API
type PlayersService struct {
	client *Client
}

/*
 * Delete Delete a player
 * Delete a player if you no longer need it. You can delete any player that you have the player ID for.

 * @param playerId The unique identifier for the player you want to delete.
 * @return PlayersApiDeleteRequest
 */

func (s *PlayersService) Delete(playerId string) error {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * DeleteLogo Delete logo

 * @param playerId The unique identifier for the player.
 * @return PlayersApiDeleteLogoRequest
 */

func (s *PlayersService) DeleteLogo(playerId string) error {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}/logo"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List all players
 * Retrieve a list of all the players you created, as well as details about each one.

 * @return PlayersApiListRequest
 */

func (s *PlayersService) List(r PlayersApiListRequest) (*PlayersListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/players"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(PlayersListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Show a player
 * Use a player ID to retrieve details about the player and display it for viewers.

 * @param playerId The unique identifier for the player you want to retrieve.
 * @return PlayersApiGetRequest
 */

func (s *PlayersService) Get(playerId string) (*Player, error) {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Player)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a player
 * Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.

 * @param playerId The unique identifier for the player.
 * @return PlayersApiUpdateRequest
 */

func (s *PlayersService) Update(playerId string, playerUpdatePayload PlayerUpdatePayload) (*Player, error) {
	var localVarPostBody interface{}

	localVarPath := "/players/{playerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = playerUpdatePayload

	req, err := s.client.prepareRequest(http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Player)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Create Create a player
 * Create a player for your video, and customise it.

 * @return PlayersApiCreateRequest
 */

func (s *PlayersService) Create(playerCreationPayload PlayerCreationPayload) (*Player, error) {
	var localVarPostBody interface{}

	localVarPath := "/players"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = playerCreationPayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(Player)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 200KB.
It will be scaled down to 30px height and converted to PNG to be displayed in the player.

 * @param playerId The unique identifier for the player.
 * @return PlayersApiUploadLogoRequest
*/

func (s *PlayersService) UploadLogoFile(playerId string, file *os.File, link string) (*Player, error) {
	return s.UploadLogo(playerId, link, file.Name(), io.Reader(file))
}

/*
 * UploadLogo Upload a logo
 * The uploaded image maximum size should be 200x100 and its weight should be 200KB.
It will be scaled down to 30px height and converted to PNG to be displayed in the player.

 * @param playerId The unique identifier for the player.
 * @return PlayersApiUploadLogoRequest
*/
func (s *PlayersService) UploadLogo(playerId string, link string, fileName string, fileReader io.Reader) (*Player, error) {
	localVarPath := "/players/{playerId}/logo"
	localVarPath = strings.Replace(localVarPath, "{"+"playerId"+"}", url.PathEscape(parameterToString(playerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	localVarFormParams["link"] = parameterToString(link, "")

	req, err := s.client.prepareUploadRequest(localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(Player)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
