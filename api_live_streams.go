/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type LiveStreamsApiListRequest struct {
	streamKey   *string
	name        *string
	sortBy      *string
	sortOrder   *string
	currentPage *int32
	pageSize    *int32
}

func (r LiveStreamsApiListRequest) StreamKey(streamKey string) LiveStreamsApiListRequest {
	r.streamKey = &streamKey
	return r
}
func (r LiveStreamsApiListRequest) Name(name string) LiveStreamsApiListRequest {
	r.name = &name
	return r
}
func (r LiveStreamsApiListRequest) SortBy(sortBy string) LiveStreamsApiListRequest {
	r.sortBy = &sortBy
	return r
}
func (r LiveStreamsApiListRequest) SortOrder(sortOrder string) LiveStreamsApiListRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r LiveStreamsApiListRequest) CurrentPage(currentPage int32) LiveStreamsApiListRequest {
	r.currentPage = &currentPage
	return r
}
func (r LiveStreamsApiListRequest) PageSize(pageSize int32) LiveStreamsApiListRequest {
	r.pageSize = &pageSize
	return r
}

type LiveStreamsServiceI interface {
	/*
	 * Create Create live stream
	 * @return LiveStreamsApiCreateRequest
	 */

	Create(liveStreamCreationPayload LiveStreamCreationPayload) (*LiveStream, error)

	/*
	 * Create Create live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveStreamsApiCreateRequest
	 */

	CreateWithContext(ctx context.Context, liveStreamCreationPayload LiveStreamCreationPayload) (*LiveStream, error)

	/*
	 * Get Retrieve live stream
	 * @param liveStreamId The unique ID for the live stream you want to watch.
	 * @return LiveStreamsApiGetRequest
	 */

	Get(liveStreamId string) (*LiveStream, error)

	/*
	 * Get Retrieve live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream you want to watch.
	 * @return LiveStreamsApiGetRequest
	 */

	GetWithContext(ctx context.Context, liveStreamId string) (*LiveStream, error)

	/*
	 * Update Update a live stream
	 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
	 * @return LiveStreamsApiUpdateRequest
	 */

	Update(liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error)

	/*
	 * Update Update a live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
	 * @return LiveStreamsApiUpdateRequest
	 */

	UpdateWithContext(ctx context.Context, liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error)

	/*
	 * Delete Delete a live stream
	 * @param liveStreamId The unique ID for the live stream that you want to remove.
	 * @return LiveStreamsApiDeleteRequest
	 */

	Delete(liveStreamId string) error

	/*
	 * Delete Delete a live stream
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream that you want to remove.
	 * @return LiveStreamsApiDeleteRequest
	 */

	DeleteWithContext(ctx context.Context, liveStreamId string) error

	/*
	 * List List all live streams
	 * @return LiveStreamsApiListRequest
	 */

	List(r LiveStreamsApiListRequest) (*LiveStreamListResponse, error)

	/*
	 * List List all live streams
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return LiveStreamsApiListRequest
	 */

	ListWithContext(ctx context.Context, r LiveStreamsApiListRequest) (*LiveStreamListResponse, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveStreamsApiUploadThumbnailRequest
	 */
	UploadThumbnail(liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error)
	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveStreamsApiUploadThumbnailRequest
	 */
	UploadThumbnailWithContext(ctx context.Context, liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveStreamsApiUploadThumbnailRequest
	 */
	UploadThumbnailFile(liveStreamId string, file *os.File) (*LiveStream, error)

	/*
	 * UploadThumbnail Upload a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique ID for the live stream you want to upload.
	 * @return LiveStreamsApiUploadThumbnailRequest
	 */
	UploadThumbnailFileWithContext(ctx context.Context, liveStreamId string, file *os.File) (*LiveStream, error)

	/*
	 * DeleteThumbnail Delete a thumbnail
	 * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
	 * @return LiveStreamsApiDeleteThumbnailRequest
	 */

	DeleteThumbnail(liveStreamId string) (*LiveStream, error)

	/*
	 * DeleteThumbnail Delete a thumbnail
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
	 * @return LiveStreamsApiDeleteThumbnailRequest
	 */

	DeleteThumbnailWithContext(ctx context.Context, liveStreamId string) (*LiveStream, error)
}

// LiveStreamsService communicating with the LiveStreams
// endpoints of the api.video API
type LiveStreamsService struct {
	client *Client
}

/*
 * Create Create live stream
 * Creates a livestream object.

 * @return LiveStreamsApiCreateRequest
 */

func (s *LiveStreamsService) Create(liveStreamCreationPayload LiveStreamCreationPayload) (*LiveStream, error) {

	return s.CreateWithContext(context.Background(), liveStreamCreationPayload)

}

/*
 * Create Create live stream
 * Creates a livestream object.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return LiveStreamsApiCreateRequest
 */

func (s *LiveStreamsService) CreateWithContext(ctx context.Context, liveStreamCreationPayload LiveStreamCreationPayload) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = liveStreamCreationPayload

	req, err := s.client.prepareRequest(ctx, http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Get Retrieve live stream
 * Get a livestream by id.

 * @param liveStreamId The unique ID for the live stream you want to watch.
 * @return LiveStreamsApiGetRequest
 */

func (s *LiveStreamsService) Get(liveStreamId string) (*LiveStream, error) {

	return s.GetWithContext(context.Background(), liveStreamId)

}

/*
 * Get Retrieve live stream
 * Get a livestream by id.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique ID for the live stream you want to watch.
 * @return LiveStreamsApiGetRequest
 */

func (s *LiveStreamsService) GetWithContext(ctx context.Context, liveStreamId string) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Update Update a live stream
 * Updates the livestream object.

 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
 * @return LiveStreamsApiUpdateRequest
 */

func (s *LiveStreamsService) Update(liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error) {

	return s.UpdateWithContext(context.Background(), liveStreamId, liveStreamUpdatePayload)

}

/*
 * Update Update a live stream
 * Updates the livestream object.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
 * @return LiveStreamsApiUpdateRequest
 */

func (s *LiveStreamsService) UpdateWithContext(ctx context.Context, liveStreamId string, liveStreamUpdatePayload LiveStreamUpdatePayload) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	// body params
	localVarPostBody = liveStreamUpdatePayload

	req, err := s.client.prepareRequest(ctx, http.MethodPatch, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Delete Delete a live stream
 * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.

 * @param liveStreamId The unique ID for the live stream that you want to remove.
 * @return LiveStreamsApiDeleteRequest
 */

func (s *LiveStreamsService) Delete(liveStreamId string) error {

	return s.DeleteWithContext(context.Background(), liveStreamId)

}

/*
 * Delete Delete a live stream
 * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique ID for the live stream that you want to remove.
 * @return LiveStreamsApiDeleteRequest
 */

func (s *LiveStreamsService) DeleteWithContext(ctx context.Context, liveStreamId string) error {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return err
	}

	_, err = s.client.do(req, nil)

	if err != nil {
		return err
	}

	return nil

}

/*
 * List List all live streams
 * Get the list of livestreams on the workspace.

 * @return LiveStreamsApiListRequest
 */

func (s *LiveStreamsService) List(r LiveStreamsApiListRequest) (*LiveStreamListResponse, error) {

	return s.ListWithContext(context.Background(), r)

}

/*
 * List List all live streams
 * Get the list of livestreams on the workspace.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return LiveStreamsApiListRequest
 */

func (s *LiveStreamsService) ListWithContext(ctx context.Context, r LiveStreamsApiListRequest) (*LiveStreamListResponse, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	if r.streamKey != nil {
		localVarQueryParams.Add("streamKey", parameterToString(*r.streamKey, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.currentPage != nil {
		localVarQueryParams.Add("currentPage", parameterToString(*r.currentPage, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}

	req, err := s.client.prepareRequest(ctx, http.MethodGet, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStreamListResponse)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * UploadThumbnail Upload a thumbnail
 * Upload the thumbnail for the livestream.

 * @param liveStreamId The unique ID for the live stream you want to upload.
 * @return LiveStreamsApiUploadThumbnailRequest
 */

func (s *LiveStreamsService) UploadThumbnailFile(liveStreamId string, file *os.File) (*LiveStream, error) {
	return s.UploadThumbnailFileWithContext(context.Background(), liveStreamId, file)
}

/*
 * UploadThumbnail Upload a thumbnail
 * Upload the thumbnail for the livestream.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique ID for the live stream you want to upload.
 * @return LiveStreamsApiUploadThumbnailRequest
 */

func (s *LiveStreamsService) UploadThumbnailFileWithContext(ctx context.Context, liveStreamId string, file *os.File) (*LiveStream, error) {
	return s.UploadThumbnailWithContext(ctx, liveStreamId, file.Name(), io.Reader(file))
}

/*
* UploadThumbnail Upload a thumbnail
* Upload the thumbnail for the livestream.

* @param liveStreamId The unique ID for the live stream you want to upload.
* @return LiveStreamsApiUploadThumbnailRequest
 */
func (s *LiveStreamsService) UploadThumbnail(liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error) {
	return s.UploadThumbnailWithContext(context.Background(), liveStreamId, fileName, fileReader)
}

/*
 * UploadThumbnail Upload a thumbnail
 * Upload the thumbnail for the livestream.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique ID for the live stream you want to upload.
 * @return LiveStreamsApiUploadThumbnailRequest
 */
func (s *LiveStreamsService) UploadThumbnailWithContext(ctx context.Context, liveStreamId string, fileName string, fileReader io.Reader) (*LiveStream, error) {
	localVarPath := "/live-streams/{liveStreamId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)

	req, err := s.client.prepareUploadRequest(ctx, localVarPath, fileName, fileReader, localVarHeaderParams, localVarQueryParams, localVarFormParams)

	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * DeleteThumbnail Delete a thumbnail
 * Send the unique identifier for a live stream to delete its thumbnail.

 * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
 * @return LiveStreamsApiDeleteThumbnailRequest
 */

func (s *LiveStreamsService) DeleteThumbnail(liveStreamId string) (*LiveStream, error) {

	return s.DeleteThumbnailWithContext(context.Background(), liveStreamId)

}

/*
 * DeleteThumbnail Delete a thumbnail
 * Send the unique identifier for a live stream to delete its thumbnail.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
 * @return LiveStreamsApiDeleteThumbnailRequest
 */

func (s *LiveStreamsService) DeleteThumbnailWithContext(ctx context.Context, liveStreamId string) (*LiveStream, error) {
	var localVarPostBody interface{}

	localVarPath := "/live-streams/{liveStreamId}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"liveStreamId"+"}", url.PathEscape(parameterToString(liveStreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}

	req, err := s.client.prepareRequest(ctx, http.MethodDelete, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(LiveStream)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
