/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideosdk

import (
	"context"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type AuthenticationServiceI interface {
	/*
	 * Authenticate Authenticate
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AuthenticationApiAuthenticateRequest
	 */

	Authenticate(authenticatePayload AuthenticatePayload) (*AccessToken, error)
	/*
	 * Refresh Refresh token
	 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return AuthenticationApiRefreshRequest
	 */

	Refresh(refreshTokenPayload RefreshTokenPayload) (*AccessToken, error)
}

// AuthenticationService communicating with the Authentication
// endpoints of the api.video API
type AuthenticationService struct {
	client *Client
}

/*
 * Authenticate Authenticate
 * To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.

 * @return AuthenticationApiAuthenticateRequest
 */

func (s *AuthenticationService) Authenticate(authenticatePayload AuthenticatePayload) (*AccessToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/auth/api-key"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = authenticatePayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AccessToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}

/*
 * Refresh Refresh token
 * Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token.


 * @return AuthenticationApiRefreshRequest
 */

func (s *AuthenticationService) Refresh(refreshTokenPayload RefreshTokenPayload) (*AccessToken, error) {
	var localVarPostBody interface{}

	localVarPath := "/auth/refresh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	// body params
	localVarPostBody = refreshTokenPayload

	req, err := s.client.prepareRequest(http.MethodPost, localVarPath, localVarPostBody, localVarHeaderParams, localVarQueryParams)
	if err != nil {
		return nil, err
	}

	res := new(AccessToken)
	_, err = s.client.do(req, res)

	if err != nil {
		return nil, err
	}

	return res, nil

}
